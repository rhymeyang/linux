import{_ as a,c as s,a as n,b as e,d as t,o as i}from"./app-CCsZbG-M.js";const r={};function h(l,o){return i(),s("div",null,o[0]||(o[0]=[n('<p>As you study this section, answer the following questions:</p><ul><li>Which script controls the <b>at</b> daemon?</li><li>Which files control access to the <b>at</b> command?</li><li>What is the main difference between using <b>at</b> and <b>cron</b> to schedule a job?</li><li>Which files control access to the <b>cron</b> command?</li><li>Where is the system-wide crontab file located?</li><li>How can you edit personal crontab files?</li></ul><p>In this section, you will learn to:</p><ul><li>Schedule tasks with at and cron</li><li>Use anacron</li><li>Configure crontab</li></ul><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 1.4 Manage system processes <ul><li>Monitor and manage running processes</li><li>Configure scheduled tasks</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td><p> 1.4 Given a scenario, configure and use the appropriate processes and services </p><ul><li> Scheduling services <ul><li>cron</li><li>crontab</li><li>at</li></ul></li></ul></td></tr></tbody></table><h2 id="_10-3-1-at-task-scheduling" tabindex="-1"><a class="header-anchor" href="#_10-3-1-at-task-scheduling"><span>10.3.1 at Task Scheduling</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>at Task Scheduling 00:00-00:36 In this lesson, we&#39;ll look at using the at daemon, also called at or atd. This is a great way to schedule a task to run once sometime in the future, like a backup job. Atd runs in the background on your Linux system, checking a task&#39;s schedule and when the time comes, running the task for you.</p><p>Most Linux distributions install atd automatically during the initial installation of the system, but some don&#39;t. In this case, you can install manually from your installation repository using yum, zypper, or apt.</p><p>You can run atd by entering systemctl start atd.</p><p>Start atd 00:36-01:03 It&#39;s important to make sure atd runs every time the system boots. You might schedule a job, shut down the system, power the system back on, and expect that job to run at the scheduled time. But the job won&#39;t run if atd didn&#39;t load when the system booted up.</p><p>Use systemctl enable atd to ensure the at daemon starts automatically whenever the system boots.</p><p>Restrict Access to atd 01:03-02:02 Now it&#39;s time to configure which users on your system are allowed to create at jobs. Do this by editing these two files.</p><p>First, we have /etc/at.allow and /etc/at.deny. As their names imply, users in the at.allow file can create at jobs, while users in the at.deny file can&#39;t.</p><p>Here&#39;s a key point about these two files: daemon is partial to at.allow. If at.allow exists, then at.deny will be ignored. But, if at.allow doesn&#39;t exist, and at.deny does, then at.deny is used.</p><p>at.allow and at.deny are basic text files. Open them in a text editor and enter in the names you want to either allow or deny. If you make any changes to these files, there&#39;s no need to restart daemon because they&#39;re dynamically read every time a user tries to create a new at job.</p><p>Define a New atd Job 02:02-02:17 You&#39;re ready to use at now. The syntax is straightforward. At the shell prompt, type &#39;at&#39;, then specify a time when you want the job to run. at is very flexible on how to specify the time for commands to run.</p><p>Use Fixed Time References 02:17-03:21 You can specify either a fixed or a relative time reference. A fixed time reference is a specific time in the future, not relative to anything else.</p><p>One option is to specify the exact hour and minute when you want to run the commands. If you use this type of syntax, at is going to assume that the hour and minute you specify is for today unless that time has already passed, which then assumes the time is for tomorrow.</p><p>If you&#39;re not using a 24-hour clock, you could also add AM or PM here to specify whether the time is morning or evening.</p><p>There are other keywords you can use to specify a fixed start time. For example, you can specify noon, midnight, or teatime. Noon specifies 12 PM, midnight specifies 12 AM, and teatime specifies 4 PM.</p><p>You can get very detailed with start times, such as specifying the exact month, day, and year you want a command to be run using any of these three syntaxes. Or you can mix two options into one by specifying the exact month, date, year, and time when you want the command to be run.</p><p>Use Relative Time References 03:21-04:11 Next let&#39;s look at relative time references. These aren&#39;t fixed at a particular point in time. They&#39;re relative to the current time.</p><p>One option would be now, which doesn&#39;t make a lot of sense. Why would you use at if you wanted to run a command now? You would just run it from the shell prompt.</p><p>Instead, specify now plus a certain value. For example, enter &#39;now +5 minutes&#39;, or &#39;now +2 hours&#39;, or &#39;now +3 days&#39;. Here&#39;s an example.</p><p>I&#39;ve entered &#39;at now +10 minutes&#39; to indicate that I want the commands specified here to be run 10 minutes in the future of whatever time it currently is. You can also specify today, and that specifies that the command be run today.</p><p>You can also mix relative and fixed values, such as &#39;2:00 PM today&#39;. Today is the relative time reference; 2:00 PM is the fixed time reference.</p><p>Add Commands for atd to Run 04:11-06:11 After entering the at command and a time value, you&#39;ll see the at prompt. Now enter in all the commands you want at to run during the time specified.</p><p>In this example, in 10 minutes I want to run the tail command to look up the boot.log file and write the output to a file named logfile.txt in my /home directory. I also want to use the echo command to write, &quot;The logfile.txt file has been created.&quot;</p><p>This brings up an important point that if the commands you enter will output some type of text on the screen as their standard out after they&#39;re done running, you won&#39;t see that text because at runs these jobs in the background.</p><p>For these cases you have two options. One is to redirect the output to a file in the file system. That&#39;s what I did in this first command.</p><p>Normally, the tail command displays the text of the specified file on the screen. Because I won&#39;t be able to see that text after being run by at, I redirected the output to a text file I can view later with cat or whatever utility I want.</p><p>The other option is to do nothing. That&#39;s what I did on this second command. I said echo &quot;The logfile.txt file has been created.&quot; If this was the regular shell prompt, echo would display this text on the screen. But, with at, it&#39;ll capture the standard out from the command and email me on my local user account.</p><p>That&#39;s why I configured this at job in this way. When the job runs, I&#39;ll get an email notifying me so I can check the file system and access the logfile.txt file to see the output.</p><p>You can add several commands to the at job. Just hit Enter at the end of every command, and the at prompt will be displayed. You can keep adding commands until you get everything in the job you want run.</p><p>Just remember that each command needs to be on its own line. When you&#39;re done entering commands, press the Ctrl+D key sequence. When you do, the at prompt disappears, the job is scheduled, and a job number is assigned. In this case, we have number 5 assigned to the job.</p><p>View Pending atd Jobs 06:11-06:54 Once you&#39;ve configured at jobs, you can then use the atq command to view the list of pending jobs.</p><p>Be aware that if you&#39;re logged in as a regular user—as in the example right here—then the atq command will display only the jobs associated with your user account.</p><p>If you need to see all the pending jobs for all the users on the system, log in as root and run the atq command.</p><p>If you create an at job and then realize a mistake, remove it from the queue of pending at jobs using the atrm command.</p><p>Just enter &#39;atrm&#39;, followed by the job number. You might need to run atq first, get the number of the job you want to eliminate, then run the atrm command, followed by the job number you just identified.</p><p>Summary 06:54-07:12 That&#39;s it for this lesson. In this lesson, we reviewed how to use the at daemon to schedule jobs to be run in the future. We also discussed the atq and atrm commands for viewing and removing pending at jobs.</p><h2 id="_10-3-2-scheduling-tasks-with-at" tabindex="-1"><a class="header-anchor" href="#_10-3-2-scheduling-tasks-with-at"><span>10.3.2 Scheduling Tasks with at</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Schedule Tasks with at 00:00-00:16 The at command is used to schedule jobs, processes, and programs at a later time. This command is meant to execute a job once at a set time, whereas crontab jobs are meant to repeat on a schedule.</p><p>Specify the Time 00:16-00:49 There are many ways to specify the time an at job runs. Among the most common is to specify the exact date and time; that way, you know when it will be triggered. You might run at 06:00 080822 This date happens to be for tomorrow at 6:00 a.m. Or you could execute at now +30min to run a job 30 minutes from now. You can even use at teatime. This is a reference to Britain&#39;s traditional teatime, 4:00 p.m.</p><p>Running a Command With at 00:49-01:49 We&#39;re going to go ahead and schedule a script to run at a future date. Our script is located in /home/testout/scripts/. The packages.sh script is outputting the list of packages installed to a log file. Notice that it&#39;s exporting the date and appending it to the end of the file. Now, let&#39;s schedule this for 2 minutes from now by using the command at now +2min. In this mode, it&#39;s waiting for you to put in a command. Let&#39;s type /home/testout/scripts/packages.sh and press Enter. If we had multiple commands, we could enter one per line.</p><p>After I press Ctrl+D, it commits the job to the at job queue. Most bash commands can run with an at job. Let&#39;s go look at our log file in cd /home/testout/log/. If we do a long listing, you can see there&#39;s a new log file that was recently written to this directory.</p><p>The atq Command 01:49-01:57 The atq program shows jobs that are in the queue that are waiting to run or are running now. As you can see, there&#39;s an upcoming job in there for tomorrow.</p><p>The atrm Command 01:57-02:13 If I decide I don&#39;t want that task to run, I can type atrm and then specify the job number, which is 5. Nothing came back. But now, if I do an atq, there&#39;s nothing there. That means the job was removed and is no longer scheduled to run.</p><p>Summary 02:13-02:27 And that&#39;ll wrap up this demo. In this demonstration, we discussed how to use the at command. We also reviewed several options and configurations you can use to run this command.</p><h2 id="_10-3-3-at-command-facts" tabindex="-1"><a class="header-anchor" href="#_10-3-3-at-command-facts"><span>10.3.3 at Command Facts</span></a></h2><h3 id="at" tabindex="-1"><a class="header-anchor" href="#at"><span>at</span></a></h3><p>This lesson covers the following topics:</p><ul><li>About the at daemon (atd)</li><li>at daemon commands</li></ul><h3 id="about-the-at-daemon" tabindex="-1"><a class="header-anchor" href="#about-the-at-daemon"><span>About the at Daemon</span></a></h3><p>The at daemon:</p><ul><li> Is managed using: <ul><li> The <b>atd</b> init script in the /etc/rc.d/init.d/ or /etc/init.d/ script directory on init-based distributions. </li><li> The <b>atd.service</b> file and the <b>systemctl</b> command on systemd-based distributions. </li></ul></li><li> Uses configuration files to specify standard user accounts that can and cannot use the <b>at</b> command. <ul><li><b>/etc/at.allow</b> specifies users who can use the <b>at</b> command. </li><li><b>/etc/at.deny</b> specifies users who cannot use the <b>at</b> command. </li></ul></li></ul>',59),e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",null,[e("span",null,[t(" If the "),e("b",null,"at.allow"),t(" file exists, then only users listed in the file are allowed to create at jobs. The "),e("b",null,"at.deny"),t(" file is ignored. If "),e("b",null,"at.allow"),t(" does not exist, then just the users listed in "),e("b",null,"at.deny"),t(" are blocked from creating at jobs. Everyone else is allowed to create jobs.")])])],-1),n('<h3 id="at-1" tabindex="-1"><a class="header-anchor" href="#at-1"><span>at</span></a></h3><ol><li>Enter <b class="fw-bold">at <i class="fs-italicize">time</i></b> . The <b class="fw-bold">at&gt;</b> prompt is displayed.</li><li>Enter each command you want to run at the at&gt; prompt, one command per line. Press <b class="fw-bold">Enter</b> after each command.</li><li>Press <b class="fw-bold">Ctrl+d</b> to exit the at&gt; prompt.</li></ol><h4 id="at-daemon-commands" tabindex="-1"><a class="header-anchor" href="#at-daemon-commands"><span>at Daemon Commands</span></a></h4><p>at</p><table><thead><tr><th>Command</th><th>Used To</th><th>Examples</th></tr></thead><tbody><tr><td><b>at <i>time date</i></b></td><td> Schedules the command to run at a specific time and date. Options and syntax include: <ul><li><b>today</b></li><li><b>tomorrow</b></li><li><b><i> month #</i></b></li><li><b><i> MMDDYY</i></b></li><li><b><i> MM/DD/YY</i></b></li><li><b><i> DD.MM.YY</i></b></li></ul></td><td><b>at 12:12AM</b> starts the command the next time the clock reads 12:12 AM. <b><br>at 12:12AM September 1</b> starts the command at 12:12 AM on September 1. <b><br>at 12:00AM 01/01/2016</b> starts the command at 12:00 AM on January 1, 2016. <b><br>at 12:00AM 01012016</b> starts the command at 12:00 AM on January 1, 2016. <b><br>at 12:00AM 01.01.2016</b> starts the command at 12:00 AM on January 1, 2016. </td></tr><tr><td><b>at <i>time_of_day</i></b></td><td> Uses time-of-day keywords to run the command. Options are: <ul><li><b>Midnight</b> (12:00 AM)</li><li><b>Noon</b> (12:00 PM)</li><li><b>Teatime</b> (4:00 PM)</li></ul></td><td><b>at midnight</b> starts the command the next time the clock reads 12:00 AM. </td></tr><tr><td><b>at now</b></td><td>Runs the command immediately.</td><td><br></td></tr><tr><td><b>at now + <i>number time_period</i></b></td><td> Schedules the command to run at the designated time in the future. Use: <ul><li><b>minutes</b></li><li><b>hours</b></li><li><b>days</b></li><li><b>months</b></li></ul></td><td><b>at now +</b> <b>6 days</b> starts the command six days after the time the command is issued. <br><b>at now +</b> <b>1 months</b> starts the command one month after the time the command is issued. </td></tr><tr><td><b>at -f <i>filename</i> <i>time</i></b></td><td> Schedules the tasks listed in the specified file to run at the designated time. </td><td><b>at -f /home/user/mycommands now + 3 hours</b> starts the jobs listed in the mycommands file in three hours from the time the command is issued. </td></tr><tr><td><b>at -l <br> atq</b></td><td> Lists the tasks in the at queue for the current user. <ul><li> When run as root, <b>atq</b> or <b>at -l</b> lists all the jobs in the at daemon&#39;s queue. </li><li> When run as a user other than root, <b>at</b> lists only the jobs for the current user. </li></ul></td><td><b>atq</b> shows all jobs in the at queue.</td></tr><tr><td><b>at -d <i>jobnumber</i> <br>atrm <i>jobnumber</i></b></td><td> Removes jobs from the <b>at</b> queue. Uses spaces to separate multiple jobs. </td><td><b>at -d 2 3</b> removes jobs 2 and 3 from the at queue. <br><b>atrm 4</b> removes job 4 from the at queue. </td></tr></tbody></table><h2 id="_10-3-4-cron-task-scheduling-part-1" tabindex="-1"><a class="header-anchor" href="#_10-3-4-cron-task-scheduling-part-1"><span>10.3.4 cron Task Scheduling Part 1</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>cron Task Scheduling 00:00-00:40 In this lesson, we&#39;ll look at using the cron daemon to run jobs on a future schedule you specify. You might be thinking that the at daemon can do the same thing. However, at only works for running the job once, while cron daemon can be set to a regular, repetitious schedule.</p><p>The cron daemon runs continuously in the background when the system is booted up. It checks special files called crontabs once every minute to see if there&#39;s a job scheduled that needs to be run. If so, cron daemon runs the job; if not, it waits and checks again the next minute.</p><p>/etc/crontab 00:40-01:39 You can configure cron to run two different types of jobs – system jobs or user jobs.</p><p>In this lesson we&#39;ll talk about running system jobs. Using cron to run system jobs on a schedule is useful because it saves time and effort. To run those jobs, the cron daemon uses the file /etc/crontab.</p><p>The crontab file contains a command telling the cron daemon to run scripts located in these four directories. The first one in the /etc directory is cron.hourly, which contains cron scripts that should be run every hour. There&#39;s also a directory called cron.daily, containing scripts to be run once a day. Next is a directory called cron.weekly, with scripts to be run once a week.</p><p>And then finally, there&#39;s a directory called cron.monthly, which should be run once a month. Any script found in these four directories is run automatically by cron according to the specified schedule.</p><p>cron Directories 01:39-02:14 For example, in the /etc/cron.daily directory, there are scripts that perform a wide variety of tasks. The script called logrotate contains the commands necessary to rotate system logs. And because it&#39;s in the daily directory, it runs once a day. This is designed to keep log files manageable and backed up regularly.</p><p>So, if there&#39;s a system task that needs to be run according to one of these schedules, create a script file with the commands you need and copy it into the appropriate directory in /etc.</p><p>/etc/cron.d 02:14-05:33 If there&#39;s a system job to be run on a schedule, but it doesn&#39;t fit any of these four categories, you can create a custom schedule using a fifth directory called cron.d. The cron daemon reads the crontab file and runs the commands according to the schedule you specify. Here&#39;s a sample crontab file.</p><p>Here&#39;s a text file with one cron job per line. Each line has six fields separated by tabs. Here&#39;s field 1, field 2, field 3, field 4, field 5, and the rest is field 6. These fields configure how the cron job will be scheduled.</p><p>For example, you want to back up the /home directory using the tar command. You want it to occur every day except for Sunday, because nobody&#39;s at work on Sunday. You also plan to run the command at 11:05 pm, because that&#39;s when everybody should be gone and not working on the system.</p><p>You want to save the backup to a file named home_back.tar, which will be saved on a removable USB hard disk mounted in /media/usb. You can accomplish this using the crontab file.</p><p>Let&#39;s look at what each field in the crontab file does. This one is the minutes field. It specifies how many minutes past the hour the command should run. Next is the hour field, specifying the hour of the day the command should run. These two fields together specify the time when the command should run. In this case, we set it to 23:05. As you can see, cron prefers the 24-hour clock. In the 12-hour clock this is 11:05 p.m.</p><p>The next field specifies the day of the month you want the command to be run. Notice here that I used an asterisk character. That means every day of the month. If I wanted to run it only on a particular day of the month, I&#39;d put the number of that day here. Next is the month field. It specifies the month when the command should be run. In this case I&#39;ve used an asterisk again because I want the command to be run every month. If that weren&#39;t the case, I would put the number of the month instead.</p><p>And then, there&#39;s the day of the week we want the command to be run on. cron considers Sunday as day zero and Saturday as day six. For example, if I put five in this field, the command would only be run on Fridays. Or I can put a range, as I&#39;ve done here, one to six. This indicates that the command should be run on Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday—but not on Sunday.</p><p>Lastly, the sixth field is the command we want the cron daemon to run. Notice that we had to use the full path over here to the tar command. That&#39;s different from what you&#39;re used to when running a command at the shell prompt. That&#39;s because the cron daemon doesn&#39;t use the path environment variable to find the command to run, so you need the full path. If you don&#39;t know the full path to the command you want to run, use the which command at the shell prompt. Type which followed by the name of the command.</p><p>So, using this crontab file, my /home directory will be backed up to a file named /media/usb/home_back.tar at 11:05 p.m., every day of the month, Monday through Saturday.</p><p>Summary 05:33-05:54 That&#39;s it for this video. In this lesson, we reviewed how to use the cron daemon on a Linux system to schedule tasks to run automatically on a schedule you specify. We talked about how cron works and how to create system cron jobs. We&#39;ll talk about user cron jobs in another video.</p><h2 id="_10-3-5-cron-task-scheduling-part-2" tabindex="-1"><a class="header-anchor" href="#_10-3-5-cron-task-scheduling-part-2"><span>10.3.5 cron Task Scheduling Part 2</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>cron Task Scheduling 00:00-00:44 In another lesson we looked at using cron daemon to run system jobs. Now let&#39;s explore user jobs.</p><p>Individual users on your Linux system can create their own cron jobs, running commands on the schedule they specify. There&#39;s a separate crontab file associated with their user account.</p><p>Unlike the system crontab file, which is saved in the /etc directory, user crontab files are created and stored in /var/spool/cron/tabs. So, if an individual user creates a crontab file, it&#39;ll be saved in the tabs directory under their username.</p><p>User cron Jobs 00:44-01:47 I should point out that not all Linux system administrators want their users creating cron jobs. If this is the case, lock the system down to prevent users from creating cron jobs. In the /etc directory there are two files, cron.allow and cron.deny, to determine who can and cannot create crontab schedules.</p><p>By default, cron.allow doesn&#39;t exist. The only file that exists when the system is initially set up is cron.deny. If you use just cron.deny, all users on the system are allowed to create cron jobs except for anyone whose account is listed in the cron.deny file.</p><p>That&#39;s one way to approach cron security. Another approach is to create a cron.allow file in the /etc directory. If you do this, everything changes. If cron.allow exists, then cron.deny is moot. It&#39;s not even used. If cron.allow exists, no users on the system are allowed to create crontab files except for those listed in it.</p><p>User crontab Files 01:47-03:21 With this in mind, let&#39;s look at how users can create crontab files. First, they must be logged in-- in this example I&#39;m logged in as the jsmith user-- then type the crontab -e command.</p><p>When they run crontab -e, the system loads the vi editor, creates a new blank crontab file, and loads it in the text editor. Then, the user adds lines for each cron job they want to run, using the same syntax we saw for system cron jobs – the minutes field, hour field, day of the month field, month, day of the week, and then the command.</p><p>In this example, the tar command will backup my user&#39;s home directory to the myhome.tar file. It will be run at 17:10 hours, or 5:10 PM, every day, every month, every day of the week. Notice once again that the full path to the tar command was specified.</p><p>Once the jsmith user is done creating the crontab file, they exit out of the vi editor, just like any other text file, and save. When they do, a new crontab file for the user account is created in /var/spool/cron/tabs. The cron service is notified and reloads itself so that the new configuration in the crontab file can be applied.</p><p>There are a couple of other options you can use with the crontab command. You can use -l to view your user&#39;s crontab file; it&#39;ll print to the screen. And if you decide you don&#39;t want a crontab file for your user account anymore, use the crontab -r option to remove it.</p><p>Summary 03:21-03:53 That&#39;s it for this video. In this lesson, we reviewed how to use the cron daemon on a Linux system to schedule tasks to run automatically on a schedule you specify. We talked about how to create user specific cron jobs. Some Linux administrators may be fine with users being allowed to create their own crontab files while others may not. Either way, this lesson taught you the basics of how to use or block user-specific cron jobs, if you want.</p><h2 id="_10-3-6-scheduling-tasks-with-cron" tabindex="-1"><a class="header-anchor" href="#_10-3-6-scheduling-tasks-with-cron"><span>10.3.6 Scheduling Tasks with cron</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Schedule Tasks With cron 00:00-00:08 In this demonstration, we&#39;re going to talk about scheduling tasks using the cron.</p><p>Advantages of Using the cron 00:08-00:33 The at command can also be used to schedule tasks in the future. But it has one glaring weakness, and that is the fact that it can run the job that you specify in the future only once, which doesn&#39;t work very well for jobs that have to run on a regular basis, such as running a backup of your system every night.</p><p>Cron works much better in this type of scenario. Using cron, you can create a custom schedule for when the job should run, and then the cron daemon will automatically run that job for you.</p><p>System Jobs 00:33-04:03 We&#39;re going to look at creating system cron jobs first. Lets navigate to /etc. If we do an ls -l cron*, we can see all files with the word &quot;cron&quot;, whether they&#39;re in a folder, and what&#39;s in them. In order to create a system job, you need to create a script containing all the necessary commands and put them in the appropriate cron directory. There are four directories you can use. We have cron.daily, cron.hourly, cron.monthly, and cron.weekly directories. Any scripts in the cron.daily directory are run once a day. Any scripts in the hourly directory run once an hour. Any scripts in the monthly directory run once per month. Any scripts in the weekly directory run once per week.</p><p>For example, notice that in the daily directory, there&#39;s a script called logrotate. Let&#39;s take a look at it. Here, you can see that once a day, because it&#39;s in the daily directory, this command is going to run to rotate your logs. You&#39;re not stuck with just the default scripts that are listed here. You can create your own scripts and then add them to the appropriate directory. For example, if you had a script that you wanted to run every hour, you would drop it into the cron.hourly directory.</p><p>In addition to these four directories that have a predefined schedule, there&#39;s also another directory that you need to be aware of called cron.d. cron.d is used for system jobs whose schedules don&#39;t fit in one of these default directories. For example, you may need to run a particular job on a schedule that&#39;s not hourly, daily, or monthly. You can define a different schedule in cron.d.</p><p>There&#39;s one critical thing you need to remember about cron.d: you cannot put scripts in cron.d the way you do these other directories. Instead, you must add crontab files. A crontab file is just a text file that contains a list of commands to be run by cron. Each command, along with its associated schedule, is listed on a single line in the file.</p><p>Let&#39;s go ahead and look at one of these that&#39;s already been defined in cron.d. Notice, down here, that we have a cron job defined in the e2scrub_all crontab file. There&#39;s a very specific syntax that needs to be followed when you define a crontab file. Each line within the crontab file is made up of specific fields.</p><p>This first field is the minutes field. The second field is the hour field. Be aware that the cron daemon does prefer the 24-hour clock, so you should use a value of 0 to 23 in this field. The next field is the day field, which specifies the day of the month that the command should run. The next field specifies the month of the year when the command should run. The next field specifies the day of the week when the command should run. Any field containing stars is essentially a wildcard, which means it can run on any possible entries in the field. So, If I only specified the minute and hour and put a star on everything else, that means it would trigger a job every day at a specific time.</p><p>This field specifies the name of the user that the command should run as. In this case, we&#39;re going to run the command as root. The last field specifies the exact command to be run. In this example, it has two different cron jobs. The first one will run only on Sunday at 3:30 a.m., and the second one will run every day at 3:10 a.m.</p><p>You can define your own system jobs in a custom crontab file. All you have to do is create the crontab file and drop it in the cron.d directory, and then the command that you specify will run according to its associated schedule. Just remember that you have to use similar syntax as the existing default jobs.</p><p>User-Specific Jobs 04:03-07:08 Each user can create their own individual crontab file that is unique to their account, and it&#39;s stored in /var/spool/cron/crontabs instead of here, in the /etc/cron.d directory. The way you determine if a crontab is already made is to use the listing command for crontab: crontab -l. As stated here, there is no crontab for the testout account. All that&#39;s required to create one is to use crontab -e to edit a new crontab. In this case, we&#39;re using the nano editor. Other distributions, such as RedHat, use vim to edit.</p><p>For this scenario, let&#39;s suppose that I want to create a backup of my user&#39;s home directory every day at 10:01 p.m. In order to do this, I enter 01 for my minutes field and then a space. Then I specify the hour when this job should run, 22. The job is going to run at 10:01 p.m. Then we have to specify what day of the month we want it to run. We&#39;re going to run every day of the month. Then we have to specify which months of the year we want the command to run—all of them.</p><p>Then we have to specify which days of the week we want it to run. Do we want it to run Monday through Friday, or every day? Let&#39;s just run it every day. Then I have to specify the name of the command to run. We&#39;re going to create our backup using the tar utility, so I have to specify /bin/tar. It&#39;s important to note that if you&#39;re using the tar command from the shell prompt, you just type tar. Well, that doesn&#39;t work with cron. You have to specify the full path to the command you want to run in the crontab file. If you don&#39;t know which directory that is, use the which command to find the information you need to make that choice.</p><p>The c is for creating the new archive, the z is for compressing with gzip, and the f is for specifying a file location to put the archive. I want to put it in /backup, and I want the name of the file to be testout_backup.tar.gz. I&#39;ll give it a .tar.gz extension to indicate that it&#39;s a tar archive that&#39;s been compressed using gzip.</p><p>Then I have to specify what I want backed up. I just want back up my /home directory, so I&#39;ll use ~/. I&#39;ll press Ctrl+o to write it out and press Enter, then Ctrl+x to exit the nano editor. At 10:01 tonight, the tar command will run and create that backup file. We can verify this by entering crontab -l. It will then read the crontab file for my user account and output it here on the screen, so we can see what jobs I have configured and when they&#39;re going to run.</p><p>If, for some reason, you don&#39;t want this job to run, you can enter crontab -e and either comment out the job or just delete it entirely. What I like to do is comment it out first with a #, save it, and then wait a few days to see if this job is needed anymore. It&#39;s also possible to delete a whole user&#39;s crontab with crontab -r. Use this command with caution because it will delete all jobs for that user. Keep in mind, if any jobs need user escalation, they&#39;ll probably have to run under the roots crontab versus a standard users.</p><p>Summary 07:08-07:26 That&#39;s it for this demonstration. In this demo, we talked about using the cron to schedule jobs. We talked about how to use cron to schedule system jobs, and then we talked about how to use cron to define user-specific jobs with crontab.</p><h2 id="_10-3-7-cron-facts" tabindex="-1"><a class="header-anchor" href="#_10-3-7-cron-facts"><span>10.3.7 cron Facts</span></a></h2><h3 id="cron" tabindex="-1"><a class="header-anchor" href="#cron"><span>cron</span></a></h3><p>This lesson covers the following topics:</p><ul><li><b class="fw-bold">cron</b> configuration files</li><li>Syntax for <b class="fw-bold">cron</b> jobs</li><li><b class="fw-bold">cron</b> commands</li></ul><h3 id="cron-configuration-files" tabindex="-1"><a class="header-anchor" href="#cron-configuration-files"><span>cron Configuration Files</span></a></h3><p>cron</p>',65),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"File"),e("th",null,"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"/etc/crontab"),e("td",null,[t(" The /etc/crontab (cron table) file holds entries that direct commands to execute at a specific time. The /etc/crontab file: "),e("ul",null,[e("li",null,"Is used to schedule custom tasks that run system-wide."),e("li",null,"Can only be edited by the root user.")]),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[e("b",null,"crond"),t(" runs tasks scheduled in the /etc/crontab file as the root user.")])])])])])])]),e("tr",null,[e("td",null,[t("/etc/cron. "),e("i",null,"directory")]),e("td",null,[t(" The "),e("b",null,"cron"),t(" daemon executes the scripts found in each of the following directories at the specified interval for the whole system: "),e("ul",null,[e("li",null,"/etc/cron.hourly"),e("li",null,"/etc/cron.daily"),e("li",null,"/etc/cron.weekly"),e("li",null,"/etc/cron.monthly")])])]),e("tr",null,[e("td",null,[t("/var/spool/cron/ "),e("i",null,"username")]),e("td",null,[t(" If permitted, each user can create a personal crontab file located at /var/spool/cron/ "),e("i",null,"username"),t(" . ")])]),e("tr",null,[e("td",null,"/etc/cron.allow"),e("td",null,[t(" The /etc/cron.allow file identifies users who are allowed to create their own cron jobs. If /etc/cron.allow file exists, then only users listed within it are allowed to create a crontab file in /var/spool/cron/ "),e("i",null,"username."),t(" All other users are denied, and the /etc/cron.deny file is ignored. ")])]),e("tr",null,[e("td",null,"/etc/cron.deny"),e("td",null,[t(" The /etc/cron.deny file identifies users who are not allowed to create cron jobs. If the /etc/cron.deny file exists, only the users listed within it are not allowed to edit /var/spool/cron/ "),e("i",null,"username."),t(" Everyone else is allowed. This file is only processed if the /etc/cron.allow file does not exist. ")])])])],-1),n('<h3 id="syntax-for-cron-jobs" tabindex="-1"><a class="header-anchor" href="#syntax-for-cron-jobs"><span>Syntax for cron Jobs</span></a></h3><h4 id="etc-crontab" tabindex="-1"><a class="header-anchor" href="#etc-crontab"><span><code>/etc/crontab</code></span></a></h4><table><thead><tr><th>Example</th><th>Minute</th><th>Hour</th><th>Day of Month</th><th>Month</th><th>Day of Week</th><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><b>00 5 * * 6 /bin/tar -cf /home /mnt/usb/homebak.tar</b></td><td>00</td><td>5</td><td>*</td><td>*</td><td>6</td><td><b>/bin/tar -cf /home /mnt/usb/homebak.tar</b></td><td> This schedule runs the tar utility on the sixth day of the week (Saturday) at the fifth hour (5:00 a.m.) and zero minutes. (Note that the days of the week are numbered 0 through 7, 0 and 7 being equal to Sunday.) </td></tr><tr><td><b>15 23 25 * * /bin/updatedb</b></td><td>15</td><td>23</td><td>25</td><td>*</td><td>*</td><td><b>/bin/updatedb</b></td><td> This schedule runs the <b>updatedb</b> command at 11:15 p.m. on the 25th of every month. </td></tr><tr><td><b>00 24 1 1,6 * /bin/who &gt; /root/who.txt</b></td><td>00</td><td>24</td><td>1</td><td>1 and 6</td><td>*</td><td><b>/bin/who &gt; /root/who.txt</b></td><td> This schedule runs the <b>who</b> command at midnight on the first days of January and June. </td></tr></tbody></table><h3 id="cron-commands" tabindex="-1"><a class="header-anchor" href="#cron-commands"><span>cron Commands</span></a></h3><p>cron</p>',5),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Command"),e("th",null,"Function"),e("th",null,"Examples")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",null,"crontab")]),e("td",null,[t(" Manages the /var/spool/cron/ "),e("i",null,"username"),t(" crontab file. Be aware of the following options: "),e("ul",null,[e("li",null,[e("b",null,"-e"),t(" edits the crontab file for the current user in vi. ")]),e("li",null,[e("b",null,"-l"),t(" displays the contents of the current user's crontab file. ")]),e("li",null,[e("b",null,"-r"),t(" removes the current user's crontab file.")]),e("li",null,[e("b",null,[t("-u "),e("i",null,"username")]),t(" specifies a different user for the "),e("b",null,"-e"),t(" , "),e("b",null,"-l"),t(" , and "),e("b",null,"-r"),t(" options. ")])])]),e("td",null,[e("b",null,"crontab -e"),t(" edits the crontab of the current user. "),e("br"),e("b",null,"crontab -eu"),t(),e("b",null,[e("i",null,"username")]),t(" edits the crontab file of the specified user. "),e("b",null,[e("br"),t("crontab -l")]),t(" lists the cron jobs for the current user. "),e("br"),e("b",null,"crontab -lu"),t(),e("b",null,[e("i",null,"username")]),t(" lists the cron jobs for the specified user. "),e("br"),e("b",null,"crontab -r -u"),t(),e("b",null,[e("i",null,"username")]),t(" removes the crontab file of the specified user. "),e("br"),e("b",null,"crontab -r"),t(" removes the crontab file of the current user. "),e("br"),e("b",null,"crontab /home/user/cronjobs"),t(" creates a crontab file using the cronjobs file for the current user. ")])]),e("tr",null,[e("td",null,[e("b",null,[t("crontab "),e("i",null,"file")])]),e("td",null,[t(" Loads a crontab job from a file. Write the file using the crontab syntax. "),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," This command overwrites the current crontab.")])])])])]),e("td",null,[e("b",null,"crontab /home/user/cronjobs"),t(" creates a crontab file using the cronjobs file for the current user. ")])])])],-1),n('<p>Be aware of the following details:</p><ul><li>Some distributions use separate files in the /etc/cron.d directory in addition to lines in the /etc/crontab file.</li><li>The cron daemon (crond) is managed using its init script in the /etc/rc.d/init.d/ or /etc/init.d/ script directory on init-based distributions. For systemd-based distributions it is managed using the crond.service file and the <b class="fw-bold">systemctl</b> command.</li></ul><h2 id="_10-3-8-using-anacron" tabindex="-1"><a class="header-anchor" href="#_10-3-8-using-anacron"><span>10.3.8 Using anacron</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Use anacron 00:00-00:12 In this demonstration, we&#39;re going to discuss how anacron works. Most Linux distributions use anacron along with cron to automate tasks.</p><p>Role and Function of anacron 00:12-00:35 Cron works well for automation. But if a system is powered off during a scheduled task, it&#39;ll be skipped. With anacron, if the system is powered off during a scheduled task, anacron will automatically run the task on the next boot sequence. Just as cron is configured using the crontab files in /etc, the anacron daemon is configured using the /etc/anacrontab file.</p><p>anacrontab File 00:35-02:11 The syntax used within the anacrontab file is different from the syntax used within the crontab file. We have three jobs already defined in the anacrontab file.</p><p>The first field specifies the recurrence period in days. In other words, how often do we want this job to run? A 1 it specifies that the job occurs every day. 7 means that the job occurs once per week. Next, we have monthly, which specifies that the job recurs once per month. Instead of using days, we use the @monthly tag. By specifying monthly, we account for the fact that months have different numbers of days.</p><p>Let&#39;s review the fields for our anacrontab. The first field specifies the recurrence period in days. How often is the job going to run? The second field specifies the delay in minutes. If the system was down when a particular job was supposed to run, the delay in the minutes field specifies how long anacron will wait after the system comes online before it runs the job.</p><p>This first job has a delay set for five minutes. If the system was down when this job was supposed to run, then after the system is powered on, anacron is going to wait five minutes before it&#39;ll run that job. The next two jobs are staggered at 10 minutes and 15 minutes.</p><p>The jobs do not specify the exact time when they are going to run. By default, anacron runs jobs between 03:00 a.m. and 10:00 p.m., or 22:00. In Ubuntu 22.04, we can add the variable START_HOURS_RANGE in order to alter start times. We enter START_HOURS_RANGE=1-7, to change the start times to be between 1:00 a.m. and 7:00 a.m.</p><p>anacron--Time Delay 02:11-03:31 If the system is down when a job is supposed to run, then after the system comes up, anacron is going to wait the specified number of minutes in the delay start column before running the job.</p><p>It&#39;s important to note that anacron will also add a random number of minutes to the value we specify under delay in minutes. The default value is 45. This causes anacron to add a random number of minutes somewhere between 0 and 45 to the delay minutes specified for skipped jobs in delay minutes.</p><p>Let&#39;s suppose this job did not run because the system was down. The system has now come back up. anacron is going to grab a random number between 0 and 45. Say it comes up with 3 minutes. It&#39;ll take that 3 and add it to the 5 minutes specified in the delay minutes and wait 8 minutes before running this job.</p><p>This is to prevent the system from getting overrun with backed up jobs when it comes online. When the system powers on, users want to start logging in and working. They would be irritated if the system had 153 jobs queued up waiting to run as they power the system on. By adding a random delay, we give the system time to power on and cycle through regular daily activities.</p><p>We can add the RANDOM_DELAY variable to our anacrontab file to change the number range. Let&#39;s enter RANDOM_DELAY=15 to shorten the random delay range to 15 minutes.</p><p>Cooperation Between anacron and cron 03:31-03:49 We see that anacron is working with cron to verify that daily, weekly, and monthly cron jobs are run. Anacron will run the cron scripts in the daily, weekly, and monthly cron directories. The cron daemon runs the scripts in the hourly directory. As you can see, cron and anacron work together to schedule system jobs.</p><p>Summary 03:49-04:06 And that wraps up this demo. In this demonstration, we talked the role and function of anacron, took a look at the anacrontab file, and discussed how anacron and cron work together to run jobs on the specified schedule.</p><h2 id="_10-3-9-anacron-facts" tabindex="-1"><a class="header-anchor" href="#_10-3-9-anacron-facts"><span>10.3.9 anacron Facts</span></a></h2><p>Some distributions use anacron with cron to automate the running of tasks. The two services function in much the same way.</p><p>This lesson covers the following topics:</p><ul><li>Differences between cron and anacron</li><li>anacron fields</li></ul><h3 id="differences-between-cron-and-anacron" tabindex="-1"><a class="header-anchor" href="#differences-between-cron-and-anacron"><span>Differences Between cron and anacron</span></a></h3><p>The differences between cron and anacron are:</p><ul><li>The cron daemon assumes that the Linux operating system will remain up and running 24 hours a day, seven days a week. If a system is not powered on when a scheduled cron job should run, it is skipped.</li><li>The anacron service compensates for times when the system is powered off. If a job is scheduled in anacron while the system is powered off, the missed job will automatically run when the system comes back up.</li></ul><h3 id="anacron-fields" tabindex="-1"><a class="header-anchor" href="#anacron-fields"><span>anacron Fields</span></a></h3><p>The anacron daemon uses the /etc/anacrontab file. This file uses the following fields:</p><table><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td>Period</td><td> The period field specifies the recurrence interval in days. For example: <ul><li>1 means the task recurs daily.</li><li>7 means the task recurs weekly.</li><li>30 means the task recurs every 30 days.</li><li>@monthly means the task recurs once per calendar month.</li></ul></td></tr><tr><td>Delay</td><td> The delay field specifies the time (in minutes) that the anacron daemon should wait before executing a missed job after the system starts back up. </td></tr><tr><td>Job-identifier</td><td> The job-identifier field specifies a name that will be used for the job&#39;s timestamp file. The identifier must be unique for each anacron job. The timestamp file is created in the /var/spool/anacron directory and contains a single line with a timestamp that indicates the last time the particular job was run. </td></tr><tr><td>Command</td><td> The command field specifies the command or script that should be run. </td></tr></tbody></table><p>In the following example, anacron is configured to run the /usr/bin/dbcleanup command once a day:</p><p><code>1 30 dbcleanup.log /usr/bin/dbcleanup</code></p><p>If the system is down when the anacron job is supposed to run, the command will be automatically executed approximately 30 minutes after the system comes back up. The anacron daemon adds a random number of minutes to the value specified in the delay field of each entry in the anacrontab file. The actual number of minutes added is constrained by the RANDOM_DELAY setting within the /etc/anacrontab file. By default, this setting is set to a value of 45, which allows the anacron daemon to add a random number of minutes between 0 and 45 to the delay time for each entry in the anacrontab file.</p>',31)]))}const c=a(r,[["render",h],["__file","03.html.vue"]]),u=JSON.parse('{"path":"/10/03.html","title":"Section 10.3 Task Management","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 10.3 Task Management","description":"some description"},"headers":[{"level":2,"title":"10.3.1 at Task Scheduling","slug":"_10-3-1-at-task-scheduling","link":"#_10-3-1-at-task-scheduling","children":[]},{"level":2,"title":"10.3.2 Scheduling Tasks with at","slug":"_10-3-2-scheduling-tasks-with-at","link":"#_10-3-2-scheduling-tasks-with-at","children":[]},{"level":2,"title":"10.3.3 at Command Facts","slug":"_10-3-3-at-command-facts","link":"#_10-3-3-at-command-facts","children":[{"level":3,"title":"at","slug":"at","link":"#at","children":[]},{"level":3,"title":"About the at Daemon","slug":"about-the-at-daemon","link":"#about-the-at-daemon","children":[]},{"level":3,"title":"at","slug":"at-1","link":"#at-1","children":[]}]},{"level":2,"title":"10.3.4 cron Task Scheduling Part 1","slug":"_10-3-4-cron-task-scheduling-part-1","link":"#_10-3-4-cron-task-scheduling-part-1","children":[]},{"level":2,"title":"10.3.5 cron Task Scheduling Part 2","slug":"_10-3-5-cron-task-scheduling-part-2","link":"#_10-3-5-cron-task-scheduling-part-2","children":[]},{"level":2,"title":"10.3.6 Scheduling Tasks with cron","slug":"_10-3-6-scheduling-tasks-with-cron","link":"#_10-3-6-scheduling-tasks-with-cron","children":[]},{"level":2,"title":"10.3.7 cron Facts","slug":"_10-3-7-cron-facts","link":"#_10-3-7-cron-facts","children":[{"level":3,"title":"cron","slug":"cron","link":"#cron","children":[]},{"level":3,"title":"cron Configuration Files","slug":"cron-configuration-files","link":"#cron-configuration-files","children":[]},{"level":3,"title":"Syntax for cron Jobs","slug":"syntax-for-cron-jobs","link":"#syntax-for-cron-jobs","children":[]},{"level":3,"title":"cron Commands","slug":"cron-commands","link":"#cron-commands","children":[]}]},{"level":2,"title":"10.3.8 Using anacron","slug":"_10-3-8-using-anacron","link":"#_10-3-8-using-anacron","children":[]},{"level":2,"title":"10.3.9 anacron Facts","slug":"_10-3-9-anacron-facts","link":"#_10-3-9-anacron-facts","children":[{"level":3,"title":"Differences Between cron and anacron","slug":"differences-between-cron-and-anacron","link":"#differences-between-cron-and-anacron","children":[]},{"level":3,"title":"anacron Fields","slug":"anacron-fields","link":"#anacron-fields","children":[]}]}],"git":{"updatedTime":1736673740000},"filePathRelative":"10/03.md"}');export{c as comp,u as data};
