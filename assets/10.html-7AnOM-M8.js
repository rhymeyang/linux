import{_ as t,c as i,a as s,o}from"./app-CsWvKd9L.js";const a="/linux/images/08/mode.jpg",r={};function n(l,e){return o(),i("div",null,e[0]||(e[0]=[s('<p>As you study this section, answer the following questions:</p><ul><li>What is a file mode?</li><li>Which user accounts can change a file&#39;s mode?</li><li>What permissions does 764 represent (when identifying permissions numerically)?</li><li>What does the first dash represent in <b class="fw-bold">-rwxrw-r--</b> ?</li><li>What are the default permissions for files and directories?</li></ul><p>In this section, you will learn to:</p><ul><li>Set directory permissions</li><li>Add file permissions</li><li>Set file permissions</li><li>Enable directory browsing</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Inode</td><td>An inode is a data structure on a filesystem on Linux that stores all the information about a file except its name and its actual data. This includes such things as when it was last modified, size, data block location, permissions, and ownership.</td></tr><tr><td>Permissions</td><td>The ability to grant a user read, write, and execute for a file and directory.</td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 4.2 Manage user and group access <ul><li> Manage directory and file ownership for users and groups </li><li> Manage directory and file ownership for users and groups </li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 2.5 Given a scenario, apply the appropriate access controls <br><ul><li>File permissions</li><li>Command-line utilities</li><li style="list-style:none;display:inline;"><ul><li>chmod</li><li>ls</li><li>getfacl</li><li>setfacl</li></ul></li></ul><p> 4.4 Given a scenario, analyze and troubleshoot user access and file permissions </p><ul><li> User file access issues <br><ul><li>Permission</li></ul></li></ul></td></tr></tbody></table><h2 id="_8-10-1-permission-facts" tabindex="-1"><a class="header-anchor" href="#_8-10-1-permission-facts"><span>8.10.1 Permission Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>Inode modes</li><li>Permissions</li><li>Manage permissions</li></ul><h3 id="inode-modes" tabindex="-1"><a class="header-anchor" href="#inode-modes"><span>Inode Modes</span></a></h3><p>Every file and directory in the Linux file system has an inode (index node) that stores information about the file or directory, including when it was last modified, its size, data block location, permissions, and ownership. The portion of the inode that stores permission information is called the mode . The mode has three sections:</p><ul><li>User permissions (owner)</li><li>Group permissions (group owner)</li><li>Other permissions (everyone else on the Linux system who is not an owner or a member of the owning group)</li></ul><p>There are three types of permissions contained in the mode, each of which is described in the table below:</p><table><thead><tr><th>Permission</th><th>Letter Abbreviation</th><th>Octal Value</th><th>Allowed Actions on Files</th><th>Allowed Actions on Directories</th></tr></thead><tbody><tr><td>Read</td><td>r</td><td>4</td><td>Open and read the file</td><td> List directory contents if the Execute permission is also present </td></tr><tr><td>Write</td><td>w</td><td>2</td><td>Edit the file and save the changes</td><td> Add, delete, and rename files if the Execute permission is also present </td></tr><tr><td>Execute</td><td>x</td><td>1</td><td> Execute the file if it&#39;s a program file or a shell script (must be used in conjunction with the Read permission) </td><td>Enter the directory and access its contents</td></tr></tbody></table><h3 id="permissions" tabindex="-1"><a class="header-anchor" href="#permissions"><span>Permissions</span></a></h3><p>Permissions are identified with either the letter abbreviation (r, w, or x), or the octal value that corresponds to the permission. The following graphic depicts how permissions are referenced:</p><p><img src="'+a+'" alt="Depiction of how permissions are referenced for user, group, and other"></p><p>In the mode:</p><ul><li>A d preceding the permissions indicates that the object is a directory.</li><li>A dash (-) preceding the permissions identifies a file (the example above is for a file).</li><li>Permissions are grouped according to user, group, or other permissions.</li><li>If a given permission has not been assigned, a dash (-) takes its place in the mode.</li><li>When using numbers to represent permissions, add the numbers together within each permission group. Then string the numbers together. For example, the mode of the file in the graphic above can be represented by the number 764.</li><li>The root user has all permissions to files and directories regardless of the mode settings.</li></ul><h3 id="manage-permissions" tabindex="-1"><a class="header-anchor" href="#manage-permissions"><span>Manage Permissions</span></a></h3><p>The table below lists the most common commands for managing permissions:</p><table><thead><tr><th>Command</th><th>Function</th><th>Example</th></tr></thead><tbody><tr><td><b>ls -l</b></td><td> View a long listing of files and directories. A long listing displays the permissions assigned to files and directories (among other information). </td><td><span class="c2"><b>drwxr-xr-x</b> 22 root root 4096 Jun 19 15:01 sales</span><br> (This is a directory with 755 permissions assigned.) </td></tr><tr><td><b>chmod</b></td><td> Change the permissions for the specified file. You can use the following syntax options: <ul><li><b><i>entity</i> + <i>permission</i></b> adds a permission for a user, group, or other to a file or directory. </li><li><b><i>entity</i> - <i>permission</i></b> removes a permission for a user, group, or other from a file or directory. </li><li><b><i>entity</i> = <i>permission</i></b> sets the permission equal to the permission specified for a user, group, or other for a file or directory. </li><li><b class="c3 fw-bold"> decimal_value</b> sets the permissions for the file according to the numbers represented for each mode entity. </li><li><b>-R</b> sets permissions recursively.</li></ul></td><td><b>chmod u+x,g+x,o+x myfile</b> adds the Execute permission to the myfile file for user, group, and other. <b><br>chmod g-w,o-w myfile</b> removes the Write permission for group and other from the myfile file. <br><b>chmod u=rwx myfile</b> grants the user Read, Write, and Execute permissions for the myfile file. <br><b>chmod 711 myfile</b> grants the user Read, Write, and Execute permissions (7) while group and other both receive the Execute permission (1) for the myfile file. </td></tr><tr><td><b>getfacl <i>file</i></b></td><td> For each file, <b>getfacl</b> displays the file name, owner, group, and the access control list (ACL). If a directory has a default ACL, <b>getfacl</b> also displays the default ACL. Non-directories cannot have default ACLs. <h2>getfacl</h2><ul><li><b>-a</b> displays the file access control list.</li><li><b>-d</b> displays the default access control list.</li><li><b>-c</b> tells the command to NOT display the comment header (the first three lines of each file&#39;s output). </li><li><b>-e</b> prints all effective rights comments, even if they&#39;re identical to the rights defined by the ACL entry. </li><li><b>-E</b> tells the command to NOT print effective rights comments. </li><li><b>-s</b> skips files that only have the base ACL entries (owner, group, and others). </li><li><b>-R</b> lists the ACLs of all files and directories recursively. </li><li><b>-L</b> uses <i>logical walk</i> by following symbolic links to directories. The default behavior is to follow symbolic link arguments and to skip symbolic links encountered in subdirectories. (This is only effective in combination with <b>-R</b> .) </li><li><b>-P</b> uses <i>physical walk</i> by not following symbolic links to directories. This also skips symbolic link arguments. (This is only effective in combination with <b>-R</b> .) </li><li><b>-t</b> uses an alternative tabular output format. The ACL and the default ACL are displayed side by side. Permissions that are ineffective due to the ACL mask entry are capitalized. The entry tag names for the ACL_USER_OBJ and ACL_GROUP_OBJ entries are also displayed in capital letters, which helps in spotting those entries. </li><li><b>-p</b> tells the command to NOT strip leading slash characters (&#39;/&#39;). The default behavior is to strip leading slash characters. </li><li><b>-n</b> lists numeric user and group IDs.</li><li><b>-v</b> prints the version of <b>getfacl</b> and exits. </li></ul></td><td><b>getfacl myfile</b><p> Output: <br> # file: myfile <br> # owner: cpelfrey <br> # group: admin <br> user::rw- <br> group::r-- <br> other::r-- </p></td></tr><tr><td><b>setfacl <i>file</i></b></td><td> This utility sets access control lists (ACLs) for files and directories. <h2>setfacl</h2><ul><li><b>-m</b> modifies the ACL of a file or directory. ACL entries for this operation must include permissions. </li><li><b>-x</b> remove ACL entries. It is not an error to remove an entry which does not exist. Only ACL entries without the perms field are accepted as parameters, unless the POSIXLY_CORRECT environment variable is defined. </li><li><b>-b</b> removes all extended ACL entries. The base ACL entries of the owner, group and others are retained. </li><li><b>-k</b> removes the default ACL. If no default ACL exists, no warnings are issued. </li><li><b>-n</b> tells the command to NOT recalculate the effective rights mask. The default behavior of <b>setfacl</b> is to recalculate the ACL mask entry, unless a mask entry was explicitly given. The mask entry is set to the union of all owning group permissions and all named user and group entries. (These are exactly the entries affected by the mask entry.) </li><li><b>-d</b> tells the command that all operations apply to the default ACL. Regular ACL entries in the input set are promoted to default ACL entries. Default ACL entries in the input set are discarded. (A warning is issued if that happens.) </li><li><b>-R</b> applies operations to all files and directories recursively. This option cannot be mixed with <b>--restore</b> . </li><li><b>-L</b> uses <i>logical walk</i> by following symbolic links to directories. The default behavior is to follow symbolic link arguments and to skip symbolic links encountered in subdirectories. { This is only effective in combination with <b>-R</b> and cannot be mixed with <b>--restore</b> .) </li><li><b>-P</b> uses <i>physical walk</i> by not following symbolic links to directories. This also skips symbolic link arguments. (This is only effective in combination with <b>-R</b> and cannot be mixed with <b>--restore</b> .) </li><li><b>-v</b> prints the version of <b>setfacl</b> and exits. </li></ul></td><td><b>setfacl -m u:cplefrey:r myfile <br></b> grants the cplefry user Read access to the file named myfile. <h2>setfacl -m m::rx myfile</h2></td></tr></tbody></table><h2 id="_8-10-2-managing-file-permissions" tabindex="-1"><a class="header-anchor" href="#_8-10-2-managing-file-permissions"><span>8.10.2 Managing File Permissions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Managing Permissions 00:00-00:16 In this demonstration, we&#39;re going to discuss how to manage permissions that are assigned to files and folders on a Linux system. These permissions need to be managed very carefully to ensure that you grant the appropriate level of access to your users.</p><p>The ls Command 00:16-06:43 Let&#39;s begin by using the ls command to view the contents of my user jpatrick&#39;s /home directory. The ls command stands for list. In this directory, you can see that I have a folder called RandD. This is used to store research and development files. My jpatrick user account is a member of the RandD team, and we&#39;ll be storing files in this folder. In fact, other users will also collaborate on this RandD project, and they&#39;ll need access.</p><p>Let&#39;s begin by creating a file, a new document, within RandD, but let&#39;s do it as the root user. I&#39;ll switch to my root user account. I&#39;ll use the vi command to create a new document and add some text to it, and let&#39;s name the file design_specs.odt. This will be an Open Office word processing file. We&#39;ll just insert some regular old text in here for now. I&#39;ll save the changes and exit the editor. Let&#39;s use the ls -l command to view the contents of the home/jpatrick/RandD folder. Because we used the -l option here, we&#39;re able to view the ownership of the file that we created as well as the mode that&#39;s been assigned to that file.</p><p>Two things should stand out to you right away. First, look at the ownership of this file. Because I was logged in as root when I created that file, the owning user is root, and the owning group is the root group, not the jpatrick user. This file ownership will have an impact on the level of access that my jpatrick user has because of the mode that&#39;s been automatically assigned to this file. The first three characters in the mode describe the permissions that are assigned to the owning user—in this case, the root user. Root has read and write access to this file. The next three characters in the mode specify the permissions that are assigned to the group that owns this file—in this case, the root group. Members of the root group had read access to this file. The permissions that are assigned to all other authenticated users are specified by the last three characters in the mode. Any user who is not root and is not a member of the root group will have these permissions assigned, which is just basically read access again.</p><p>With that in mind, what level of access will my jpatrick user have to this file? Let&#39;s find out. I&#39;m going to enter exit to switch back to my jpatrick user account. Let&#39;s run a word processing application here. I&#39;m currently logged in to my graphical environment as my jpatrick user. Let&#39;s see what level of access I have to that file in this word processor as jpatrick. We want to go into RandD. Let&#39;s open up the file we just created. I&#39;m able to open the file, so I have read-level access. I can see the contents, but notice that it says read-only in the title bar. Because my jpatrick user is not the root user and because the jpatrick user is not a member of the root group, I received the permissions that are assigned to other authenticated users, which was just read. I have read-only access to the file. I can&#39;t come in here and make changes to the file and save them, then exit.</p><p>To change the file ownership, I log in to my root user, as it is the only account with access. Let&#39;s go ahead and switch into the /home/jpatrick/RandD directory. If we do an ls -l again, we can see the mode of the file that we&#39;re working with. In this scenario, we want to change both the user that owns the file and the group. If I use the tail command here to view the /etc/root file, you can see that I have the RandD group down here. My jpatrick and ksanders users are both members of the RandD group. These two users are going to need read/write access to this file as we collaborate on this new project.</p><p>What we want to do is change the owner of this file to jpatrick and change the owning group to the RandD group. We can do that with the chown command. We&#39;ll specify jpatrick as the owner and RandD as the group. The name of the file is design_specs.odt. Now we use the ls -l command, and you can see the ownership has changed. jpatrick is the user that owns the file, and the RandD group is the owning group. These permissions are the ones that are assigned to the owning group. Users who are members of the RandD group will receive read/write permissions, and all other authenticated users on the system will receive read permissions.</p><p>Let&#39;s test this out. Go back into my editor, my word processing application. As my jpatrick user, I will open the file again. Notice that the read-only text that was up here in the title bar before is now gone. I can make changes to this file without any problems. I can hit save. It does warn me that this file was created using a text editor, essentially, and so it just contains text. We want to convert it over to actual Open Office format. We&#39;ll hit save to overwrite it. Now we&#39;ve converted this file from a text file into a real word processing file. I was able to do that because the jpatrick user has read and write permissions to the file.</p><p>But this leaves us with a problem. Remember, ksanders and jpatrick are both members of the team that will be working on this project and need read/write access. Right now, ksanders doesn&#39;t have read/write access. Remember, ksanders is a member of the RandD group. And RandD, as the owning group, only has read access to the file. We can&#39;t make ksanders an owner of the file too, because only one user owns a file. If we assign ksanders the file, then jpatrick will no longer own the file and will lose access.</p><p>What we can do, however, is modify the mode to grant the write permission to the RandD group. That way, any user who is a member of RandD will receive the write permission. We can do that with the chmod command. We&#39;ll enter chmod, and then we&#39;ll specify g for group plus add and the permission that we want to add, w for write. Then we specify the name. The mode should show that the permissions assigned to the owning group have changed. Members of the owning group have write permissions as well as read permissions. Essentially, any user who is a member of the RandD group has the same permissions as the user who owns the file, which is jpatrick. We&#39;ve effectively granted ksanders the appropriate level of access to this file. Remember that any other user who logs in to the system who is not jpatrick and who is not a member of the RandD group will be assigned these permissions.</p><p>Summary 06:43-06:58 That&#39;s it for the demonstration. In this demo, we discussed using the chmod command at the Linux shell prompt to manage the permissions that are assigned to files and other ways to manage permission to files.</p><h2 id="_8-10-3-managing-directory-permissions" tabindex="-1"><a class="header-anchor" href="#_8-10-3-managing-directory-permissions"><span>8.10.3 Managing Directory Permissions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Managing Directory Permissions 00:00-04:21 In this demonstration, we&#39;re going to spend some time learning how to manage the permissions assigned to directories in the Linux file system. In a previous demonstration, I created a design_specs document, that&#39;s a proprietary document. It contains information about an upcoming project. We&#39;ve managed the permissions on this file to grant the owner and the owning group read/write access to this file so we can collaborate. It&#39;s owned by my jpatrick user, and the owning group is the RandD group because this file contains proprietary information. We&#39;ll grant no permissions to other authenticated users on the system using chmod o-r design_specs.odt. This file will need to be collaborated on between all the members of the RandD group as well as my user account. The problem is that it&#39;s in my home directory, which will make it very difficult for the other users on the system to access it. So, I want to copy this file to a shared directory somewhere else in the file system so that other members of the collaborative group can get to it relatively easily.</p><p>At this point, we need to decide where to store this file because it&#39;s in my /home directory. If we do a pwd command, you can see I&#39;m in /home/jpatrick/RandD. If this is a collaborative project with multiple users whom all have to work on these files, putting it in my /home directory isn&#39;t the right place. It&#39;d be better if we were to store it in a shared directory. We already have one in the /mnt directory. You can see that we have a folder here named shared. We can use the mkdir command to create a new subdirectory within shared and let&#39;s name it RandD. You see, we have a new folder right here named RandD. We probably want to copy the file from my /home directory into this /RandD directory in this shared folder. This is where folks know they&#39;ll need to go to find shared documents.</p><p>Let&#39;s do a cp command. We must be in the file location. I&#39;m going to add a special option to this cp command because if I were just to type cp design_specs.odt and specify that it go to the /mnt/shared/ directory, then essentially what would happen is the cp command would create a new copy of this file in this folder. Because that new file would be created by the root user who ran the cp command, the ownership and the permissions that we&#39;ve spent all this time configuring on this file will be lost. It will revert to root-only access. We&#39;d be wiping out all the work we&#39;ve already done. What we need to do is add the -p option. p stands for preserve. This&#39;ll preserve both ownership and the mode attributes of the file, so when it&#39;s created in the new directory, the mode and ownership of the original file here will be preserved on the new copy of the file.</p><p>Switch into the /mnt/shared/RandD directory. That&#39;s ls -l, and you can see that we didn&#39;t lose anything. The ownership is still the same, and the permissions are still the same, which is exactly what we want. However, we do have one other problem that we have to deal with. If we do a cd command, go up one level, and do an ls -l here, look at the mode assigned to the RandD directory we just created. We created it as the root user. Therefore, the owner is root, and the owning group is root. The owner has read/write/execute. The owning group has read/execute. All other authenticated users have read/execute.</p><p>Permissions are slightly different when dealing with a directory versus a file. If I were dealing with a directory, the r permission would allow the user to list the contents of the directory and the files within it. The w permission enables users to add or delete files from the directory. The x permission is important because it allows the user to enter that directory. Without the x, you can&#39;t even go into it. Given this mode, what can my jpatrick and ksanders do in this directory? They&#39;re not the owner and not a member of the owning group, so these permissions—those assigned to others—will be applied to jpatrick and ksanders. I&#39;ll be able to list the contents of the directory, and I&#39;ll be able to go into the directory, but I won&#39;t be allowed to add or delete files from that directory. That won&#39;t work because both users will need write access to this directory.</p><p>Modify Ownership 04:21-05:11 Like we do with file management, we use the chown to change the folder ownership. Let&#39;s change the folder owner to jpatrick and the owning group to RandD for the folder RandD.</p><p>Let&#39;s do an ls -l, and we see that jpatrick is now the owner, and the RandD group is the owning group. These permissions will be assigned to jpatrick, but we still have a problem because the ksanders user still won&#39;t have write access to this directory. Remember, ksanders is a member of RandD. The second set of permissions will be assigned to her through that group, so she&#39;ll only have read and execute. She won&#39;t be able to add or delete files from the directory. We also have another problem in that we&#39;re allowing all other authenticated users on this system to at least have a degree of access to this folder. They can come into this folder and they can view the folder contents.</p><p>Modify Access 05:11-05:48 What we want to do, is remove access to everyone not part of the RandD group. We can do that using the chmod command with o (other users), -r (read), and x (execute).</p><p>Let&#39;s do an ls -l again, and things look much better. The user has read/write/execute permissions, the group has read/write/execute, and others have no access. This&#39;ll allow jpatrick full access to the folder, and it will also allow any user who&#39;s a member of the RandD group full access to the folder. Anybody else on the system has no access at all.</p><p>Summary 05:48-06:01 That&#39;s it for this demonstration. In this demo, we looked at how you manage permissions that are assigned to directories from the shell prompt of a Linux system.</p>',49)]))}const d=t(r,[["render",n],["__file","10.html.vue"]]),c=JSON.parse('{"path":"/08/10.html","title":"Section 8.10 Permissions","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 8.10 Permissions","description":"some description"},"headers":[{"level":2,"title":"8.10.1 Permission Facts","slug":"_8-10-1-permission-facts","link":"#_8-10-1-permission-facts","children":[{"level":3,"title":"Inode Modes","slug":"inode-modes","link":"#inode-modes","children":[]},{"level":3,"title":"Permissions","slug":"permissions","link":"#permissions","children":[]},{"level":3,"title":"Manage Permissions","slug":"manage-permissions","link":"#manage-permissions","children":[]}]},{"level":2,"title":"8.10.2 Managing File Permissions","slug":"_8-10-2-managing-file-permissions","link":"#_8-10-2-managing-file-permissions","children":[]},{"level":2,"title":"8.10.3 Managing Directory Permissions","slug":"_8-10-3-managing-directory-permissions","link":"#_8-10-3-managing-directory-permissions","children":[]}],"git":{"updatedTime":1736669805000},"filePathRelative":"08/10.md"}');export{d as comp,c as data};
