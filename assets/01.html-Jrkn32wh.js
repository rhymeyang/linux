import{_ as i,c as o,a,b as e,d as s,o as r}from"./app-D-CuBheB.js";const n={};function l(d,t){return r(),o("div",null,t[0]||(t[0]=[a('<p>As you study this section, answer the following questions:</p><ul><li>Which file stores user accounts?</li><li>Which file contains the passwords for each user account?</li><li>What are the differences between standard user accounts and system user accounts?</li><li>What is the default primary group for each user?</li><li>How can you determine whether a user account is locked?</li></ul><p>In this section, you will learn to:</p><ul><li>View user account information</li><li>View group membership information</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Standard user</td><td>A user account that can log in to the system.</td></tr><tr><td>System or service user</td><td> An account that&#39;s created by default during the Linux installation and used by the system for specific roles. </td></tr><tr><td>Primary group</td><td> A group created by default on most Linux distributions when a standard user is created (also called a private group). They&#39;re used to manage access to files and directories. </td></tr><tr><td>Secondary group</td><td> A group type that manages access to files and directories, similar to a primary group. Users often belong to multiple secondary groups. </td></tr><tr><td>Shadow file</td><td> A file (such as the /etc/shadow file) that holds passwords and password expiration information for user accounts. The /etc/gshadow file holds passwords for groups. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td width="260">TestOut Linux Pro</td><td> 4.1 Manage users and groups <ul><li>Create and manage groups</li><li>Create and manage user accounts</li><li>Manage user passwords</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 2.2 Given a scenario, implement identity management <br><ul><li>Account creation and deletion</li><ul><li> Utilities <ul><li>id</li></ul></li><li>Configuration files</li><ul><li>/etc/passwd</li><li>/etc/group</li><li>/etc/shadow</li></ul></ul></ul></td></tr></tbody></table><h2 id="_7-1-1-linux-user-overview" tabindex="-1"><a class="header-anchor" href="#_7-1-1-linux-user-overview"><span>7.1.1 Linux User Overview</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Linux User Overview 00:00-00:43 Let&#39;s go over Linux users. Linux, like other operating systems, is a true multi-user OS. You can create several user accounts, each with their own configuration. With normal authentication, you have to enter your username and password to be granted access to the system. There are other authentication methods that require a smartcard or biometric device. This is possible because Linux uses Pluggable Authentication Module, or PAM, to manage authentication to the system. PAM is highly extensible and be configured with very flexible authentication options.</p><p>User Environment 00:43-01:34 Once authenticated, or logged in to the system, your user&#39;s unique system environment is created. To illustrate, the student user is logged into a Red Hat system. I&#39;ve issued the finger command to show the user&#39;s environment in part. In addition to the user&#39;s login name, you can see their home directory, which is /home/student, circled in green. Then there&#39;s the user&#39;s shell, /bin/bash. That one&#39;s circled in blue. These are not the only environment information stored with the user, and each user&#39;s information is unique. When users are created to a Linux system, they&#39;re given a unique user ID. There are instances where a user can be added with the same ID as another user, but that&#39;s rare.</p><p>User IDs (UID) 01:34-03:03 Using the id command, you&#39;ll see information about the user specified. Here, I used the id command to display information about the student user. You can see the user id, or UID, and the group id, or GID. We&#39;re only going to be looking at the UID in this lesson. You can see it circled here, showing a UID of 1000. This is what Linux uses to identify this specific user. As humans, we recognize usernames, but Linux recognizes UIDs. While this number can be assigned by the administrator, it&#39;s likely that the UID was assigned by the system. In general, the first user added is UID 1000, the second user added is assigned UID 1001, and so on.</p><p>There are instances where the administrator may decide to provide unique UIDs for a set of users, but that&#39;s the exception rather than the rule. The first user created, the root user, is general assigned a UID of 0. Keep in mind these are simple and default options. Depending on the authentication method used, this information may change. Using another authentication mechanism is beyond the scope of this lesson since there are so many variables. It&#39;d be impossible to cover them all, unfortunately.</p><p>Locally Stored User Account Information 03:03-04:03 When using PAM, all authentication information is stored in three files. The three files named passwd, shadow, and group are all stored in the /etc directory. The first, passwd contains all of the user account information. The second one, shadow, contains the password information for each user. This may seem unusual. It&#39;d make sense that the password would be kept in the passwd file. However, both the passwd and shadow contain different data about the user. The group file contains group information and is referenced in the passwd file.</p><p>Let&#39;s look at the passwd file first. Each user account on your system is represented by a single line in the file. Here you can see the student account. And, here, you see Megan Brown and George Filmore. And at the top, we have the root user.</p><p>The passwd File 04:03-06:31 Each user account within this file is composed of several different fields. Each field within the same line is separated by a colon. The first field contains the username. This is the name we, as humans, recognize as the user. The second is a legacy placeholder for the user&#39;s password. Now, it contains a simple &#39;x&#39; since the password is stored in the shadow file. We&#39;ll get into that more in a minute here.</p><p>Third is the UID. The UID stored here is the system&#39;s ID number representing the user. One note on the UID. In general, user IDs 0-499 are reserved for system use and, in many Linux distributions, the first created user account is assigned a UID of 1000. The fourth field contains the GID. The group ID is the user&#39;s primary group. Most often, it&#39;s the same as the UID. The fifth field contains the human-readable username or description. Since system daemons are also stored in the passwd, and some must have the ability to authenticate, this field is used to describe their function. Sixth contains the users home directory information. The last field contains the user&#39;s default Linux shell. In modern systems, the default is usually the Bash, or Bourne Again shell.</p><p>The default shell is a bit unique since it is used by normal users as well as system daemons. We really don&#39;t want system process to login as a normal user with interactive interface. So, instead of the default /bin/bash, system daemons are given a default shell of /sbin/nologin to prevent potential system compromise. Entries like ftpd, sshd, and ntpd are system processes and will have the /sbin/nologin specified as their default shells. Here&#39;s an example of a user within the passwd file. In this instance, we have a username of juser, a UID and GID of 1026, the username: Joe User. The home directory and shell both show defaults.</p><p>The shadow File 06:31-09:33 The shadow file works with the password file to store and maintain passwords. Both files are synchronized and any user in passwd should have a corresponding user in shadow. Each user is contained on a single line, however, often, not all fields are always filled in. The fields are described here:</p><p>The first field contains the username. This is the same username that is stored in the passwd file. The second field contains the password. This is often represented by a password hash rather than the password. If it were to contain the password itself, anyone who had system access could see a plain-text password. There are a couple of special characters here too. If the field is blank, no password is required to login. If it contains an asterisk, the account cannot login interactively. If it contains an exclamation point, the account is locked and cannot login â€“ often the case when a user account is created with a password.</p><p>Third represents the last time the password was changed. This is a number that represents the number of days since Jan 1, 1970. Not sure why it&#39;s this way, but it is. Fourth is the minimum number of days that must elapse before the password can be changed. One reason for this field is to guard against a possible system attack. Next is the maximum number of days before a user has to change his password. This is often set to 99999. However, in more secure situations, it might be set to 90 or 180 days. The sixth field is the numbers days before a password is set to expire where the user will receive a warning to change his password. Seventh sets the disabled days. Usually, this field is not populated. However, if a number is used, it represents the number of days after the password expires to disable the user account. The last field represents the numbers of days since Jan 1, 1970 when the account expires. Generally, this fields is not populated.</p><p>Let&#39;s take a look at an example. Here, juser is represented. His password is hashed and generally consists of over a hundred characters. The password was changed on Aug 23, 2019 or 18,131 days after Jan 1, 1970. There&#39;s no minimum number of days before the password can be changed. The password won&#39;t expire since 99,999 days since Jan 1, 1970 is Oct 16, 2243. The user will receive a system warning that their password will expire 7 days before the actual expire date. The disable date and expire date are both not populated.</p><p>passwd and shadow File Synchronization 09:33-10:48 It&#39;s absolutely critical that the passwd file and the shadow file stay synchronized with each other. Should they become unsynchronized, users or system services may not authenticate correctly and the Linux system could become unreliable. Usually, these files remain synchronized on a given system, however, this could become a problem should someone like the system administrator make changes to either of these files using a text editor. This is never a good idea and shouldn&#39;t be attempted on any production system. It&#39;s often done on non-critical or demo systems to show what can happen should there be a problem.</p><p>The pwck utility will examine the passwd and shadow files to verify each line in the two files to ensure they are valid. Any exceptions will be displayed on the screen or can be redirected to a report file. The pwconv utility will examine both files and remove shadow file entries for users that do not exist in passwd. Also, any users defined in passwd that are not in shadow will be added to shadow. Additional manual password configurations might be required.</p><p>Summary 10:48-11:19 That ends this lesson. We discussed Linux user accounts here. First, we learned about the PAM and the files used for standard Linux authentication. Then we discussed the requirements for the passwd file and explained each field. Then, we discussed the shadow file and the fields contained within it. Finally, we discussed what to do should the files break their synchronization.</p><h2 id="_7-1-2-linux-group-overview" tabindex="-1"><a class="header-anchor" href="#_7-1-2-linux-group-overview"><span>7.1.2 Linux Group Overview</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Linux Group Overview 00:00-00:27 Linux uses groups to organize user permission assignments. Groups are often categorized by department, with names like marketing, sales, or accounting. When a user is added to a group, they inherit the permissions granted to the group. In this lesson, we&#39;ll explore how groups are created and used on the Linux platform.</p><p>Benefits of Groups 00:27-02:19 Let&#39;s suppose there are a number of users that require read, write, and execute access to a directory on a Linux system. If there were no groups, the system administrator would be required to assign permissions to each of the users individually. Depending on the size of the organization and the number of users, this can be a very tedious task that takes a long time.</p><p>Let&#39;s use a group to simplify this situation. We&#39;ll make all these users members of a group and then assign permission to this resource to the group. Making an assignment once is a lot less effort than doing it six times for individual users. And this group helps our system become more secure because it&#39;s easy to deny permissions by users out of the group.</p><p>Groups also make Linux systems scalable. On a small system, group usage is a matter of choice. Systems with 10 users or less often forego groups since the Linux system is easy to manage. If that small network scales to a mid-size system, say 50 or more users, granting permissions to each user becomes unmanageable.</p><p>Groups organize users into categories and streamline management tasks. For example, let&#39;s suppose a company owner wants to send an email to all 100 of her staff. If she sends the email to each individual, the email will have 100 entries on the &quot;TO&quot; line. Sending the message this way is time-consuming and vulnerable to all kinds of errors, from forgetting a person to manually entering a bit of imperfect syntax that throws off the addressing. With email groups, it is easy to maintain a group of all users. Our business owner can send her email can be sent to a single email group of all staff. This makes a lot less space for human error.</p><p>/etc/group 02:19-03:55 Now, assuming that your Linux system was configured for local authentication, or PAM, there are files in the /etc directory that store user and group information. The file used to store group accounts is called group. The group file contains all of the group accounts created in a Linux system. Here, you can see a group file that contains several group accounts, including those created by the system. We have a partial group file listing that shows groups and their group IDs. The file syntax is always the same: group name, group password, and Group ID followed by the group members. Each field is separated by a colon.</p><p>The first field is the group name, Sales. The second is the password. (Notice, there&#39;s a placeholder in this field since group passwords are stored in another file.) The third field is the group ID. This is a numeric value that&#39;s associated with the group name. In most Linux systems, system-created groups are numbered between 1 and 500. User-created groups are generally numbered sequentially, beginning with 1,000. The fourth and final field contains the group members. A group usually has more than one member. The members are listed here, separated by commas. In this example, the users student,</p><p>mbrown, and gfilmore are all members of the Sales group. Often, when new users are created, a group with the same name and same ID is created, and the user is made a member of the group.</p><p>/etc/gshadow 03:55-04:43 Like the user database, the group database only contains placeholders for passwords. It also uses a shadow file to store encrypted passwords. The filename is gshadow, and it resides in the /etc directory as well. Sometimes groups have passwords for added security, but it&#39;s unusual.</p><p>So, here&#39;s the syntax of the gshadow file: First is the group name. This must match an existing group name in the group file Second is the password. This must be a hashed or encrypted password. Third is the listing of group administrators. This is a comma-separated list of users that exist in the passwd file. And fourth is the comma-separated list of group members.</p><p>Summary 04:43-05:06 And that&#39;s it for this lesson. In this video, we reviewed Linux groups. We discussed the benefits of using groups. We discussed how group accounts are stored on a Linux system. Then we discussed the roles of the group and gshadow files in the /etc directory.</p><h2 id="_7-1-3-user-and-group-file-review" tabindex="-1"><a class="header-anchor" href="#_7-1-3-user-and-group-file-review"><span>7.1.3 User and Group File Review</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>User and Group File Review 00:00-00:23 In this demonstration we&#39;re going to review Linux user and group accounts. We&#39;ll switch to the root account with the su - command. The user and group files are stored in the /etc directory. There are four key files where user and group account information are stored. We will look at passwd, group, shadow, and gshadow.</p><p>passwd File 00:23-01:47 The passwd file stores Linux user accounts, similar to a database of user accounts. Although it&#39;s named passwd, it does not store the passwords for those accounts. In earlier versions of Linux, passwords were stored here. However, as the Linux operating system evolved, passwd became more secure and is now used for managing users. Passwords are stored in the shadow file, which we&#39;ll touch on shortly.</p><p>Let&#39;s run, cat /etc/passwd. Each user account is contained on a single line. Each record is divided into fields. The fields are separated by colons within the line. The first field is the username. My username is jmace.</p><p>The second field is the password field. As we said earlier, we do not put passwords here anymore. So, an x is entered to tell the Linux kernel that we&#39;re using the shadow file for passwords.</p><p>The next field is the user ID number that&#39;s been assigned to each user account. The following field is the group ID number of the default group assigned to user accounts.</p><p>Next is the description field, which is used to store the user&#39;s full name. The following field identifies the user&#39;s /home directory. My /home directory is /home/jmace. The last field identifies which shell each user is set to use by default.</p><p>finger Command 01:47-02:22 There are many utilities that can view information about user accounts without opening the passwd file. One is the finger command. I&#39;ll enter finger and then the name of the user account that I want to get information for.</p><p>We see my username is jmace. My user&#39;s full name is Jeffrey Mace. We see the /home directory and default shell. The finger command collects the data from the passwd file. However, it also pulls information from other log files on the system.</p><p>For example, it tells whether I am currently logged in to the system --and if so, for how long.</p><p>id Command 02:22-02:38 The finger command doesn&#39;t show the user ID. To view this information, use the id command followed by the username. Here we see the user ID assigned to the account, the default group ID, and a list of all the other groups that the user is currently a member of.</p><p>group File 02:38-03:40 Linux group accounts are stored in the group file. The group file is identical to the passwd file, except that it stores group information. If passwords are assigned to a group account, they are stored in the gshadow file. Let&#39;s use the cat command to view the contents of the group file.</p><p>We begin with the group name. The second field is the password field. Passwords are not typically used with groups but can be enacted to create privileged groups. Next is the group id, or GID. The final field is the group list. This is a list of users who are members of a group. Usernames are separated by commas.</p><p>We can use the groups command to view the members of a particular group. Let&#39;s run groups jmace and see which groups jmace belongs to. We receive a list of groups that jmace is a member of.</p><p>We see a group named jmace. When a new user account is created, an associated group is created with the same name as your user account.</p><p>Shadow File 03:40-05:14 For security reasons, passwords for user accounts are not stored in the passwd file. They are stored in a file called shadow. The passwords are stored in hashed format. Each line in the file represents a user account record, and that record is divided into fields. The first field is username. The second field is the user&#39;s password. Again, this is a hashed version of the password.</p><p>The next field is the last modified field. This field displays the number of days since January 1st, 1970 that the password was last changed.</p><p>The following field is the min-days field, which displays the minimum number of days required before a password can be changed. It&#39;s set to 0, so users can change their password whenever they like.</p><p>Next, is the max-days field, displaying the maximum number of days before a password must be changed. Default is 99,999 days. This is the equivalent of never requiring a password change.</p><p>Then we have the days-warned field. This field displays the number of days prior to password expiration that the user will be warned. It&#39;s currently set to 7 days.</p><p>Following is the disabled-days field, which is the number of days to wait after a password is expired to disable the account. This is set to a null value. Accounts will not be disabled.</p><p>Finally, we have the expire field, that displays the number of days since January 1st, 1970 after which the account will be disabled. Again, it is set to a null value, indicating that the account never expires.</p><p>Standard Login and System Accounts 05:14-05:50 Most accounts with a password are called standard login user accounts. Some accounts have an asterisk, or an exclamation point instead of a hashed password. These are non-login accounts, or system user accounts. System accounts are used by the services, also known as daemons, running on a system. When one of these services needs to complete a task, it uses a system account.</p><p>System accounts have a much lower user ID number assigned to them. The sys system account has a user ID of 3. Most user IDs less than 1000 are considered system user accounts.</p><p>Gshadow File 05:50-06:20 Some distributions use an additional group file to store the group passwords, known as gshadow.</p><p>Passwords are not used by default, but you can add a password to a group. If a group has a password, when you try to add a user to that group, you&#39;ll be prompted to supply the group password.</p><p>Within the gshadow file we have the name of the group from the group file. The password field that contains a hashed version of the password, a field that specifies the group administrator account, and then the members of the group.</p><p>Summary 06:20-06:31 In this demonstration, we reviewed the various files that are used to store group and user account information on a Linux system.</p><h2 id="_7-1-4-user-and-group-facts" tabindex="-1"><a class="header-anchor" href="#_7-1-4-user-and-group-facts"><span>7.1.4 User and Group Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>User groups and types</li><li>User and group databases</li><li>Commands for managing password file entries</li></ul><h3 id="user-groups-and-types" tabindex="-1"><a class="header-anchor" href="#user-groups-and-types"><span>User Groups and Types</span></a></h3><p>User accounts control the ability to log on to a system, access resources, and perform certain actions. Groups provide a way to group users together for administrative purposes, such as assigning permissions to files.</p><p>Be aware of the following types of users and groups:</p>',74),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Type"),e("th",null,"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"Standard user"),e("td",null,[s(" Standard user accounts can log in to the system. Standard user accounts: "),e("ul",null,[e("li",null," Generally have easy-to-remember usernames (such as Mary or bkaun). An administrator must create the usernames. "),e("li",null," Have an ID of 500 or more (on some distributions) or 1,000 or more (on other distributions). The ID is automatically assigned by the system when the account is created. ")])])]),e("tr",null,[e("td",null,"System or service accounts"),e("td",null,[s(" System user accounts (also called service user accounts) are created by default during the Linux installation and are used by the system for specific roles. "),e("p",null,"System user accounts:"),e("ul",null,[e("li",null," Have names that correspond with their roles, such as ftp and mail. "),e("li",null,"Can't be used to log in to the system."),e("li",null," Have an ID of 500 or less (on some distributions) or 1,000 or less (on other distributions). The ID is automatically assigned by the system when the account is created. ")]),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",null,[e("span",null," The root user account is created by default and has a UID of 0. However, the root user account can be used to log in to the system and perform tasks.")])])])])])]),e("tr",null,[e("td",null,"Primary group"),e("td",null,[s(" Primary groups (also called the private group) are created by default on most Linux distributions when a standard user is created. These accounts help manage access to files and directories. Primary groups: "),e("ul",null,[e("li",null,"Have the corresponding user as the only member."),e("li",null," Are automatically assigned as the owner of files and directories when they are created in the file system. "),e("li",null," Are similar to any other group (the only difference is that the group is identified as the primary group in the user account's configuration). ")])])]),e("tr",null,[e("td",null,"Secondary group"),e("td",null,[s(" Secondary groups are also used to manage access to files and directories. Secondary groups: "),e("ul",null,[e("li",null," Are not automatically assigned user accounts as members. "),e("li",null," Receive their membership as assigned by the system administrator. ")])])])])],-1),a('<h3 id="user-and-group-databases" tabindex="-1"><a class="header-anchor" href="#user-and-group-databases"><span>User and Group Databases</span></a></h3><p>The following table explains the files where user and group databases are stored.</p><table><thead><tr><th>File</th><th>Description</th></tr></thead><tbody><tr><td>/etc/passwd</td><td> The /etc/passwd file holds user account information. Be aware of the following details: <ul><li>Each entry identifies a user account.</li><li> Each entry contains multiple fields, with each field separated by a colon. </li></ul><p> The following line is a sample entry in the /etc/passwd file: </p><blockquote> pclark:x:501:501:Petunia Clark:/home/pclark:/bin/bash </blockquote><p>The fields within this line are as follows:</p><ul><li>User account name</li><li> Password (an &quot;x&quot; in the field indicates that passwords are stored in the /etc/shadow file) </li><li>User ID number</li><li>Primary group ID number (also known as the GID)</li><li> Description field (this field is typically used for the user&#39;s full name) </li><li>Path to the home directory</li><li>Path to the default shell</li></ul></td></tr><tr><td>/etc/shadow</td><td> The /etc/shadow file holds password hashes and password expiration information for user accounts. Be aware of the following details: <ul><li> Using the /etc/shadow file to separate usernames from password hashes increases the security of the user passwords. </li><li> Like the /etc/passwd file, each entry corresponds to a user account and each entry contains multiple fields, with each field separated by a colon. </li></ul><p> The following line is a sample entry in the /etc/shadow file: </p><blockquote>pclark:$ab7Y56gu9bs:12567:0:99999:7:::</blockquote><p>The fields within this line are as follows:</p><ul><li>User account name</li><li> Password hash <ul><li> A $ preceding the password identifies the password as an encrypted entry </li><li> A ! or !! indicates that the account is locked and can&#39;t be used to log in </li><li> A * indicates a system account entry and can&#39;t be used to log in </li></ul></li><li> Last change (the date of the most recent password change measured in the number of days since January 1, 1970) </li><li> Minimum password age (the minimum number of days the user must wait before changing the password) </li><li> Maximum password age (the maximum number of days between password changes) </li><li> Password change warning (the number of days a user is warned before the password must be changed) </li><li> Grace logins (the number of days the user can log in without changing the password) </li><li> Disable time (the number of days since January 1, 1970, after which the account will be disabled) </li></ul></td></tr><tr><td>/etc/group</td><td> The /etc/group file holds group information including the group name, GID, and group membership information. Be aware of the following details: <ul><li>Each entry identifies a group.</li><li> Each entry contains multiple fields, with each field separated by a colon. </li></ul><p> The following line is a sample entry in the /etc/group file: </p><blockquote>sales:x:510:pclark,mmckay,hsamson</blockquote><p>The fields within this line are as follows:</p><ul><li>Group name</li><li> Group password (an x indicates the group passwords are contained in the /etc/gshadow file) </li><li>Group ID</li><li> Group members (contains a comma-separated list of user accounts that are members of the group) </li></ul></td></tr><tr><td>/etc/gshadow</td><td> The /etc/gshadow file holds password hashes for groups. Be aware of the following details: <ul><li> Like the /etc/group file, each line corresponds to a group. </li><li>Each line consists of fields separated by colons.</li></ul><p> The following line is a sample entry in the /etc/gshadow file: </p><blockquote>sales:!:pclark:pclark,mmckay,hsamson</blockquote><p>The fields within this line are as follows:</p><ul><li>Group name</li><li> Group password (the group password allows users to add themselves as members of the account) <ul><li> If the field contains a single exclamation point (!), the group account can&#39;t be accessed with the password </li><li> If the field contains a double exclamation point (!!), no password has been assigned to the group account (and it can&#39;t be accessed with the password) </li><li> If there is no value, only group members can log in to the group account </li></ul></li><li> Administrators (contains a comma-separated list of users who have authorization to administer the account) </li><li> Group members (contains a comma-separated list of user accounts that are members of the group) </li></ul></td></tr></tbody></table><h3 id="commands-for-managing-password-file-entries" tabindex="-1"><a class="header-anchor" href="#commands-for-managing-password-file-entries"><span>Commands for Managing Password File Entries</span></a></h3><p>Additional commands for managing file entries include the following:</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><b>pwck</b></td><td> Verifies the entries in the /etc/passwd and /etc/shadow files to ensure that they have the proper format and contain valid data. Errors are displayed on the screen, and entries may be deleted to solve the errors. <p>For example, checks are made to verify that each entry has:</p><ul><li>The correct number of fields</li><li>A unique and valid user name</li><li>A valid user and group identifier</li><li>A valid primary group</li><li>A valid home directory</li><li>A valid login shell</li></ul></td></tr><tr><td><b>pwconv</b></td><td> The <b>pwconv</b> command is used to move passwords from the less-secure /etc/passwd file to the more secure /etc/shadow file. You can do the opposite action with the <b>pwunconv</b> command. Doing this also removes the shadow file. Today, however, virtually all Linux distributions ship with shadow files enabled by default. <p>The synchronization process is as follows:</p><ul><li> The entries in the shadowed file that do not exist in the <i>passwd</i> file are removed. </li><li> The shadowed entries that don&#39;t have &quot;x&quot; as the password in the <i>passwd</i> file are updated. </li><li>Any missing shadowed entries are added.</li><li> Passwords found in the <i>passwd</i> file are replaced with &quot;x&quot;. </li></ul></td></tr></tbody></table>',6)]))}const u=i(n,[["render",l],["__file","01.html.vue"]]),c=JSON.parse('{"path":"/07/01.html","title":"Section 7.1 User and Group Overview","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 7.1 User and Group Overview","description":"some description"},"headers":[{"level":2,"title":"7.1.1 Linux User Overview","slug":"_7-1-1-linux-user-overview","link":"#_7-1-1-linux-user-overview","children":[]},{"level":2,"title":"7.1.2 Linux Group Overview","slug":"_7-1-2-linux-group-overview","link":"#_7-1-2-linux-group-overview","children":[]},{"level":2,"title":"7.1.3 User and Group File Review","slug":"_7-1-3-user-and-group-file-review","link":"#_7-1-3-user-and-group-file-review","children":[]},{"level":2,"title":"7.1.4 User and Group Facts","slug":"_7-1-4-user-and-group-facts","link":"#_7-1-4-user-and-group-facts","children":[{"level":3,"title":"User Groups and Types","slug":"user-groups-and-types","link":"#user-groups-and-types","children":[]},{"level":3,"title":"User and Group Databases","slug":"user-and-group-databases","link":"#user-and-group-databases","children":[]},{"level":3,"title":"Commands for Managing Password File Entries","slug":"commands-for-managing-password-file-entries","link":"#commands-for-managing-password-file-entries","children":[]}]}],"git":{"updatedTime":1736661551000},"filePathRelative":"07/01.md"}');export{u as comp,c as data};
