import{_ as a,c as i,a as t,o as r}from"./app-DQZVun5U.js";const s={};function o(l,e){return r(),i("div",null,e[0]||(e[0]=[t('<p>As you study this section, answer the following questions:</p><ul><li>What is the purpose of a shared library?</li><li>What is the difference between a dynamic shared library and a static shared library?</li><li>What does it mean if a library file name contains <b>.so</b> ?</li><li>Which command would you use to identify library dependencies?</li><li>What are the management complications for shared libraries?</li><li>Which file contains a cached list of dynamic shared libraries?</li><li>What are the methods for configuring additional dynamic libraries on a Linux system?</li></ul><p>In this section, you will learn to:</p><ul><li>Manage shared libraries</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Shared library</td><td>A library of routines that can be used by other applications.</td></tr><tr><td>Dynamic library</td><td>A shared library that is not directly integrated into the code of a software application.</td></tr><tr><td>Static library</td><td>A shared library, usually installed with an application, that is integrated into the code of a software application.</td></tr><tr><td>Locally compiled software</td><td>Software that is compiled from downloaded or custom source code.</td></tr><tr><td>Local repository</td><td>A local storage location that contains software packages for a Linux distribution.</td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>CompTIA Linux+ XK0-005</td><td>1.1 Summarize Linux fundamentals <br><ul><li>Basic package compilation from source</li><li style="list-style:none;display:inline;"><ul><li>./configure</li><li>make</li><li>make install</li></ul></li></ul> 1.5 Remote networking tools <ul><li>cURL</li><li>wget</li><li>rsync</li></ul><p></p></td></tr></tbody></table><h2 id="_6-4-1-shared-libraries" tabindex="-1"><a class="header-anchor" href="#_6-4-1-shared-libraries"><span>6.4.1 Shared Libraries</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Shared Libraries 00:00-00:12 Linux applications can share code elements—also known as shared libraries. In this lesson, we&#39;re going to discuss these shared libraries.</p><p>Shared Library Benefits 00:12-00:44 Shared elements are useful because software developers don&#39;t need to rewrite the same code when they write a new program, and there are many functions that we commonly see used across applications. The process is basically the same whether you&#39;re running a word processor, spreadsheet, or image editor. Instead of writing code for every task in an application, developers link their code to a pre-written shared library. This way, they can spend more time on coding the app&#39;s unique elements. At very least, libraries help speed up development and keep the program leaner.</p><p>Dynamic Shared Libraries 00:44-01:25 There are two different types of Linux shared libraries—static and dynamic. Dynamic shared libraries exist as files in the Linux system itself.</p><p>In this example, we have Shared Library 1 and Shared Library 2. When a programmer starts writing their code, they insert links to the functions within these shared libraries. In this case here, there&#39;s two functions. We&#39;ll call them &quot;write to disk&quot; and &quot;read from disk&quot;. When the program runs, the two functions are simply called from within these two dynamic shared libraries. Now, for this to work, we have to have a configuration file on the system that contains a list of all the installed dynamic shared library files and where they&#39;re stored.</p><p>Static Shared Libraries 01:25-02:19 Okay, let&#39;s move on. The second shared library type—static shared libraries—are linked to the application when it&#39;s compiled.</p><p>Unlike dynamic libraries, we integrate the function directly into the application itself so that it isn&#39;t dependent on that library being available in the Linux file system. Static libraries are often used for recovery applications that are designed to help rescue a malfunctioning system. That&#39;s because a dynamic shared library might not be accessible if you&#39;re in need of system recovery. One example is the stand-alone shell, or sash, which is an application designed to help you rescue a Linux system that&#39;s encountered serious problems. Because it has built-in functions, if the shared library partition is inaccessible, the program can run regardless. Using a static shared library results in larger file sizes, but the applications will be independent.</p><p>Shared Library Names and Commands 02:19-03:18 Shared library files use a naming format to help you identify what kind of shared library it is.</p><p>The syntax is shown here. It always starts with &quot;lib&quot; followed by the name of the shared library and its type—either an &quot;so&quot; for dynamic or an &quot;a&quot; for static. The last part is the version number. Linux uses a special configuration file named /etc/ld.so.conf to tell the applications where they can find the dynamic shared library files that they depend on.</p><p>This means that developers don&#39;t need to worry about where the dynamic shared libraries are stored. But if you do want to view a list of them, you can use the idconfig command. To see a list of the shared libraries that are required by a particular application, you use the LDD command instead. You can also use the LDD command to check for shared library dependencies. This lets you know whether all the libraries needed for an application have already been installed.</p><p>Summary 03:18-03:38 And that&#39;s it for this lesson. In this lesson, we discussed what a shared library is and what its benefits are. We discussed two different types of shared libraries—dynamic and static. And we ended this lesson by going over some shared library file names and commands.</p><h2 id="_6-4-2-managing-shared-libraries" tabindex="-1"><a class="header-anchor" href="#_6-4-2-managing-shared-libraries"><span>6.4.2 Managing Shared Libraries</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Manage Shared Libraries 00:00-00:14 In this demonstration, we&#39;re going to look at managing shared libraries. We&#39;re going to find which shared libraries are required by a particular service running on this Linux system.</p><p>Use ldd to Identify Required Shared Libraries 00:14-01:08 Let&#39;s look at libraries required for the ssh daemon to run. First, we&#39;ll find where the executable for the ssh daemon resides in the file system. We do this with the which sshd command. sshd is short for ssh daemon. We see that the sshd executable, which is run to execute the sshd service, is located in the /usr/sbin directory.</p><p>Now that we know where the executable is, we need to determine which shared libraries are required by this executable for it to run. This executable doesn&#39;t have all the software, or coding, necessary for it to run. It&#39;s relying upon code that&#39;s going to be borrowed from shared libraries. Basically, if those shared libraries aren&#39;t there, the service can&#39;t run. To find out which shared libraries are actually required by this executable, we enter ldd /sbin/sshd.</p><p>Identify and Install Missing Shared Libraries 01:08-02:39 We&#39;re given a list of the different shared libraries along with their locations. These are required for this executable to run and for sshd to be enabled on the system. We&#39;re going to deliberately corrupt one of these shared files. We won&#39;t damage it, though, don&#39;t worry. Let&#39;s just rename it so the shared library isn&#39;t available. This is going to cause problems for sshd because one of the shared libraries it relies upon is unavailable.</p><p>Okay, let&#39;s use the move command. Type sudo mv /lib/x86_64-linux-gnu/libgcrypt.so.20 We&#39;re going to add .old to the end of the filename.</p><p>Now that we&#39;ve changed the filename, let&#39;s run the ldd command again for sshd. We&#39;re told that sshd requires the libgcrypt.so.20 file, but it isn&#39;t found. We&#39;ll have problems if we try to restart or run sshd on this system now. The ldd command can be a really useful tool for troubleshooting issues with shared libraries. If there&#39;s an application or a daemon that won&#39;t run, it reports those missing files. You can use the ldd command to find which libraries are missing and locate the appropriate software packages that contain the shared libraries.</p><p>Let&#39;s rename the .old file back to its original filename. We run the ldd command again, and everything checks out. All the shared library files needed for sshd to run are available.</p><p>Summary 02:39-03:01 That&#39;s it for this demo. In this demonstration, we reviewed managing shared libraries. We talked about using ldd to identify which shared libraries are required for a particular executable to run, and we talked about the process for identifying missing shared libraries and installing them.</p><h2 id="_6-4-3-shared-libraries-facts" tabindex="-1"><a class="header-anchor" href="#_6-4-3-shared-libraries-facts"><span>6.4.3 Shared Libraries Facts</span></a></h2><p>The importance of shared libraries is best understood in the context of software installations.</p><p>This lesson covers the following topics:</p><ul><li>Software repositories and package managers</li><li>Local repositories</li><li>Install locally compiled software</li><li>Shared libraries</li><li>Potential shared library complications</li><li>Library management commands</li></ul><h3 id="software-repositories-and-package-managers" tabindex="-1"><a class="header-anchor" href="#software-repositories-and-package-managers"><span>Software Repositories and Package Managers</span></a></h3><p>Installing software on a Linux system usually involves software repositories, software packages, and package managers. Linux distributions are similar in that all of them originate from open-source software. However, each distribution compiles its own set of software applications and libraries. A Linux application compiled for one distribution will likely not run on another. So, each distribution hosts their own software repository.</p><p>A Linux software repository is a location (usually on the internet) that contains software packages.</p><ul><li>A distribution may maintain a repository in multiple locations. <ul><li>Each location contains exact copies of packages on other locations.</li><li>An alternate location can be used if a chosen location is busy.</li></ul></li><li>Each package in the repository contains software that&#39;s been compiled for the specific Linux distribution.</li><li>A software package may contain a library whose routines can be called by software applications.</li><li>Most software packages will be one of two types: <ul><li>Debian packages, which have the *.deb extension and are used by Debian and Ubuntu distributions.</li><li>RPM packages, which have the *.rpm extension and are used by Red Hat, Fedora, and other distributions.</li></ul></li><li>Software packages may be compressed and given the extension of *.tar, *.tgz, or *.gz.</li></ul><p>A package manager is a software utility that downloads and installs software packages from a software repository.</p><ul><li>The package manager checks version numbers for compatibility.</li><li>Package managers like Red Hat Package Manager (rpm) and Debian Package (dpkg) install downloaded packages without checking for dependencies.</li><li>Package managers like Yellowdog Updater Modified (YUM) and Advanced Package Tool (APT) check for package dependencies. They then download and install all interrelated packages.</li></ul><h3 id="local-repositories" tabindex="-1"><a class="header-anchor" href="#local-repositories"><span>Local Repositories</span></a></h3><p>You can configure a package manager to access packages from a local repository. Packages are more quickly and easily transferred from a local repository than from an internet repository. To create and configure a local repository:</p><ul><li>Create a directory that can be accessed by your Linux systems.</li><li>Populated the directory by pulling packages from an online repository using the <b>rsync</b> , <b>wget</b> , or <b>curl</b> utility.</li><li>Add the local repository to the package manager&#39;s list of repositories.</li></ul><h3 id="install-locally-compiled-software" tabindex="-1"><a class="header-anchor" href="#install-locally-compiled-software"><span>Install Locally Compiled Software</span></a></h3><p>Some Linux software may not have a compiled package for your Linux distribution, but may offer the source code. In these cases, you can download and compile the software as an executable. The executable can then be installed so that your Linux system will know how to run it. The basic steps for installing this software are:</p><ul><li>Download the source code.</li><li>Compile and build the source code. <ul><li>The <b>./configure</b> script checks the system configuration, including hardware and software availability. The script typically outputs the Makefile, which is used by the <b>make</b> command to build software.</li><li>The <b>gcc</b> compiler is often used to create an executable.</li><li>The <b>make</b> utility can automatically determine which pieces of a large program need to be compiled or re-compiled.</li></ul></li><li>Use the <b>make install</b> utility to install the software by copying the built program along with its libraries and documentation to the correct locations.</li></ul><h3 id="shared-libraries" tabindex="-1"><a class="header-anchor" href="#shared-libraries"><span>Shared Libraries</span></a></h3><p>Shared libraries are precompiled code elements that are loaded into memory and can be reused by many different programs running on the same system. This allows the size of each individual program to be relatively small, as it can use a shared library code when necessary. In addition, shared libraries make updates easier. Instead of updating all applications when a change needs to be made, you only need to update the appropriate shared library. Updating the shared libraries allows each applicable program to immediately take advantage of the update.</p><p>There a two types of shared libraries:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Dynamic</td><td><i>Dynamic libraries</i> aren&#39;t directly integrated into the code of the application that uses them. Dynamic libraries: <ul><li>Are linked to the application that shares its code.</li><li> Have a .so or .so. <i>version</i> extension (.so stands for shared object). </li><li>Are typically stored in /usr/lib/ and /usr/local/lib/.</li><li> Can degrade program load time if the library is already in use by another program. </li><li> Are similar to Dynamic Link Libraries (DLLs) in Windows. </li></ul><p> Be aware of the following management programs and files for dynamic libraries: </p><ul><li><b>/lib/ld.so</b> is a program that finds and loads the needed shared libraries. It also prepares the program to run and executes it. </li><li><b>/etc/ld.so.conf</b> is a file that contains a list of directories to search for shared libraries. Some lines in the file begin with the <i>include</i> directive, which lists files that are to be included as if they were part of the main file. </li><li><b>/etc/ld.so.cache</b> is a cached list of libraries found in the directories specified in <b>/etc/ld.so.conf</b> . The system uses this cached list instead of loading <b>/etc/ld.so.conf</b> every time a program runs. </li></ul><p> Use the following methods to configure dynamic libraries on a Linux system: </p><ul><li>Modify <b>/etc/ld.so.conf</b> to add the library paths.</li><li> Use the <b>LD_LIBRARY_PATH</b> environment variable to specify additional directories to search for library files. </li></ul></td></tr><tr><td>Static</td><td><i>Static libraries</i> are integrated into the code of an application itself when that code is compiled. Static libraries: <ul><li>Have an <b>.a</b> filename extension.</li><li>Are used when dynamic libraries are not available.</li><li>Increase the size of the application.</li><li> Eliminate dependency issues associated with dynamic libraries. </li></ul></td></tr></tbody></table><h3 id="potential-shared-library-complications" tabindex="-1"><a class="header-anchor" href="#potential-shared-library-complications"><span>Potential Shared Library Complications</span></a></h3><p>Using shared libraries can create the following software management complications:</p><ul><li>Changes to the shared library could potentially be incompatible with some of the programs that use the library.</li><li>Programs may not be able to locate the shared library.</li><li>A shared library can become inaccessible if it is overwritten or updated. For instance, problems may occur if two different packages that include the same shared library are installed.</li></ul><h3 id="library-management-commands" tabindex="-1"><a class="header-anchor" href="#library-management-commands"><span>Library Management Commands</span></a></h3><p>Be aware of the following library management commands:</p><table><thead><tr><th>Command</th><th>Function</th></tr></thead><tbody><tr><td><b>ldd</b></td><td><p> Discovers which libraries are used by another library (e.g., library dependencies). </p><ul><li> Check the complete dependency chain when using <b>ldd</b> to track down problems. </li><li>Run <b>ldd</b> as root (recommended).</li></ul><p>Be aware of the following options:</p><ul><li><b>-v</b> displays all information.</li><li><b>-u</b> displays unused direct dependencies.</li><li><b>--version</b> displays the version number of <b>ldd</b> . </li></ul></td></tr><tr><td><b>ldconfig</b></td><td> Reloads the library cache every time libraries are added or removed and updates the symbolic links. This creates the necessary links and cache for the most recently shared libraries found in the directories specified on the command line. These are found in the <b>/etc/ld.so.conf</b> file and in the trusted directories ( <b>/lib</b> and <b>/usr/lib</b> ). Be aware of the following options: <ul><li><b>-v</b> summarizes the directories and files it registers as it reloads the cache. </li><li><b>-N</b> updates symbolic links, but does not update the cache. </li><li><b>-n</b> updates the links contained in the directories specified on the command line. </li><li><b>-X</b> updates the cache but does not update symbolic links. </li><li><b>-f</b> changes the configuration file from the <b>/etc/ld.so.conf</b> default. </li><li><b>-C</b> changes the cache location from the <b>/etc/ld.so.cache</b> default. </li><li><b>-r</b> treats a new directory as if it were the root directory. This is helpful when you&#39;re recovering a badly corrupted system or installing a new OS. </li><li><b>-p</b> displays the current library cache, including all the library directories and their respective libraries. </li></ul></td></tr></tbody></table>',56)]))}const d=a(s,[["render",o],["__file","04.html.vue"]]),h=JSON.parse('{"path":"/06/04.html","title":"Section 6.4 Shared Libraries","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 6.4 Shared Libraries","description":"some description"},"headers":[{"level":2,"title":"6.4.1 Shared Libraries","slug":"_6-4-1-shared-libraries","link":"#_6-4-1-shared-libraries","children":[]},{"level":2,"title":"6.4.2 Managing Shared Libraries","slug":"_6-4-2-managing-shared-libraries","link":"#_6-4-2-managing-shared-libraries","children":[]},{"level":2,"title":"6.4.3 Shared Libraries Facts","slug":"_6-4-3-shared-libraries-facts","link":"#_6-4-3-shared-libraries-facts","children":[{"level":3,"title":"Software Repositories and Package Managers","slug":"software-repositories-and-package-managers","link":"#software-repositories-and-package-managers","children":[]},{"level":3,"title":"Local Repositories","slug":"local-repositories","link":"#local-repositories","children":[]},{"level":3,"title":"Install Locally Compiled Software","slug":"install-locally-compiled-software","link":"#install-locally-compiled-software","children":[]},{"level":3,"title":"Shared Libraries","slug":"shared-libraries","link":"#shared-libraries","children":[]},{"level":3,"title":"Potential Shared Library Complications","slug":"potential-shared-library-complications","link":"#potential-shared-library-complications","children":[]},{"level":3,"title":"Library Management Commands","slug":"library-management-commands","link":"#library-management-commands","children":[]}]}],"git":{"updatedTime":1736661551000},"filePathRelative":"06/04.md"}');export{d as comp,h as data};
