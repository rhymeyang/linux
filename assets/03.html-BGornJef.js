import{_ as i,c as s,a as n,b as e,d as t,o as a}from"./app-D-CuBheB.js";const r={};function l(h,o){return a(),s("div",null,o[0]||(o[0]=[n('<p>As you study this section, answer the following questions:</p><ul><li>What constructs are used for branching in a bash script?</li><li>What is the difference between the if/then/elif/fi construct and the case/esac construct?</li><li>What constructs are used for looping in a bash script?</li><li>What is the difference between the while, until, and for constructs?</li><li>How are exit codes used?</li></ul><p>In this lesson, you will learn to:</p><ul><li>Use looping</li><li>Use exit codes</li><li>Use branching</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Branching</td><td> The logic in a bash script that performs different actions based on a specific condition or user input. </td></tr><tr><td>Looping</td><td> The logic in a bash script that repeatedly runs a set of commands according to a specific set of conditions. </td></tr><tr><td>Exit code</td><td> A value that is set when a bash command or script is executed. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>CompTIA Linux+ XK0-005</td><td> 3.1 Given a scenario, create simple shell scripts to automate common tasks <br><ul><li>Shell script elements</li><ul><li>Loops</li><ul><li>while</li><li>for</li><li>until</li></ul><li>Conditionals</li><ul><li>if</li><li>switch/case</li></ul><li> Standard stream redirection <ul><li>||</li><li>&amp;&amp;</li></ul></li><li>Exit codes</li></ul></ul></td></tr></tbody></table><h2 id="_14-3-1-bash-scripting-logic" tabindex="-1"><a class="header-anchor" href="#_14-3-1-bash-scripting-logic"><span>14.3.1 Bash Scripting Logic</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Bash Scripting Logic 00:00-00:32 Let&#39;s talk about using control structures within shell scripts. A basic shell script typically executes straight through, from the beginning to the end. This may work fine in some situations. But suppose we needed the script to make decisions based on user input or the output from a command. This can be done by implementing control structures within the script. There are several different types of control structures that we can use, and each one functions in a slightly different way. We&#39;re going to look at if-then-else, case, and looping structures that you can use within a script.</p><p>The if/then/else/fi Construct 00:32-01:16 Let&#39;s begin by looking at the if-then-else structure. Using an if-then-else structure within your shell script gives your script the ability to execute different commands based on whether a particular condition is true or false. The structure is shown here. We enter &#39;if&#39; followed by a condition. The if part of the structure tells the shell to determine whether or not this condition, right here, evaluates to true or if it evaluates to false. If the condition evaluates to true, then this set of commands will run. If the condition evaluates to false, we execute the commands that fall under &quot;else.&quot; This kind of structure can be useful in situations where we need to branch based on user input.</p><p>When you&#39;re done with the if-then-else statement in the script, you&#39;ll end it by spelling if backward, &#39;fi&#39;.</p><p>Input Validation 01:16-02:51 This kind of structure can be useful in situations where we need to branch based on a user&#39;s input. It&#39;s also useful in situations where we need to validate the input that the end user has entered from the read prompt. Input validation means we want to check and see whether the user entered a valid value at the prompt or whether they entered something that&#39;s either incorrect or doesn&#39;t match what we&#39;re looking for.</p><p>For example, let&#39;s suppose we&#39;ve created a script, and the script will ask the end user to enter the name of a directory that he or she wants to add to the end of the PATH environment variable. When we add the directory to the PATH, it would be a good idea to run a quick test and just verify that the directory that the end user entered exists in the file system. If it does, then we should go ahead and add it to the PATH environment variable. If it doesn&#39;t exist, we should post an error message on the screen, telling the user that the directory can&#39;t be found. This is what this structure here does. In this example, we have our condition right here. This condition calls a utility called test. It tells test to check and see whether the directory contained in the newpath variable exists. This is specified by the -d option. Essentially, this condition runs test -d followed by the path the end user entered in the read prompt in the script. And all the test command does is verify whether the directory exists or not. If it&#39;s true—if test runs and it finds this directory that the end user entered—then we run this set of commands. But if it doesn&#39;t exist, then we run the &quot;else&quot; part of the if-then-else structure, in which case, we just use the echo command followed by the name of the path they entered. Then we add text, saying, &quot;Hey, this doesn&#39;t exist.&quot;</p><p>The test Command Options 02:51-04:35 The test command we just looked at is extremely useful within an if-then-else structure. There are several other options that you can use with test within an if-then-else structure to perform other types of tests.</p><p>We already looked at -d. The -d option checks to see if a particular file exists. If it does, is it a file, or is it actually a directory? If it&#39;s a directory, it returns a value of true. If it&#39;s not a directory, or if it doesn&#39;t even exist, then we get a value of false.</p><p>-e checks to see if a file exists. Understand that the -e option doesn&#39;t differentiate between files or directories. All it does is look and see if there&#39;s an entity in the file system with the name you specify. And if it&#39;s there, we return a value of true. If not, we return a value of false.</p><p>The -f option is kind of the counterpart of -d. It checks to see if the file that you&#39;re looking for exists. And, if it does, is it an actual file and not a directory?</p><p>The -G option, capital G, checks to see if the file exists and whether or not that file is owned by a specific group.</p><p>The -h or �L option with test will check to see if the file exists and whether or not that file is a symbolic link.</p><p>The -O option checks to see if the file we specify exists and whether it&#39;s owned by a particular user account.</p><p>The -r option checks to see if the file exists and whether the read permission has been granted to that file.</p><p>-w checks to see if the file exists and whether or not the write permission has been granted.</p><p>-x checks to see if the file exists and whether or not the execute permission has been granted.</p><p>As you can see, you can use test to evaluate all kinds of conditions with respect to files and directories in the file system. Test isn&#39;t limited to just seeing whether or not a file or directory exists.</p><p>Comparing Text and Numbers 04:35-05:11 For example, this command will check to see if text1 is the same as text2. Is it true, or is it false? You can also check to see whether these two text strings aren&#39;t the same. We enter &#39;test&#39; followed by the first text string, then the exclamation point and an equals sign (!=), and then the second text string. In this case, if the two text strings aren&#39;t the same, it will evaluate to true. If they&#39;re the same, it will evaluate to false.</p><p>For example, we can use test to see if num1 equals num2, true or false? We can also test to see whether or not num1 is less than num2, or we can also test to see if num1 is greater than num2.</p><p>Case Construct 05:11-06:03 You can also use a related structure in your scripts called a case structure. If-then-else works great if we have a particular condition that can be evaluated in one of two ways, either true or false. But if-then-else doesn&#39;t work so great if we need to evaluate a condition that could be evaluated in many different ways. If there are more than two ways a condition could be evaluated, you should use a case statement instead. The structure of a case statement is shown here. We start with &#39;case,&#39; and then we have a variable. If the variable matches response one, then we run this set of commands. If it&#39;s the second response, we run this set of commands. If it&#39;s the third response, we run this set of commands. And notice that we end the case statement with case spelled backward, &#39;esac.&#39;</p><p>When you&#39;re ready to end your case, you spell case backward, &#39;esac.&#39; That tells the script, &quot;Hey, we&#39;re done with the case statement.&quot;</p><p>A Case Example 06:03-07:36 Let&#39;s look at a simple example.</p><p>Here, we have a script that asks users what county they were born in a particular state. Based on their response, we can cause the script to provide a customized response using a case statement.</p><p>This script first asks the user what county they were born into, and it reads their response into a variable called mycounty. Then, using the value of mycounty, the case statement determines what part of the state they were born in using a case structure. We reference the mycounty variable in the case statement and then provide different responses.</p><p>Notice here that we have three different responses. They&#39;re separated by pipe characters; that means &quot;or.&quot; If the value of mycounty equals Bingham, Bonneville, or Bannock, then we run the echo command, saying, &quot;Being born in&quot; whatever county they entered, you were born in eastern Idaho.&quot; If the value of the mycounty variable is Ada, Owyhee, or Canyon, we run the echo command, saying, &quot;Being born in whatever county you entered, you were born in western Idaho.&quot; We do the same thing for Cache, Oneida, and Franklin; tell them they were born in southern Idaho. And we do the same thing, again, for Bonner, Shoshone, and Kootenai, which says that you were born in northern Idaho.</p><p>Notice, down here, that we have this response, this star (*). This is very important because, within the case statement, it&#39;s possible that they either provided a response that isn&#39;t included in any of the responses here or that they may have misspelled their response and cannot be matched. When this happens, the response will default to the star location, and then it will run the echo command to put this text on the screen.</p><p>While Loop 07:36-08:11 If-then-else, as well as case structures, are called branching structures because, depending upon how a condition evaluates, the script branches in one direction or another. You can also use a different kind of structure in your scripts called a looping control structure. Looping control structures come in three different varieties. We have the while loop, the until loop, and the for loop.</p><p>Let&#39;s take a look at the while loop first. A while loop executes over and over until the specified condition here is no longer true. As long as this condition is true, run these commands. When that condition becomes false, then it will exit out of the loop.</p><p>Until Loop 08:11-08:34 In addition to a while loop, you can also use an until loop in your script, which works in the opposite manner of a while loop. An until loop will run over and over as long as this condition here is false. Remember, with a while loop, it runs as long as that condition is true. As long as that condition is false, these commands will run. When that condition becomes true, it will exit out of the loop and continue on.</p><p>For Loop 08:34-09:04 A for loop operates in a very different manner than while or until. Remember, the until and while loops will just keep looping indefinitely until the specified condition is met. A for loop, on the other hand, will loop a specified number of times. The structure is &#39;for i in&#39; whatever we specify, run these commands. And it will keep looping a certain number of times. You&#39;ll notice here that we use the sequence command, seq. It&#39;s very common to use a sequence command within a for loop to create a sequence of numbers that determines how many times it&#39;s going to loop.</p><p>The seq Command 09:04-10:20 There are three ways to create a number sequence with the sequence command. For example, if I specify a single value—such as &#39;seq 10&#39;—then the sequence is going to start at one, and then it&#39;s going to increment by one and end at the value I specified so that it will go one, two, three, and so on, until it reaches 10, and then it will stop. This&#39;ll cause the for loop to loop ten times. Then it&#39;s going to exit out of the loop.</p><p>You can also use the sequence command with two numbers. For example, if I enter &#39;seq 5 10&#39; (with a space between 5 and 10), then the sequence will start at the first value, increment by one, and then end at the second value. In this case, the first number generated by sequence would actually not be one but five, and then we&#39;d go six, seven, and so on until it reaches ten, and then it would end.</p><p>You can also specify three values with the sequence command, say, &#39;seq 1 2 10.&#39; This tells the sequence command to start at the first value, 1, but increment by two and end at 10. In this case, it would start at 1. But then, because we&#39;re incrementing by two, the next number would be 3, 5, and so on. It would actually end at 9 in this case. It can&#39;t go to 10 because it increments. The next increment would be 11, which is beyond the ending range.</p><p>for and seq Command 10:20-11:14 In this example, we&#39;re going to create a sequence of numbers from 1 to 15 because we only specified one number. We&#39;re going to start at 1, and we&#39;re going to increment by one until we reach 15. Notice that the value that we generate with the sequence command is going to be assigned to this variable, right here, named i. Each time we go through the loop, i is going to increment by one.</p><p>The first time we run it, it&#39;s going to be 1. The second time we run it, i is going to be 2. The third time through the loop, i is going to be 3, and so on. And we reference that value down here with the echo command. We say what the current number in the sequence is followed by whatever the current value of i is.</p><p>When we run this script, we&#39;d have 15 lines in the output, each one saying, &quot;The current number in the sequence is,&quot; and it would start at 1; then, in the next line, the value of i would be 2; the third line, the value of i would be 3; and so on, until it hits 15, in which case, the for loop would break.</p><p>Endless Loop 11:14-11:32 The biggest danger with looping structures is that it&#39;s possible to actually get stuck in the loop, where it loops over and over and never breaks. We call this an infinite loop. This happens when the condition never changes to a value that&#39;ll break the loop. It will continue to loop for eternity until you manually break out of it using the Ctrl+C key.</p><p>Summary 11:32-11:49 In this lesson, we looked at several control structures you can use within a shell script. We first looked at the if-then-else structure. We looked at the case structure. Then we looked at looping structures: while, until, and for.</p><h2 id="_14-3-2-looping" tabindex="-1"><a class="header-anchor" href="#_14-3-2-looping"><span>14.3.2 Looping</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Looping 00:00-00:34 In this demonstration, we&#39;re going to discuss looping. We often see this used in shell scripts to help automate common tasks. When working with shell scripts, a loop enables you to execute a set of commands repeatedly. The three most common looping types are the for loop, the while loop, and the until loop. Each of these types of loops provides a unique way to deal with different scenarios.</p><p>To demonstrate the different kinds of loops more quickly, I&#39;ll show them to you interactively instead of taking the time to put them into an actual script.</p><p>The for Loop 00:34-00:43 The for loop is probably one of the more common types that&#39;s used. The purpose of a for loop is to repeat a list of items, such as text or numbers.</p><p>Looped Commands 00:43-02:20 Let&#39;s look at a very simple for loop with text. First, we need to specify the type of loop by typing for. Next, we need to specify a variable name that&#39;ll hold each item in our list. Let&#39;s use a variable name of fruit. Then we use the keyword in. This keyword describes what&#39;s going to be coming into our variable next. Then comes our list of items we want to work with: apple, pear, and plum. I could add a semicolon to end this first part of our loop commands, but to make it easier to see, I&#39;ll press Enter and add the next statement on a new line.</p><p>For the next part of our for loop, we need to specify what to do with each of these items in our list. This is done by adding the word do. In other words, what do I want to do with each item in my list? I&#39;ll specify this on the next line, which will be to simply echo or write each item in my list. This is done by telling the echo command to print what&#39;s in the variable, using the $ and the name of the variable, which is fruit. To end our loop, we use done. To see how the loop functions, let&#39;s press Enter, and we see that the echo command was repeated once for each item in the list.</p><p>Now, let&#39;s press the up key and modify this script to use numbers. Although we didn&#39;t enter them, the semicolons were added as separators for each part of the script. I&#39;ll first change the name of the variable to n since we&#39;re going to be working with numbers. Then I&#39;ll replace all the names of fruits with the numbers 1, 2, 3, 4, and 5. Now when I press Enter, you see that the numbers 1 through 5 are echoed to the screen.</p><p>Iteration Options 02:20-03:09 To simplify the construction of the loop, you can use various methods to create your lists. With numbers, you can specify a range. Do this by using the curly brackets to specify a set of numbers. Using the same basic script, let&#39;s replace our numbers with {1..5}. When I press Enter, you see that it printed the numbers 1 through 5.</p><p>Starting with Bash 4, it&#39;s also possible to specify an increment when using ranges. Let&#39;s change this loop to use the range of 0 to 25, and then we&#39;ll specify an increment by adding two periods and the number 5, meaning that we only want to print every fifth number. Pressing Enter, we see that it printed the first number and then only printed every fifth number until the value of the range had been met.</p><p>The C Construct 03:09-04:49 The last variation of the for loop uses a C-style construct. With this type of loop, we&#39;re going to look for a test or condition to determine how long the loop should run. Once that test or condition has been met, the loop ends.</p><p>We begin with the word for but then use double open parentheses. That tells us we&#39;re going to be using expansion. We again use our variable n, but this time we have to define what the starting value, or number, will be. We&#39;ll use 0 again, which is followed by a semicolon as a separator. Next, we need to specify at what point do we stop the loop. Let&#39;s say that when n is either less than or equal to the number 10, continue to loop. This is again followed by a semicolon.</p><p>The last thing we need to do is to specify how the starting value of our variable—in this case, zero—will be incremented. We&#39;ll accomplish this by using the variable n followed by two ++. This means that for each loop, increment the value of the variable by adding 1. To end this construct, we need to add two closing parentheses and a semicolon.</p><p>The rest of the loop is similar to the way we did things before. I&#39;ll press Enter and add do. Now I&#39;ll press Enter again and add my task, which is to echo &quot;Number = $n&quot;, and then Enter again. And to close the loop, we end it with done. When I press Enter to run the script, we see that it printed the numbers 0 through 10.</p><p>Let&#39;s run it one more time, but this time, let&#39;s set the starting value of n to be 5. And when I press Enter, you see that it started at 5, but still ended at 10.</p><p>The while Loop 04:49-06:37 Let&#39;s move to the next type of loop, known as the while loop. As the name suggests, this type of loop continues looping while, or as long as, a specific condition is true. This can be used for things like traversing a directory or looking for a specific type of file. As long as the file type can be found, the loop will continue.</p><p>You could use a while loop to display an error message as long as a user fails to enter the requested input. The construct of the while loop is similar to the for loop, but in a for loop, we set the beginning value of the variable in the loop. With a while loop, a variable is created outside of the loop itself. To create a variable, let&#39;s type n=0 and press Enter.</p><p>Now we can configure our loop. We start with the keyword while, and then we&#39;ll enter our condition. To begin the condition, we type a left bracket and then a space. For this example, we want the condition to be that the n variable must be less than 10. To do that, we type $n -le for less than, the value of 10 followed by space, and then the closing bracket and a semicolon to end this segment.</p><p>Next, we enter the keyword do, just like we did with the for loop. And then what we want to do to is echo the contents for the $n variable, followed by a semicolon. Then, before ending our loop, we need to increment the value of n. This is done by using the two (( and n++, followed by two )) and a semicolon, just like we did before. This will add 1 to the n variable each time it loops. Now to finish the loop, we type done. When I press Enter, we see that the numbers 0 through 10 are printed.</p><p>The until Loop 06:37-07:40 The last loop we&#39;ll discuss is the until loop. This loop type is the opposite of the while loop. With the while loop, we keep looping while the condition or test is true, but with the until loop, we want to keep looping until the condition is true. Or in other words, we keep looping as long as the condition or test is false.</p><p>To see how this works, let&#39;s do basically the same thing we did before by first setting our variable, n, to the value of 0. But now, we&#39;re going to say until the value of n is equal to 10. We&#39;ll go ahead and put our semicolon in again. Let&#39;s enter our do statement. Everything else is the same. We&#39;ll still echo the value of n and increment it. Okay, now we&#39;re done.</p><p>Now when I press Enter, you see that the results are almost the same. With the while loop, we printed the values of 0 through 10. But with the until loop, once our variable reached 10, we ended the loop so that the output ended at 9 instead of 10.</p><p>Summary 07:40-07:51 Well, that&#39;s it for this demonstration. We walked through how to use the for loop, the while loop, and the until loop.</p><h2 id="_14-3-3-exit-codes" tabindex="-1"><a class="header-anchor" href="#_14-3-3-exit-codes"><span>14.3.3 Exit Codes</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Exit Codes 00:00-00:10 In this demonstration, we&#39;re going to discuss how exit codes can be used to help evaluate or troubleshoot scripts.</p><p>Successful Exit Code 00:10-00:40 To illustrate how exit codes work, let&#39;s first run a command successfully and then look at its exit code. We&#39;ll use the touch command to create a file named myfile.</p><p>I can now run the ls myfile command, which runs successfully and lists the file. To see the exit code associated with this command, I&#39;ll run echo $?, and the result is zero. Zero (0) indicates that the program or the procedure ended successfully.</p><p>Error Exit Code 00:40-01:33 Now let&#39;s look at what happens when a command is not run successfully. To show this, I&#39;ll run ls, but this time I&#39;ll misspell the name of the file by leaving off the last letter. When I press Enter, an error message telling me that the file doesn&#39;t exist is shown.</p><p>To see the exit code for an unsuccessful command, we&#39;ll run echo $? again, and this time the number two is shown. By default, two (2) means, &quot;file not found.&quot; With this basic knowledge of how exit codes work, I now want to show you how you can define your own exit code numbers to mean different things.</p><p>To see how this works, let&#39;s first change to the /usr/local/bin directory. In this directory, I&#39;ve created two scripts that we can use to see how custom exit codes can be used. I chose this directory because it&#39;s in our $PATH environment variable.</p><p>PrintCodes Script 01:33-02:16 Let&#39;s first look at the PrintCodes script using the cat command. The purpose of this script is to run a different script named ConditionCodes.sh, and then, depending on the exit code when the ConditionCodes script is run, the PrintCodes script will display a different message. For example, if the exit code returned when the ConditionCodes script is run is 101, I want to display, &quot;Error 101, You must be the root user to run.&quot;</p><p>On the other hand, if the exit code is 102, the message &quot;The configuration file does not exist&quot; will be shown. And finally, when an error code of zero is returned, then we&#39;ll be told that the script was &quot;Successfully completed!&quot;.</p><p>Define Custom Exit Codes 02:16-03:10 To see how these error codes of 101 and 102 are defined, let&#39;s cat the ConditionCodes.sh script. In this script, I have several conditions I&#39;m searching for, and depending on the condition found, I&#39;ve assigned a custom exit code or used a default code. For example, in this first line, I&#39;m checking to see if the person running the script is the root user. If the user is not the root user, then the script will end with an exit code of 101.</p><p>In the next section, I have an &quot;else if&quot; line that says that if the user is root, check to see if the file named exe.conf exists in my current directory. If that file doesn&#39;t exist, then end the script with an exit code of 102. If both of these other tests are true, meaning I am the root user and the exe.conf file does exist in my current directory, then end with an exit code of zero, meaning the script ran successfully.</p><p>Run the Script, Not root User 03:10-03:38 Let&#39;s clear the screen and see how all this works. To start, let&#39;s see what happens when I try to run the ConditionCodes script as a regular user. To do this, I&#39;ll type PrintCodes.sh and press Enter. Notice that since I wasn&#39;t the root user, the ConditionCodes script used the first condition and ended the script with an error code of 101. The PrintCodes script then saw this and printed the prompt telling us we needed to be the root user.</p><p>Run the Script, No Configuration File 03:38-04:06 Let&#39;s try that again, but this time, let&#39;s first switch to the root user by running su - and entering my root password. Now when I run PrintCodes.sh, notice that the ConditionCodes script detected that I was the root user, so it then checked to see if the configuration file existed. Since it didn&#39;t, the ConditionCodes script ended with an exit code of 102, and then as before, the PrintCodes script saw that code and printed the applicable message.</p><p>Run the Script, Successful 04:06-04:31 To test our last condition, let&#39;s first create our configuration file by running touch exe.conf. When I run PrintCodes.sh again, the ConditionCodes script sees that not only am I the root user, but my configuration file exists in my current directory, so it ends with an exit code of zero. Then, the PrintCodes script printed a message that the script completed successfully.</p><p>Summary 04:31-04:43 That&#39;s it for this demonstration. In this demonstration, we showed you how exit codes work and how to test for exit code completion.</p><h2 id="_14-3-4-branching" tabindex="-1"><a class="header-anchor" href="#_14-3-4-branching"><span>14.3.4 Branching</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Branching 00:00-01:11 In this demonstration, we will be discussing branching, if-then-else statements along with case and test statements.</p><p>First let&#39;s look at a script that I&#39;ve written. We&#39;ll go ahead and edit that. We&#39;ll call it branching. It&#39;s pretty straightforward script. We have the identifier letting the system know it is a script and then I&#39;ve declared of variable. I&#39;ve declared the variable &#39;TODAY&#39;, and I&#39;ve just arbitrarily set it to &#39;Tuesday&#39;.</p><p>Using if-then-else statements, what I did was, I wrote a few tests here to see and determine what day of the week it is. I did this for demonstration purposes, but it would be just as easy to write a routine that will extrapolate the date from the system date. But again, in this case, just for ease of demonstration. I set a variable, and we called it &#39;TODAY&#39;.</p><p>The if Statement 01:11-02:08 My first statement is an if statement, and what I do is I compare the variable TODAY. That&#39;s what this dollar sign ($) means. The dollar sign indicates that I&#39;m about to use a variable name. The variable name is &#39;TODAY&#39; and I&#39;m testing to see if &#39;TODAY&#39; equals Monday. I could very easily do other tests as well. I can set other variables and test for any equality that may be. We then follow with a semicolon (😉, and that&#39;s necessary as part of the scripting language, followed by the word then.</p><p>I&#39;m testing using &#39;if &#39;. This is my statement to be true or false. This is saying, &quot;If &#39;TODAY&#39; is equal to Monday (clearly it&#39;s not), then, if it were true, then we would do the next statement, &#39;echo Monday&#39;.&quot; Well, it&#39;s not Monday so we can&#39;t do that.</p><p>The elif Construct 02:08-02:43 In Linux, in bash scripting, there&#39;s another command called &#39;elif&#39;. What the &#39;elif&#39; does, it&#39;s a combination of else and if. Basically, what it&#39;s saying here is &#39;elif&#39;. In other words, I already know it&#39;s not Monday. So now I&#39;m going to test something else. I&#39;m going to say else, if, &#39;elif TODAY&#39; is equal to Tuesday. If that&#39;s true then I go ahead and &#39;echo Tuesday&#39;. So that&#39;s true. What happens is it skips all the rest of the statements.</p><p>The fi Construct 02:43-03:46 In scripting, every if ends with a &#39;fi&#39;, a backwards &#39;if&#39;. That&#39;s the way it&#39;s done in bash scripting. The &#39;if&#39; statement checks for equality follows the &#39;then&#39;, if the statement is true. Otherwise, it follows the &#39;else&#39;. &#39;else&#39; is optional. &#39;elif&#39; is optional. I can just do a test. I could have said, if &#39;TODAY&#39; is equal to Monday, then &#39;echo Monday&#39;, &#39;fi&#39;, and that&#39;s all it would&#39;ve done. Basically it wouldn&#39;t have done anything.</p><p>If you look through, I have the &#39;if&#39;, a variable, test for equality, test the string itself, &#39;Monday&#39;, and this is what I do if it&#39;s true, this is what I do if it&#39;s false. I just continue that. I do another test, test for equality, if it&#39;s true, I do this, if it&#39;s false, I do this. And I do that continuously throughout this test. So that&#39;s how &#39;if&#39;, &#39;then&#39;, and &#39;else&#39; works.</p><p>The case Statement 03:46-05:05 To show something else, I changed a little bit. I&#39;m using a &#39;case&#39;. I&#39;ve change the day, so &#39;TODAY&#39; is equal to &#39;Sunday&#39;. Now I&#39;m doing a bunch of tests in one. The first thing is the word &#39;case&#39;, the &#39;case&#39; statement defines multiple tests. The first thing I do is determine what it is I&#39;m testing against. What is it I&#39;m trying to find. Then the word &#39;in&#39;, and then I specify all of the different values that I want to test against. It&#39;s a value, followed by a closed parentheses, or parens.</p><p>Then, I have my commands. I can have one. I can have many, and they all end with the double semicolon (;😉. Then, I can go on and test the next thing. This is often used when testing for a particular parameter, or particular keyword. We use cases quite a bit. Again, this last one here, I&#39;m using the vertical pipe which in this case means &#39;or&#39;. If &#39;TODAY&#39; is equal to &#39;Saturday&#39; or &#39;TODAY&#39; is equal to &#39;Sunday&#39;, then I&#39;m going to &#39;echo&#39; the &#39;Weekend&#39;.</p><p>Run the Script 05:05-05:47 Let&#39;s see how this runs. I&#39;ll go ahead and exit out, and I will go ahead and run branching. The first test shows us &#39;Tuesday&#39;. The second shows us &#39;Weekend&#39;. One more time we&#39;ll look at the script, and you&#39;ll see that at the beginning, &#39;TODAY&#39; is defined as &#39;Tuesday&#39;. After the if, else-if statements are are finished, I then change the value to &#39;TODAY&#39; is &#39;Sunday&#39;. If &#39;TODAY&#39; is &#39;Saturday&#39; or &#39;TODAY&#39; is &#39;Sunday&#39;, then &#39;echo Weekend&#39;, and that&#39;s exactly what we saw.</p><p>The test Statement 05:47-06:46 There is third type of value, and that&#39;s called test. The test command is good for a single test, a single examination or validation, to determine if something is either true or false. Often it&#39;s used to determine whether a file or a directory exists, as one example. What&#39;s different between this and the &#39;if&#39; statement and/or the &#39;case&#39; statement, is we can really only test one thing at a time to make this make sense. What I&#39;ve seen it used for is to test to see if a file exists. Let&#39;s do that. The keyword is &#39;test&#39;, then I do my equality. I test for the existence. I can check for existence, nonexistence, directory name, filename, zero-byte file. There&#39;s many, many tests that I can do, For this example, I&#39;m just seeing if a file exists.</p><p>Double Ampersand and Double Vertical Bar 06:46-07:52 As we saw before, I created the &#39;branching&#39; script. We&#39;ll just see if that branching script exists. Obviously, we know it does. The next part is a double ampersand (&amp;&amp;), and what the double ampersand (&amp;&amp;) means is the same thing is that then, in an if-then-else statement. The test is going to determine whether or not something is true. This keyword test is the command itself. What I&#39;m testing is to see if the file &#39;branching&#39; exists, so that&#39;s my test, &#39;&amp;&amp; echo &quot;File exists&quot;&#39;.</p><p>We need the else component. Well, what if the file does not exist. What if this test here is false. Then, over here we use a double vertical bar (||). That&#39;s the same thing as an else in the if-then-else statement. Anything following this means that the test was false.</p><p>Review and Run 07:52-09:03 The keyword is test, that&#39;s the command. I&#39;m testing to see if the file &#39;branching&#39; exists. If it does, if the result is true, then I&#39;m echoing the &#39;File Exists&#39;. If the result is false, then I&#39;m echoing, &#39;No file&#39;. Press Enter, and sure enough the file does exist.</p><p>Well, let&#39;s just test something just to show you how this works. So &#39;test&#39;, I&#39;m going to check for the existence of &#39;testout&#39;. We know that doesn&#39;t exist. Again, I&#39;ll do the exact same thing, &#39;echo &quot;File exists&quot;&#39;, else, &#39;echo &quot;No file&quot;&#39;. This time, pressing enter, of course, since &#39;testout&#39; does not exist, &#39;No file&#39; is what is displayed. So again, command, This is what were testing for, either true or false. If true, do this, if false, do this.</p><p>Summary 09:03-09:22 In this demonstration, we showed you the if statement, and how that works with the &#39;if-then-else-elif&#39;, and compared that with the &#39;case&#39; statement and showed you how to use the &#39;test&#39; command.</p><h2 id="_14-3-5-bash-scripting-logic-facts" tabindex="-1"><a class="header-anchor" href="#_14-3-5-bash-scripting-logic-facts"><span>14.3.5 Bash Scripting Logic Facts</span></a></h2><p>In addition to basic commands, scripts can contain scripting logic constructs to control the flow of the script.</p><p>This lesson covers the following topics:</p><ul><li>Branching constructs</li><li>Looping constructs</li><li>Exit codes</li></ul><h3 id="branching-constructs" tabindex="-1"><a class="header-anchor" href="#branching-constructs"><span>Branching Constructs</span></a></h3><p>There are two branching constructs that perform different actions based on specific conditions or user input.</p>',111),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Construct"),e("th",null,"Description"),e("th",null,"Examples")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",null,"if/then/else/fi")]),e("td",null,[t(" Use the "),e("b",null,"if/then/elif/else/fi"),t(" construct to evaluate conditions and branches based on the results. "),e("ul",null,[e("li",null,[t(" The "),e("b",null,"if"),t(" statement defines the condition to be evaluated. ")]),e("li",null,[t(" The "),e("b",null,"then"),t(" statement specifies the commands to perform if the condition evaluates to true. ")]),e("li",null,[t(" The "),e("b",null,"elif"),t(" statement is run if the condition in the if statement evaluates to false. It also supplies another condition and specifies the commands to perform if the "),e("b",null,"elif"),t(" condition evaluates to true. ")]),e("li",null,[t(" The "),e("b",null,"else"),t(" statement specifies the commands to perform if the condition evaluates to false. ")]),e("li",null,[t(" Operands include: "),e("ul",null,[e("li",null,[e("b",null,"="),t(" (equal to)")]),e("li",null,[e("b",null,"!="),t(" (not equal to)")]),e("li",null,[e("b",null,">"),t(" (greater than)")]),e("li",null,[e("b",null,"<"),t(" (less than)")])])]),e("li",null,[t(" The "),e("b",null,"if"),t(" command requires spaces between the conditions and the operand. ")]),e("li",null,[t(" The "),e("b",null,"if"),t(" command also requires spaces between the conditions and the brackets ('[' and ']'). ")]),e("li",null,[t(" The construct must be closed with the "),e("b",null,"fi"),t(" command. ")])]),t(" The "),e("b",null,"test"),t(" command can be used within an "),e("b",null,"if/then/else/fi"),t(" construct to evaluate whether a condition evaluates to true or false. The "),e("b",null,"test"),t(" command options are listed below. "),e("ul",null,[e("li",null,[e("b",null,"-d"),t(" tests whether a directory exists.")]),e("li",null,[e("b",null,"-e"),t(" tests whether a file exists.")]),e("li",null,[e("b",null,"-f"),t(" tests whether a regular file exists.")]),e("li",null,[e("b",null,"-G"),t(" tests whether the specified file exists and is owned by a specific group. ")]),e("li",null,[e("b",null,"-h"),t(" or "),e("b",null,"-L"),t(" tests whether the specified file exists and if it is a symbolic link. ")]),e("li",null,[e("b",null,"-O"),t(" tests whether the specified file exists and if it is owned by a specific user. ")]),e("li",null,[e("b",null,"-r"),t(" tests whether the specified file exists and if the read permission is granted. ")]),e("li",null,[e("b",null,"-w"),t(" tests whether the specified file exists and if the write permission is granted. ")]),e("li",null,[e("b",null,"-x"),t(" tests whether the specified file exists and if the execute permission is granted. ")])]),e("h2",null,"test"),e("ul",null,[e("li",null,[e("b",null,"="),t(" tests whether strings are equivalent.")]),e("li",null,[e("b",null,"!="),t(" tests whether strings are not equivalent.")]),e("li",null,[e("b",null,"-o"),t(" is used to specify that either of the options can be equivalent. ")]),e("li",null,[e("b",null,"-eq"),t(" tests whether integers are equivalent.")]),e("li",null,[e("b",null,"-ne"),t(" tests whether integers are not equivalent.")]),e("li",null,[e("b",null,"-gt"),t(" tests whether the first integer is greater than the second. ")]),e("li",null,[e("b",null,"-lt"),t(" tests whether the first integer is less than the second. ")])])]),e("td",null,[e("b",null,[t("#!/bin/bash "),e("br"),t(' echo "What is your name?" '),e("br"),t(" read NAME "),e("br"),t(' if [ $NAME = "George" ] '),e("br"),t(" then "),e("br"),t(` echo "That's my name, too." `),e("br"),t(" else "),e("br"),t(` echo "Hello" $NAME "I'm George." `),e("br"),t(" fi "),e("br"),t(" exit 0")]),e("h2",null,"else"),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" The if statement could also be written using the "),e("b",null,"test"),t(" command. "),e("br"),t(" For example, "),e("b",null,'if test $NAME = "George"')])])])])]),e("h2",null,"test -f ~/myfile.txt")])]),e("tr",null,[e("td",null,[e("b",null,"case/esac")]),e("td",null,[t(" Use the "),e("b",null,"case/esac"),t(" construct to branch a script when the condition being evaluated has several possible outcomes. "),e("ul",null,[e("li",null," The case construct can have an unlimited number of possible options. "),e("li",null," When the script evaluates an option as being true, all remaining options are skipped. "),e("li",null,"Each option can execute several lines of commands."),e("li",null,"Close each case with two semi-colons."),e("li",null,[t(" Case structures must be closed using "),e("b",null,"esac"),t(" (case spelled backwards.) ")])])]),e("td",null,[e("b",null,[t("#!/bin/bashsh "),e("br"),t(' echo "What is your favorite season?" '),e("br"),t(" read season "),e("br"),t(" case $season in "),e("br"),t(" spring) "),e("br"),t(' echo "The thing I like best about spring is the flowers." '),e("br"),t(" ;; "),e("br"),t(" summer) "),e("br"),t(' echo "I wish I could go swimming, but being a computer, that might not work out so well." '),e("br"),t(" ;; "),e("br"),t(" fall) "),e("br"),t(` echo "Fall leaves, crisp morning air...what's not to like?" `),e("br"),t(" ;; "),e("br"),t(" autumn) "),e("br"),t(` echo "Fall leaves, crisp morning air...what's not to like?" `),e("br"),t(" ;; "),e("br"),t(" winter) "),e("br"),t(` echo "Skiing looks fun, but snowstorms interfere with my reception of the neighbor's Wi-Fi." `),e("br"),t(" ;; "),e("br"),t(" *) "),e("br"),t(' echo $SEASON "is not listed in my database as being a season. Choose: spring, summer, fall, autumn, or winter." '),e("br"),t(" ;; "),e("br"),t(" esac "),e("br"),t(" exit 0")]),e("p",null," The script asks the user about season preferences and has a response for each common answer. The last option is a catch-all for any answer other than those specified in the script. ")])])])],-1),e("h3",{id:"looping-constructs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#looping-constructs"},[e("span",null,"Looping Constructs")])],-1),e("p",null,"There are three looping constructs that repeatedly run a set of commands according to a specified set of conditions.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Construct"),e("th",null,"Description"),e("th",null,"Examples")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",null,"while/do/done")]),e("td",null,[t(" The "),e("b",null,"while/do/done"),t(" construct implements a "),e("b",null,"while"),t(" loop. A "),e("b",null,"while"),t(" loop continuously executes all commands between the "),e("b",null,"do"),t(" and "),e("b",null,"done"),t(" statements while a specific condition evaluates to true. The "),e("b",null,"while"),t(" loop is useful for repeating an action until a specified condition is met. "),e("ul",null,[e("li",null,[t("A "),e("b",null,"while"),t(" loop requires do and done statements.")]),e("li",null,[t(" A "),e("b",null,"while"),t(" loop can create infinite loops if the condition never evaluates to false. ")])])]),e("td",null,[e("b",null,[t("#!/bin/bash "),e("br"),t(" declare -i num "),e("br"),t(` echo "I'm thinking of a number between 1 and 100." `),e("br"),t(" # Give num a value to prevent errors. "),e("br"),t(" num=0 "),e("br"),t(" while test $num -ne 23 "),e("br"),t(" do "),e("br"),t(' echo "What is your guess?" '),e("br"),t(" read num "),e("br"),t(" if test $num -lt 23 "),e("br"),t(" then "),e("br"),t(' echo "The number is higher." '),e("br"),t(" fi "),e("br"),t(" if test $num -gt 23 "),e("br"),t(" then "),e("br"),t(' echo "The number is lower." '),e("br"),t(" fi "),e("br"),t(" done "),e("br"),t(' echo "You guessed it." '),e("br"),t(" exit 0")]),e("h2",null,"while")])]),e("tr",null,[e("td",null,[e("b",null,"until/do/done")]),e("td",null,[t(" The "),e("b",null,"until/do/done"),t(" construct implements an until loop. An "),e("b",null,"until"),t(" loop is nearly identical to a "),e("b",null,"while"),t(" loop, but evaluates the condition using the opposite logic: "),e("ul",null,[e("li",null,[t(" A "),e("b",null,"while"),t(" loop executes commands while a condition is true. ")]),e("li",null,[t(" An "),e("b",null,"until"),t(" loop executes commands until a condition is true. ")])])]),e("td",null,[e("b",null,[t("#!/bin/bash "),e("br"),t(" declare -i num "),e("br"),t(` echo "I'm thinking of a number between 1 and 100."t; `),e("br"),t(" # Give num a value to prevent errors. "),e("br"),t(" num=0 "),e("br"),t(" until test $num -eq 23 "),e("br"),t(" dodo "),e("br"),t(' echo "What is your guess?" '),e("br"),t(" read num "),e("br"),t(" if test $num -lt 23 "),e("br"),t(" thenen "),e("br"),t(' echo "The number is higher." '),e("br"),t(" fi "),e("br"),t(" if test $num -gt 23 "),e("br"),t(" thenen "),e("br"),t(' echo "The number is lower." '),e("br"),t(" fi "),e("br"),t(" done "),e("br"),t(' echo "You guessed it." '),e("br"),t(" exit 0")])])]),e("tr",null,[e("td",null,[e("b",null,"for/do/done")]),e("td",null,[t(" The "),e("b",null,"for/do/done"),t(" construct implements a "),e("b",null,"for"),t(" loop. A "),e("b",null,"for"),t(" loop executes a set of commands a set number of times. A for loop: "),e("ul",null,[e("li",null," Is useful when a specific action needs to be done a set number of times. "),e("li",null," Executes all commands between the do and done statements. These are required. "),e("li",null," Can be used with a list of items with one action being done for each item in the list. ")]),t(" The "),e("b",null,"seq"),t(" command can be used to create a sequence of numbers for use in a for loop: "),e("ul",null,[e("li",null,[t(" When using only one number in the command, "),e("b",null,"seq"),t(" starts at 1 and counts to the specified number. ")]),e("li",null,[t(" When two numbers are given in the command, "),e("b",null,"seq"),t(" begins with the first number and counts up to the second number. ")]),e("li",null,[t(" When three numbers are given in the command, "),e("b",null,"seq"),t(" starts at the first number and counts in increments of the second number up to the third number. ")])])]),e("td",null,[e("b",null,[t("#!/bin/bash "),e("br"),t(" declare -i num "),e("br"),t(' echo "Multiplication quiz!!!"; '),e("br"),t(' echo "Which set of multiplication tables do you want to drill?" '),e("br"),t(" read num "),e("br"),t(` echo "OK. We'll work on 0X"$num "through 12X"$num"." `),e("br"),t(" for looper in $(seq 0 12) "),e("br"),t(" do "),e("br"),t(' echo "What is" $num "X" $looper"?" '),e("br"),t(" read answer "),e("br"),t(" if test $ANSWE -eq $[$num*$looper] "),e("br"),t(" then "),e("br"),t(' echo "That is correct!" '),e("br"),t(" else "),e("br"),t(` echo "That's not it. The correct answer is" $[$num*$looper]"." `),e("br"),t(" fi "),e("br"),t(" done "),e("br"),t(" exit 0")]),e("h2",null,"for"),e("h2",null,"seq 10"),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" Other methods used to create a "),e("b",null,"for"),t(" loop include: "),e("ul",null,[e("li",null,[e("b",null,"for looper in 1 2 3 4 5"),t(" counts from 1 to 5. ")]),e("li",null,[e("b",null,"for looper in {1..5}"),t(" counts from 1 to 5.")]),e("li",null,[e("b",null,"for looper in {0..10..2}"),t(" counts from 0 to 10 in increments of 2. ")])])])])])])])])])])],-1),n('<h3 id="exit-codes" tabindex="-1"><a class="header-anchor" href="#exit-codes"><span>Exit Codes</span></a></h3><p>Every command terminates with an exit code. The <code>$?</code> special variable contains the exit code from the last executed command. In addition the <code>exit</code> command will both exit a script or routine and set an exit code.</p><p>The following examples illustrate how the <code>$?</code> special variable and the <code>exit</code> command can be used in scripts.</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>$?</code></span></a></h3><table><thead><tr><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><b>#!/bin/bash <br><br> echo &quot;Enter the file to find:&quot; <br> read filename <br><br> find $filename <br> result=$? <br><br> case $result in <br> 0) <br> echo &quot;The $filename file was found&quot; <br> ;; <br> 1) <br> echo &quot;The $filename file was not found&quot; <br> ;; <br> *) <br> echo &quot;Unexpected error code: $result&quot; <br> ;; <br> esac <br><br> exit 0</b></td><td> The <b>find</b> command returns an exit code of 0 when a given filename is found. If it doesn&#39;t find the file, it returns with an exit code of 1. The exit code is captured in the <b>result=$?</b> command and used in the case structure. </td></tr><tr><td><b>#!/bin/bash <br><br> if ! [ $(id -u) = 0 ]; then <br> echo &quot;The $0 script must be run as root&quot; <br> exit 101 <br><br> elif ! [ -e /etc/aconffile.conf ]; then <br> echo &quot;The configuration file /etc/aconffile.conf is missing&quot; <br> exit 102 <br><br> else <br> echo &quot;Performing normal processing&quot; <br> # commands to be performed by root ... <br> fi <br><br> exit 0</b></td><td> The results of the <b>id -u</b> command is zero (0) if the root account is being used. If root is not being used, the script exits with a code of 101. The <b>elif</b> statement checks if a configuration file exits. If not, the script exits with a code of 102. Otherwise ( <b>else</b> ), normal processing commands are run and the script exits with a code of zero (0). </td></tr></tbody></table>',5)]))}const u=i(r,[["render",l],["__file","03.html.vue"]]),d=JSON.parse('{"path":"/14/03.html","title":"Section 14.3 Bash Scripting Logic","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 14.3 Bash Scripting Logic","description":"some description"},"headers":[{"level":2,"title":"14.3.1 Bash Scripting Logic","slug":"_14-3-1-bash-scripting-logic","link":"#_14-3-1-bash-scripting-logic","children":[]},{"level":2,"title":"14.3.2 Looping","slug":"_14-3-2-looping","link":"#_14-3-2-looping","children":[]},{"level":2,"title":"14.3.3 Exit Codes","slug":"_14-3-3-exit-codes","link":"#_14-3-3-exit-codes","children":[]},{"level":2,"title":"14.3.4 Branching","slug":"_14-3-4-branching","link":"#_14-3-4-branching","children":[]},{"level":2,"title":"14.3.5 Bash Scripting Logic Facts","slug":"_14-3-5-bash-scripting-logic-facts","link":"#_14-3-5-bash-scripting-logic-facts","children":[{"level":3,"title":"Branching Constructs","slug":"branching-constructs","link":"#branching-constructs","children":[]},{"level":3,"title":"Looping Constructs","slug":"looping-constructs","link":"#looping-constructs","children":[]},{"level":3,"title":"Exit Codes","slug":"exit-codes","link":"#exit-codes","children":[]},{"level":3,"title":"$?","slug":"","link":"#","children":[]}]}],"git":{"updatedTime":1736833578000},"filePathRelative":"14/03.md"}');export{u as comp,d as data};
