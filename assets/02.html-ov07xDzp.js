import{_ as n,c as d,a as t,e as a,w as i,r as s,o as r,b as e}from"./app-CCsZbG-M.js";const m={};function u(h,o){const l=s("test");return r(),d("div",null,[o[1]||(o[1]=t('<p>As you study this section, answer the following questions:</p><ul><li>Which commands can you use to view modules that are currently loaded?</li><li>How would you generate a list of module dependencies?</li><li>What is the advantage of using <b class="fw-bold">modprobe</b> to load a module into the kernel instead of <b class="fw-bold">insmod</b> ?</li></ul><p>In this section, you will learn to:</p><ul><li>Insert a module into the kernel</li><li>Remove a module from the kernel</li></ul><p>Key terms for this section include the following:</p>',5)),a(l,null,{default:i(()=>o[0]||(o[0]=[e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",null,"Term"),e("th",null,"Definition")])]),e("tbody",null,[e("tr",null,[e("td",null,"Linux kernel"),e("td",null," The lowest level of easily replaceable software that interfaces with the hardware in your computer. The kernel's job is to talk to the hardware and software and manage the system's resources. ")]),e("tr",null,[e("td",null,"Kernel module"),e("td",null," Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without rebooting the system. ")])])],-1)])),_:1}),o[2]||(o[2]=t('<p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 1.4 Manage system processes <ul><li>Manage kernel modules</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.7 Given a scenario, manage software configurations <br><ul><li> Configure kernel options <ul><li> Modules <ul><li>lsmod</li><li>insmod</li><li>rmmod</li><li>modprobe</li><li>modinfo</li></ul></li></ul></li></ul></td></tr></tbody></table><h2 id="_9-2-1-kernel-module-management" tabindex="-1"><a class="header-anchor" href="#_9-2-1-kernel-module-management"><span>9.2.1 Kernel Module Management</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Kernel Module Management 00:00-00:18 When you&#39;re working with Linux systems, you have to manage the hardware drivers, or kernel modules, that the OS uses. In this lesson, we&#39;ll take a look at how to view information on currently loaded modules, load kernel modules, and unload kernel modules.</p><p>View Loaded Module Information 00:18-01:26 Let&#39;s begin by talking about how you can view a list of currently loaded kernel modules. To see which modules are currently loaded, we want to use the lsmod command.</p><p>This command pulls information from the /proc/modules location and lists all kernel modules that are used by the system in an easy-to-read format. The output shows the size of the driver and any dependency information for that module. For example, here, we see that for this kernel module, bnep, to load, the bluetooth kernel module must be loaded first.</p><p>Now, the lsmod command only displays summary information. If we want to see more detailed information about a particular driver, we should use the modinfo command followed by the name of the driver we want to look at. For example, we can type modinfo Bluetooth to get detailed information on the Bluetooth driver, including its licensing information, version, description, dependencies, and more.</p><p>In addition to viewing information on the kernel modules that are currently loaded, you can also manually load kernel modules. Let&#39;s take a look at this process.</p><p>Loading Kernel Modules 01:26-05:13 Before we can load drivers, the first thing we need to do is run the depmod command. This command is used to build a file named modules.dep in the /lib/modules/kernel version directory.</p><p>If we open the modules.dep file, we&#39;ll see a detailed list of all the intricate dependencies between different modules. This is very important because it helps other kernel module management utilities ensure that all these dependencies are accounted for and that the proper dependencies are running before we try to load a new module.</p><p>We have two options we can use to load a new module. The first is the insmod command followed by the full path and filename of the module to load, as you can see in this example. The problem with the insmod command is that it ignores the depmod file we just created. So, if we use insmod, it&#39;ll just try to load the module. It won&#39;t try to load any of the dependencies, which will lead to a lot of errors.</p><p>The better option is to use modprobe. The modprobe utility is much better for loading kernel modules because it does take dependency information into account. The syntax is similar to the insmod command. We enter modprobe followed by the name of the module that we want to load. In this example, we&#39;re loading the driver for this network card.</p><p>By default, the kernel modules we load will not be persistent across a system restart unless the device is automatically detected by the kernel at boot, in which case the kernel module will be loaded. Modprobe is actually run every time the Linux kernel loads. The Linux kernel reads the information that&#39;s stored in the /etc/modprobe.conf file and determines which kernel modules needs to be loaded at startup. Some newer versions of Linux will use a series of files that are stored in the /etc/modprobe.d directory, but these files do the same thing as the modprobe.conf file.</p><p>Within the modprobe.conf file, there are several directives that are used to tell modprobe which kernel modules need to be loaded. The first one is the install directive. It&#39;s followed by the name of the module. This tells modprobe to load the specified module. Here&#39;s a neat trick: you can also use the install directive to run shell commands. This can provide you with a high degree of flexibility when you&#39;re trying to load kernel modules. For example, if there&#39;s a particular command that has to be run before a kernel module will load, that can be done right there.</p><p>Another directive found within the modprobe.conf file is the alias directive. This directive gives a kernel module an alias name that can be used to reference the kernel module. The alias directive specifies the alias name followed by the name of the module that we want to assign the alias to.</p><p>Lastly, we have the options directive, which allows us to specify a particular module name and the options we want to use with that module when the kernel loads it.</p><p>One thing to keep in mind is that the modprobe.conf file itself should never be edited. Typically, Linux will run a hardware detection routine at system boot, which scans for new hardware. When new hardware is detected, it will automatically load the appropriate kernel module. If you have to configure some really old hardware or something and you need to manually edit the modprobe.conf file, the best option is to put the needed commands into the /etc/modprobe.conf.local file. This file is essentially a user-editable version of the modprobe.conf file, andit uses the exact same syntax.</p><p>Now, there might be some occasions where you need to unload a kernel module. Let&#39;s take a look at how that process works.</p><p>Unload Kernel Modules 05:13-06:00 To unload a kernel module, we have two different options. The first is to use the rmmod command followed by the name of the module you want to remove. The problem with this command is that if the device is in use, which it typically will be, rmmod won&#39;t be able to remove it. Rmmod also won&#39;t take into account any dependencies. If we&#39;re trying to unload a module that another kernel module is dependent on being present, rmmod doesn&#39;t care, and it will just take out the module and that&#39;s going to cause major problems with your system.</p><p>A better option is to use the <code>modprobe -r</code> command followed by the name of the kernel module to unload. modprobe will take a look at all the dependency information and then cleanly unload the kernel module instead of just ripping it out like rmmod will.</p><p>Summary 06:00-06:30 That&#39;ll wrap up this lesson on kernel module management. In this lesson, we went over how to view information on currently loaded modules by using the lsmod and modinfo commands. We looked at some different ways to load kernel modules, including using the insmod and modprobe commands. We wrapped up by reviewing how to unload kernel modules by using either the <code>rmmod</code> or <code>modprobe -r</code> commands.</p><h2 id="_9-2-2-managing-kernel-modules" tabindex="-1"><a class="header-anchor" href="#_9-2-2-managing-kernel-modules"><span>9.2.2 Managing Kernel Modules</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Managing Kernel Modules 00:00-00:30 Let&#39;s talk about managing kernel modules. As a Linux administrator, you may need to manage the kernel modules loaded on your system. These are similar to drivers within a Windows system. You may need to add, remove, or make changes to a module.</p><p>We&#39;re going to review how to use several kernel module management commands to do this. To run any of these commands, we must switch to the root user account. Only root is allowed to manage kernel modules.</p><p>lsmod Command 00:30-01:10 We&#39;ll begin by viewing all loaded kernel modules on the system. Enter the command lsmod. We see a listing of all the kernel modules currently loaded on the system. We can see the title of the output columns by scrolling to the top of the output. The first column is the name of the module. The second specifies the amount of memory the module uses.</p><p>The Used by column specifies the module dependencies. This lets the user know that all modules listed in the Used by column require the module named in column 1 to be loaded first before they can run. Meaning in order to load the ip_tables module, x_tables must first be loaded.</p><p>rmmod Command 01:10-01:58 We have a module for the parallel port in this system. This is older hardware that isn&#39;t commonly used. Therefore, I no longer need this kernel module loaded. We can remove the module using the rmmod command.</p><p>There are safety measures we must follow before removing any modules. First, we need to know exactly what we&#39;re doing. If a critical kernel module is removed accidentally, such as the module used to communicate with your hard drive, your system won&#39;t boot. Second, any modules removed must not be currently in use. This means the individual module you&#39;re looking to remove and its dependent modules. Otherwise, the system will return a device busy error.</p><p>To remove the parport_pc module, we enter the command, rmmod parport_pc. We can see it&#39;s removed by running lsmod again.</p><p>depmod and modprobe Commands 01:58-02:42 We need to be just as careful in installing modules as we are in removing them. As we&#39;ve seen, many modules have dependencies. A safe way to install new kernel modules is to use the modprobe command.</p><p>The modprobe command will look through the systems module dependency list to find and load dependent modules. We can view the module dependency list with the depmod command. Let&#39;s run depmod with the -v option for verbose mode. We can see all the data the modprobe command reviews when looking for dependent modules.</p><p>Let&#39;s reinstall the parallel port module. We&#39;ll run modprobe parport_pc.</p><p>Let&#39;s run lsmod again. We can see that the parport_pc module is installed at the top of the output.</p><p>Summary 02:42-02:57 In this demo, we talked about how to manage kernel modules. We reviewed the use of the lsmod command, rmmod command, depmod command, and the modprobe command.</p><h2 id="_9-2-3-kernel-module-management-facts" tabindex="-1"><a class="header-anchor" href="#_9-2-3-kernel-module-management-facts"><span>9.2.3 Kernel Module Management Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>Load kernel modules</li><li>Manage kernel modules</li></ul><h3 id="load-kernel-modules" tabindex="-1"><a class="header-anchor" href="#load-kernel-modules"><span>Load Kernel Modules</span></a></h3><p>When the system boots, it uses one of the following files to automatically load kernel modules. (The exact file used depends on the implementation.)</p><table><thead><tr><th>File</th><th>Description</th></tr></thead><tbody><tr><td><b>/etc/modprobe.conf</b></td><td> Provides the <b>modprobe</b> utility with default commands for loading modules at boot time. Entries in the file include the following: <ul><li><b>install</b> loads a module at boot time.</li><li><b>alias</b> specifies a name as an alias for a module name. This alias can be used with module utilities. </li><li><b>options</b> specifies options used while loading a module, including: <ul><li><b>irq</b> for IRQ information</li><li><b>io</b> for I/O port information.</li></ul></li></ul></td></tr><tr><td><b>/etc/modprobe.d</b></td><td> Contains multiple configuration files used by <b>modprobe</b> at boot time if the <b>/etc/modprobe.conf</b> file does not exist. </td></tr><tr><td><b>/usr/lib/modules/ <i>kernel-version</i></b></td><td> This directory stores your kernel modules which are available to all users. </td></tr></tbody></table><h3 id="manage-kernel-modules" tabindex="-1"><a class="header-anchor" href="#manage-kernel-modules"><span>Manage Kernel Modules</span></a></h3><p>You can use the following commands to manage kernel modules manually:</p><table><thead><tr><th>Command</th><th>Function</th><th>Example</th></tr></thead><tbody><tr><td><b>lsmod</b></td><td> Lists all loaded modules. The command pulls information from the <b>/proc/modules</b> file. </td><td></td></tr><tr><td><b>cat /proc/modules</b></td><td> Views the <b>/proc/modules</b> file. This file contains a list of all loaded modules. </td><td></td></tr><tr><td><b>modinfo</b></td><td> Views additional information about a module listed using the <b>lsmod</b> command. </td><td><b>modinfo mii</b> shows information about the MII Hardware Support Library module. </td></tr><tr><td><b>depmod</b></td><td> Creates a file that identifies module dependencies. The file is placed at <b>/lib/modules/</b> <i>kernel_version_number</i><b>/modules.dep</b> . This command first reads the <b>/etc/modules.conf</b> file to identify modules. It then probes each module to build a list of dependencies. Be aware of the following options: <ul><li><b>-a</b> shows information for all modules.</li><li><b>-n</b> shows what would happen on the screen, but does not perform the action. </li><li><b>-v</b> uses verbose mode.</li></ul></td><td><b>depmod -an</b> performs the probe and display the results on the screen. <br><b>depmod -v</b> displays all module information to the screen as it updates the modules.dep file. </td></tr><tr><td><b>insmod</b></td><td> Installs a module. <ul><li> This command does not look for dependencies. It will fail if a module being loaded has unresolved dependencies. </li><li> Include the full name of the module, including the .o or .ko extension. </li></ul></td><td><b>insmod mousedev.ko</b> loads the mousedev module.</td></tr><tr><td><b>modprobe</b></td><td> Loads a module along with any module dependencies. This utility also runs at startup to load modules. The <b>/etc/modprobe.conf</b> file provides <b>modprobe</b> with its configuration information. Be aware of the following options: <ul><li><b>-l</b> lists all loaded modules.</li><li><b>-r</b> removes a module. This option checks for dependencies before unloading the module. </li></ul></td><td><b>modprobe reiserfs</b> loads the reiserfs and all of its dependent modules. <b><br>modprobe -r reiserfs</b> removes the reiserfs module. </td></tr><tr><td><b>rmmod</b></td><td> Removes a module from the kernel. <b>rmmod</b> : <ul><li>Cannot unload the module if it is in use.</li><li> Does not look for dependencies and can cause errors if a module depends on a module that is unloaded. </li></ul></td><td><b>rmmod mousedev</b> removes the mousedev module.</td></tr></tbody></table>',45))])}const p=n(m,[["render",u],["__file","02.html.vue"]]),f=JSON.parse('{"path":"/09/02.html","title":"Section 9.2 Kernel Module Management","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 9.2 Kernel Module Management","description":"some description"},"headers":[{"level":2,"title":"9.2.1 Kernel Module Management","slug":"_9-2-1-kernel-module-management","link":"#_9-2-1-kernel-module-management","children":[]},{"level":2,"title":"9.2.2 Managing Kernel Modules","slug":"_9-2-2-managing-kernel-modules","link":"#_9-2-2-managing-kernel-modules","children":[]},{"level":2,"title":"9.2.3 Kernel Module Management Facts","slug":"_9-2-3-kernel-module-management-facts","link":"#_9-2-3-kernel-module-management-facts","children":[{"level":3,"title":"Load Kernel Modules","slug":"load-kernel-modules","link":"#load-kernel-modules","children":[]},{"level":3,"title":"Manage Kernel Modules","slug":"manage-kernel-modules","link":"#manage-kernel-modules","children":[]}]}],"git":{"updatedTime":1736670348000},"filePathRelative":"09/02.md"}');export{p as comp,f as data};
