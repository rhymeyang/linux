import{_ as r,c as l,a,b as e,d as t,o}from"./app-CsWvKd9L.js";const s={};function n(d,i){return o(),l("div",null,i[0]||(i[0]=[a('<p>As you study this section, answer the following questions:</p><ul><li>What is an ACL?</li><li>How does a firewall use an ACL?</li><li>Which technologies are used to create Linux firewalls?</li><li>What are the iptables chains and rules?</li><li>How is IP forwarding configured in Linux?</li><li>Which products are available for creating dynamic firewall rule sets?</li><li>Which ports are considered privileged?</li></ul><p>In this lesson, you will learn to:</p><ul><li>Change default ports</li><li>View iptables</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Firewall</td><td> A barrier between the internal network, which is assumed to be secure and trusted, and the external network, which is usually the internet and is not secure or trusted. </td></tr><tr><td> Access control list <br> (ACL) </td><td>The rules that a firewall uses to process IP packets.</td></tr><tr><td>IP forwarding</td><td> A process for determining which network path to send an IP packet on. (This process is also known as IP routing.) </td></tr><tr><td>Dynamic rule sets</td><td> An automated process for changing the iptables rules to filter network traffic and prevent intrusion. </td></tr><tr><td>Privileged port</td><td> The ports (numbered 1 to 1023) that only the root account has access to. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 3.1 Configure networking <ul><li>Troubleshoot an IP configuration</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 2.3 Given a scenario, implement and configure firewalls <ul><li> Firewall use cases <ul><li>Open and close ports</li><li>Check current configuration</li><li>Enable/disable Internet Protocol (IP) forwarding</li></ul></li><li> Common firewall technologies <ul><li>firewalld</li><li>iptables</li><li>nftables</li><li>Uncomplicated firewall (UFW)</li></ul></li><li> Key firewall features <ul><li>Zones</li><li>Services</li><li>Stateful</li><li>Stateless</li></ul></li></ul><p>2.5 Given a scenario, apply the appropriate access controls</p><ul><li> File permissions <ul><li>Access control list (ACL)</li></ul></li></ul></td></tr></tbody></table><h2 id="_12-7-1-linux-firewalls" tabindex="-1"><a class="header-anchor" href="#_12-7-1-linux-firewalls"><span>12.7.1 Linux Firewalls</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Linux Firewalls 00:00-00:37 In this lesson, we&#39;re going to talk about firewalls. Generally, the term &quot;firewall&quot; refers to a barrier that keeps fire from spreading. In the computing world, it refers to a software- or hardware-based network security system that uses a set of rules to control incoming and outgoing network traffic.</p><p>A firewall basically establishes a barrier between the internal network, which is assumed to be secure and trusted, and the external network, which is usually the internet and is not secure or trusted. Most operating systems, including Linux, offer software-based firewalls to protect networks and systems from external threats.</p><p>Access Control Lists 00:37-01:43 As firewalls came into use, they functioned according to network access control lists, or ACLs. ACLs were the rules the firewall used to process IP packets. Today, Linux firewall technologies often use different methods to organize their configuration options. But ACL concepts are still at the heart of a firewall&#39;s design.</p><p>ACLs determine whether routed packets are accepted, rejected, or dropped. Accepted packets are forwarded on to their destinations. Rejected packets are blocked, and a message is sent back to the packet&#39;s sender. Dropped packets are also blocked, but no message is sent.</p><p>Firewalls are divided into two categories, stateless and stateful. ACLs are stateless firewall filters because they use the packet&#39;s source address, destination address, ports, and protocols to determine how to filter the packet. A stateful firewall looks at traffic patterns, tunneling, and encryption to determine how to filter packets.</p><p>For security and analysis, you can set ACLs to log each time they&#39;re used to filter a packet. Although it can be CPU-intensive, you can also set a logging option to capture packets that the ACL targets.</p><p>Netfilter 01:43-02:13 There are many third-party Linux firewalls, and a few of them are included in major Linux distributions. But before we get into that, let&#39;s talk about Netfilter.</p><p>Netfilter is part of the Linux kernel. It&#39;s used for network address translation and port translation. It also supplies the kernel&#39;s IP packet filtering functions, which are used by firewall applications.</p><p>This means that Linux firewall applications, even those included in Linux distributions, interface with Netfilter to perform firewall functions.</p><p>IPTables 02:13-03:48 IPTables is a firewall application that&#39;s pre-installed on most Linux distributions. It is a rule-based front-end tool that interfaces with Netfilter to decide which packets to filter.</p><p>Internally, IPTables consists of five pre-defined tables that contain chains. The kernel accesses each chain at a specific point while processing an IP packet, and each chain has its own purpose. IPTables is installed with pre-configured chains. You&#39;ll rarely need to create custom chains. Instead, you can add, delete, and customize the rules contained in each chain.</p><p>Each chain&#39;s rules are traversed in order. Each rule has fields that are matched against the IP packet. If a match is made, the action in the rule is taken, and then no more rules in the chain are checked. For example, the packet could be accepted, rejected, or dropped; any of these actions completes the process, and no more chains are checked.</p><p>If the packet doesn&#39;t match the rule, the rule is skipped, and the next rule is checked. This continues until a match is made. Normally, the last rule is configured with wildcards so that it matches any packet. In many cases, the action for the last rule is to reject the packet.</p><p>Although incredibly powerful, IPTables is complicated, especially for newer users. Fortunately, to configure a firewall, you only need to modify the chains in the filter table. There are three preconfigured chains, INPUT, FORWARD, and OUTPUT. The chain names indicate the point in the IP packet processing when the chain is accessed. This means that you only need to modify three sets of rules to create an IPTables firewall.</p><p>Uncomplicated Firewall 03:48-04:06 Uncomplicated Firewall (UFW) provides a much more user-friendly framework for managing Netfilter and a command line interface for working with the firewall. On top of that, if you&#39;d rather not deal with the command line, UFW has a few GUI tools that make working with the system incredibly simple.</p><p>The firewalld Firewall 04:06-05:03 firewalld is a third Linux firewall that&#39;s pre-installed on many Linux distributions. It&#39;s a front-end controller for IPTables. When you install it, you can still use the IPTables commands to configure your firewall. Its strong point is that it has both a command line and graphical interface.</p><p>The firewalld application uses zones and services instead of chains and rules. Zones are pre-constructed rulesets for various trust levels. They&#39;re similar to Microsoft Windows security zones. Different zones allow different network services, ports, protocols, and incoming traffic types, while denying everything else.</p><p>You can apply a zone to different network interfaces. For example, if your firewall connects two networks, you can allow DHCP on the internal zone and deny it on the external zone. You can also configure firewalld with rules to allow traffic for specific network services. And you can add custom service rules to any zone.</p><p>Linux IP Forwarding 05:03-06:04 There are some other topics that relate to firewalls. First, there&#39;s IP forwarding. IP forwarding is another name for routing. It&#39;s sometimes called kernel IP forwarding because it&#39;s a feature of the Linux kernel.</p><p>A firewall can be thought of as a special type of router. Normally, routers don&#39;t filter network traffic. If traffic comes in on one interface that matches the subnet of another network interface, the router forwards the traffic to the other network interface. Firewalls do the same thing, but only after checking whether a rule prevents forwarding.</p><p>You can enable IP forwarding by writing a 1 to the ip_forward file. To enable IPv4 forwarding, you write to the /proc/sys/net/ipv4/ip_forward file. To enable IPv6 forwarding, you write to the /proc/sys/net/ipv6/ip_forward file.</p><p>Be cautious about enabling IP forwarding without a firewall, especially if one of your interfaces connects to the internet or to a subnet you don&#39;t control.</p><p>Dynamic Rule Sets 06:04-06:36 Dynamic rule sets are another useful firewall tool. They automate the rules IPTables use to filter network traffic and prevent intrusions. There are two popular Python scripts that are classified as intrusion prevention software, DenyHosts and Fail2ban. Both monitor log files and react to common security problems, such as brute-force attacks, by adding or modifying firewall rules.</p><p>Another companion application to IPTables is IPset. This tool allows you to easily set firewall rules for a block of IP addresses.</p><p>Common Firewall Configurations 06:36-07:11 Finally, there are a couple of topics that are common to all firewalls. Many firewall applications read from the /etc/services file. This file is a list of well-known services and their port assignments. When you update firewall rules, consider updating this file with new services and ports.</p><p>Also, the ports from 1 to 1023 are privileged ports. Only the root account has access to these ports. This can give you confidence in internal networks, where only trusted individuals have passwords to the root account. Internal firewalls may be more tolerant when passing network traffic using these ports.</p><p>Summary 07:11-07:35 And that&#39;s it for this video. In this lesson, we talked about firewalls and ACLs. We discussed several Linux firewalls, including Netfilter, IPTables, Uncomplicated Firewall, and firewalld. We also covered several related topics: IP forwarding, dynamic rule sets, and common firewall configurations.</p><h2 id="_12-7-2-configure-firewalld" tabindex="-1"><a class="header-anchor" href="#_12-7-2-configure-firewalld"><span>12.7.2 Configure firewalld</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Configure firewalld 00:00-00:20 In this demonstration, we&#39;re going to show firewall technologies and firewall rule sets. Ubuntu uses the UFW firewall by default, which we have disabled, and installed firewalld as the default firewall on this system instead.</p><p>Firewall Status and Start 00:20-01:03 First, we need to make sure that the firewalld process is running. We run firewall-cmd followed by the keyword - -state. This tells us whether or not firewalld is running. Since it&#39;s not, we need to start the firewall with systemctl.</p><p>We&#39;ll be working as the root user account. To start the firewalld process, let&#39;s type systemctl start firewalld. To verify firewalld starts every time the system boots, we need to enable the firewalld process. We type systemctl enable firewalld. Running firewall -cmd --state shows that the firewall is running.</p><p>Firewall Commands 01:03-01:41 There are many command line parameters available for the firewall process. We can run firewall -cmd --help to view the available commands. As you can see, there are many options.</p><p>The firewall is the first line of defense for most organizations. So, when manipulating the firewall and changing rules and parameters, it&#39;s important that we&#39;re fully aware of the changes we&#39;re making. Any changes to the firewall should not be taken lightly. Understand the changes you&#39;re making when working on systems that are in production. Best practice is to make changes on a test system first.</p><p>Configuration Files 01:41-02:12 We&#39;ll be reviewing different configuration files for the firewall. First, we&#39;ll look in the /etc/firewalld/firewalld.conf file.</p><p>The configuration file has the default zone, clean up on exit, lockdown, and other options which are defaults for the firewalld process. Most users leave these defaults. If you&#39;re instructed by a supervisor to make a change, it&#39;s usually safe to do so. Otherwise, it&#39;s best to leave the file alone.</p><p>Set Zones 02:12-03:54 There are many directories in the /usr/lib/firewalld directory. We&#39;ll look at the zones directory and the services directory. These two directories are where our zones and services configurations are kept. Let&#39;s change directories to zones and do a directory listing. We see the configured zones. We have the block.xml, dmz.xml, drop.xml, and all other zones in XML files. Unless you are an XML programmer and understand XML, it is best to leave these alone. The other directories contain similar XML configuration files.</p><p>To view our current, default zone, we run firewall-cmd --get-default-zone. We see we&#39;re using the public zone. To switch to another zone, say the internal zone, we run firewall-cmd --set-default-zone internal. When we check our default zone again, we see it has changed from public to internal.</p><p>To see all the settings for a zone, we run firewall-cmd --zone=internal --list-all. This lists all permissions for a zone. For example, DHCP, mDNS, Samba, and SSH are services that are allowed to communicate through the firewall. We can add and remove services, ports, protocols, IP&#39;s, interfaces, and other parameters. We are going to add an exclusion for the service HTTP.</p><p>Add an Exclusion to the Firewall 03:54-04:45 We&#39;ll run firewall-cmd --zone=internal --add and the name of the parameter we&#39;re adding. Again, this can be a service, port, protocol, or any of the parameters we saw when we ran list all. Let&#39;s type service=http and press Enter. When we list all we see that http is now added to the services.</p><p>This is not a persistent change. Once the system reboots or the firewall is reloaded, our changes go away. If we want to make the changes permanent, we add the --permanent parameter to the end of our command. Once added, we reload the configuration files with firewall-cmd --reload. When we list all, we see http added to the exclusions.</p><p>Summary 04:45-04:56 In this demonstration, we showed firewall technologies, firewall commands, and dynamic rule sets.</p><h2 id="_12-7-3-ip-forwarding" tabindex="-1"><a class="header-anchor" href="#_12-7-3-ip-forwarding"><span>12.7.3 IP Forwarding</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>IP Forwarding 00:00-00:16 In this demonstration, I&#39;ll go over what IP forwarding is. All the commands you&#39;ll see must be run with sudo or as the root user. First, let&#39;s verify that the firewall is running. I run sudo firewall-cmd --state.</p><p>Add a Port 00:16-01:08 So there are several reasons why we might want to configure IP port forwarding. We could be running a proxy server, trying to hide services, adding extra security, or something else entirely. For example, let&#39;s say that I want all incoming HTTPS traffic on port 443 to be forwarded to a local web server running on port 8443.</p><p>To do this, I&#39;d run sudo firewall-cmd --zone=public --add-port=8443/tcp to open the firewall port and allow the traffic. If I don&#39;t complete this step first, traffic will be forwarded but will be blocked by the firewall. So, it wouldn&#39;t matter.</p><p>Port-To-Port Forwarding 01:08-01:56 Once the port is allowed through, I can forward incoming traffic from HTTPS port 443. I run sudo firewall-cmd --zone=public --add-forward-port=port=443:proto=tcp:toport=8443 to break this command down. I&#39;m adding a forwarding port now. That port number is port 443, and the protocol that the port will use is TCP. All incoming traffic on TCP port 443 will now be forwarded with this command to port 8443 on my system.</p><p>Port Forwarding to Another Server 01:56-03:25 I can also forward traffic to another server, which could be the same port number. By forwarding traffic from my current system to another device, I&#39;m essentially configuring my current Linux system as a proxy server.</p><p>First, I need to add masquerading, which allows for this to happen. I run sudo firewall-cmd --zone=public --add-masquerade. This configures the firewall to act as a forwarder and take incoming traffic and send it to another system. Next, I issue the command, not only to forward to my port, but also to forward to another server within my internal network. The command is identical to the one above where I forwarded from one port to another on the same system.</p><p>I run sudo firewall-cmd --zone=public --add-forward-port=port=443:proto=tcp:toport=8443:toaddr=192.168.23.155 I&#39;ve just added the &quot;to address&quot; field, which tells the system that I&#39;m forwarding all incoming TCP 443 traffic to the server at 192.168.23.155 on TCP 8443.</p><p>Summary 03:25-03:37 And that&#39;s all there is to it. In this demo, I showed you how to forward ports on a Linux firewall.</p><h2 id="_12-7-4-linux-firewall-facts" tabindex="-1"><a class="header-anchor" href="#_12-7-4-linux-firewall-facts"><span>12.7.4 Linux Firewall Facts</span></a></h2><p>A firewall establishes a barrier between the internal network, which is assumed to be secure and trusted, and the external network, which is usually the internet and is not secure or trusted. Most operating systems, including Linux, offer software-based firewalls to protect networks and systems from external threats.</p><p>This lesson covers the following topics:</p><ul><li>Access control lists</li><li>Popular Linux firewalls</li><li>Other Linux firewall considerations</li></ul><h3 id="access-control-lists" tabindex="-1"><a class="header-anchor" href="#access-control-lists"><span>Access Control Lists</span></a></h3><p>ACLs are the rules a firewall uses to process IP packets. Linux firewall technologies often use different methods to organize their configuration options, but ACL concepts are still at the heart of a firewall’s design.</p>',68),e("ul",null,[e("li",null,[t(" ACLs determine whether routed packets are accepted, rejected, or dropped. "),e("ul",null,[e("li",null,"Accepted packets are forwarded on to their destinations."),e("li",null," Rejected packets are blocked, and a message is sent back to the packet’s sender. "),e("li",null,"Dropped packets are also blocked, but no message is sent.")])]),e("li",null,[t(" ACLs are stateless firewall filters. "),e("br"),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," A stateful firewall looks at traffic patterns, tunneling, and encryption to determine how to filter packets.")])])])])]),e("li",null,[t(" ACLs use the following packet characteristics to determine how to filter a packet. "),e("ul",null,[e("li",null,"Source address"),e("li",null,"Destination address"),e("li",null,"Ports"),e("li",null,"Protocols")])]),e("li",null,"ACLs can log each time they’re used to filter a packet."),e("li",null," The packets that are the target of ACLs can be captured by setting a logging option. ")],-1),a('<h3 id="popular-linux-firewalls" tabindex="-1"><a class="header-anchor" href="#popular-linux-firewalls"><span>Popular Linux Firewalls</span></a></h3><p>There are many third-party Linux firewalls, and a few of them are included in major Linux distributions. Most of them are based on Netfilter.</p><ul><li>Netfilter is part of the Linux kernel.</li><li> Netfilter is used for network address translation and port translation. </li><li> Netfilter supplies the kernel’s IP packet filtering functions, which are used by firewall applications. </li><li> Linux firewall applications interface with Netfilter to perform firewall functions. </li></ul><p>The following are popular Linux firewalls that are based on Netfilter.</p><table><thead><tr><th>Firewall</th><th>Description</th></tr></thead><tbody><tr><td>IPTables</td><td> IPTables is a firewall application that is pre-installed on most Linux distributions. <ul><li> IPTables is a rule-based front-end tool that interfaces with Netfilter to decide which packets to filter. </li><li> Internally, IPTables consists of five pre-defined tables that contain chains. <ul><li> The kernel accesses each chain at a specific point while processing an IP packet. </li><li>Each chain has its own purpose and contains rules.</li></ul></li><li> Configure an IPTables firewall by adding, deleting, and customizing the rules contained in each chain. <ul><li> For a basic firewall, only the INPUT, FORWARD, and OUTPUT chains in the filter table are modified. </li></ul></li><li> To view or list the rules in all chains, use the <b>iptables -L</b> or <b>iptables --list</b> command. </li></ul><p>IP packets are filtered according to the IPTables rules.</p><ul><li>Each chain’s rules are traversed in order.</li><li> Each rule has fields that are matched against the IP packet. <ul><li> If a match is made, the action in the rule is taken. No other rules in the chain are checked. </li><li> If the packet doesn’t match the rule, the rule is skipped, and the next rule is checked. </li><li> Normally, the last rule is configured with wildcards so that it matches any packet. In many cases, the action for the last rule is to reject the packet. </li></ul></li></ul></td></tr><tr><td>Uncomplicated Firewall</td><td> Uncomplicated Firewall (UFW) provides a user-friendly framework for managing Netfilter. <ul><li> A command line interface is provided to configure the firewall. </li><li> A few GUI tools make working with the UFW incredibly simple. <br></li></ul></td></tr><tr><td>firewalld</td><td> The firewalld firewall is pre-installed on many Linux distributions. <ul><li>firewalld is a front-end controller for IPTables.</li><li> With firewalld, the IPTables commands are still available. </li><li> firewalld has both a command line and graphical interface. </li><li> firewalld uses zones and services instead of chains and rules. <ul><li> Zones are pre-constructed rulesets for various trust levels. </li><li> Different zones allow different network services, ports, protocols, and incoming traffic types, while denying everything else. </li><li>You can apply a zone to different network interfaces.</li><li> You can configure firewalld with rules to allow traffic for specific network services. </li><li>You can add custom service rules to any zone.</li></ul></li></ul></td></tr></tbody></table><h3 id="other-linux-firewall-considerations" tabindex="-1"><a class="header-anchor" href="#other-linux-firewall-considerations"><span>Other Linux Firewall Considerations</span></a></h3><p>The following are items to consider when implementing a Linux firewall.</p><table><thead><tr><th>Firewall Consideration</th><th>Description</th></tr></thead><tbody><tr><td>IP forwarding</td><td> IP forwarding is another name for routing. It’s sometimes called kernel IP forwarding because it’s a feature of the Linux kernel. <ul><li> Enable IP forwarding by writing a 1 to the ip_forward file. <ul><li> Enable IPv4 forwarding by writing to the /proc/sys/net/ipv4/ip_forward file. </li><li> Enable IPv6 forwarding by writing to the /proc/sys/net/ipv6/ip_forward file. </li></ul></li><li> Be cautious about enabling IP forwarding without a firewall, especially if an interface connects to the internet or to a subnet you don’t control. </li></ul></td></tr><tr><td>Dynamic rule sets</td><td> Dynamic rule sets automate the rules IPTables use to filter network traffic and prevent intrusions. <ul><li> There are two popular Python scripts that are classified as intrusion prevention software, called DenyHosts and Fail2ban. </li><li> Both scripts monitor log files and react to common security problems, such as brute force attacks, by adding or modifying firewall rules. </li></ul></td></tr><tr><td>IPset</td><td> IPset is a companion application to IPTables that allows you to easily set firewall rules for a block of IP addresses. </td></tr><tr><td>/etc/services</td><td> Many firewall applications read from the /etc/services file. This file is a list of well-known services and their port assignments. When you update firewall rules, consider updating this file with new services and ports. </td></tr><tr><td>Privileged ports</td><td> The ports from 1 to 1023 are privileged ports. <ul><li>Only the root account has access to ports 1 to 1023.</li><li> Privileged ports give confidence in internal networks where only trusted individuals have passwords to the root account. </li><li> Internal firewalls may be more tolerant when passing network traffic using these ports. </li></ul></td></tr></tbody></table>',8)]))}const h=r(s,[["render",n],["__file","07.html.vue"]]),f=JSON.parse('{"path":"/12/07.html","title":"Section 12.7 Linux Firewalls","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 12.7 Linux Firewalls","description":"some description"},"headers":[{"level":2,"title":"12.7.1 Linux Firewalls","slug":"_12-7-1-linux-firewalls","link":"#_12-7-1-linux-firewalls","children":[]},{"level":2,"title":"12.7.2 Configure firewalld","slug":"_12-7-2-configure-firewalld","link":"#_12-7-2-configure-firewalld","children":[]},{"level":2,"title":"12.7.3 IP Forwarding","slug":"_12-7-3-ip-forwarding","link":"#_12-7-3-ip-forwarding","children":[]},{"level":2,"title":"12.7.4 Linux Firewall Facts","slug":"_12-7-4-linux-firewall-facts","link":"#_12-7-4-linux-firewall-facts","children":[{"level":3,"title":"Access Control Lists","slug":"access-control-lists","link":"#access-control-lists","children":[]},{"level":3,"title":"Popular Linux Firewalls","slug":"popular-linux-firewalls","link":"#popular-linux-firewalls","children":[]},{"level":3,"title":"Other Linux Firewall Considerations","slug":"other-linux-firewall-considerations","link":"#other-linux-firewall-considerations","children":[]}]}],"git":{"updatedTime":1736828265000},"filePathRelative":"12/07.md"}');export{h as comp,f as data};
