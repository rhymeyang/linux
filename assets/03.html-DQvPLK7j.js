import{_ as t,c as s,a as i,o}from"./app-1gerZY4a.js";const a={};function n(d,e){return o(),s("div",null,e[0]||(e[0]=[i('<p>As you study this section, answer the following questions:</p><ul><li>What is the difference between a hotplug device and a coldplug device?</li><li>Which types of devices are usually coldplug devices?</li><li>What is the function of the sysfs virtual file?</li><li>Where is sysfs located?</li><li>How does the system recognize when a device is added or removed?</li><li>Which utility dynamically creates device files as devices are added to the system?</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Coldplug</td><td> Devices that should only be removed or replaced when the power to the computer is off. </td></tr><tr><td>Hotplug</td><td>Devices that can be removed while the computer is on.</td></tr></tbody></table><h2 id="_9-3-1-hotplug-and-coldplug-devices" tabindex="-1"><a class="header-anchor" href="#_9-3-1-hotplug-and-coldplug-devices"><span>9.3.1 Hotplug and Coldplug Devices</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Hotplug and Coldplug Devices 00:00-00:22 In this lesson, we&#39;re going to discuss hotplug and coldplug hardware devices. Keep in mind that when you&#39;re working with PC hardware and loading Linux kernel modules, it&#39;s important to know the differences between the PC hardware that&#39;s considered coldplug and the PC hardware that&#39;s considered hotplug. Let&#39;s take a look at what the difference is between those two.</p><p>Differences Between Hotplug and Coldplug Devices 00:22-02:24 Coldplug devices can be physically connected or disconnected from the computer system only if that system is powered off. Internal components, such as your system RAM, your system CPU, and or an expansion board that&#39;s plugged into an expansion slot, are all examples of internal coldplug devices. External devices can also be coldplug devices. For example, if I have a printer that connects through a parallel port or an external SCSI hard disc drive, these are examples of coldplug external devices.</p><p>The key thing to remember about coldplug devices is that if you plug them in while the system is already running, they probably won&#39;t be detected and recognized by the system. On the other hand, if you connect them properly while the system is powered off and turn the system on, they&#39;ll probably be detected by the system. But, if you attempt to unplug them while the system is running, bad things will probably happen. In fact, you&#39;ll likely damage the component or maybe even the motherboard itself from an electrical standpoint. Other devices may be more forgiving. For example, if I were to unplug a parallel port printer from the motherboard while it was running, it probably wouldn&#39;t hurt anything, but it&#39;s still not a very good practice.</p><p>Before we go on, it&#39;s very important that you understand that there are two different types of processes that can run on a Linux system. The first type is called a kernel space process, and the second type is called a user space process. Only processes running in the kernel space—in other words, a kernel—are allowed to communicate directly with the system hardware. Kernel space processes are basically part of the kernel itself.</p><p>User space processes are the applications, services, and programs that are actually run by the end user. They&#39;re not allowed to access the system hardware directly. Instead, we provide access to the system hardware through device files in the /dev directory. If a user space process needs to access a piece of hardware in your Linux system, they do so through the appropriate device file in the /dev directory. This is how user space processes access coldplug devices.</p><p>Differences Between Hotplug and Coldplug Devices 02:24-03:23 In addition to coldplug devices, hotplug devices are designed to be connected and disconnected dynamically while the system is up and running, without any ill effects. There&#39;s software loaded on the Linux system that&#39;ll detect these changes to the system as these hotplug devices are attached and detached from the motherboard. Using this software, the system will recognize when a device is connected, and when that happens, it will automatically load the appropriate kernel modules to support those devices. The same thing will happen when the device is disconnected.</p><p>Some common hotplug devices are a USB-based printer, USB flash drive, USB-based hard disk drive, or a camera that attaches through a FireWire connection. In a standard desktop system, the hard disk drive doesn&#39;t hotplug. You can&#39;t unplug the hard disk drive and plug it back in while the system is running.</p><p>However, server systems provide hotplug storage devices, and you can add and remove hard disk drives as needed without bringing the system down. Just don&#39;t try that on a desktop system.</p><p>Hotplug Devices 03:23-04:56 This brings up a problem. Remember, the user space processes need to access the system hardware through a device file in /dev. This isn&#39;t a problem for coldplug devices because the appropriate device file is created when the system first boots up. But when we&#39;re dealing with hotplug devices, things are being plugged in and unplugged all the time. We can still access the hardware from a user space process using a device file /dev, but the process will need a little help.</p><p>There are two approaches we can take to provide access to these hotplug devices. One option would be to create a device file in /dev for every possible device that could ever be connected to the system. This would allow user space applications running on the system to access this hotplug hardware whenever they&#39;re connected to the system through the appropriate device file in /dev. This approach works, and for a time, many Linux distributions did this very thing. The problem with it is that it&#39;s also very messy because you end up with a lot of device files in /dev that you won&#39;t need.</p><p>A better approach is to dynamically create a device file in /dev whenever a hotplug device is connected to the system and then remove that device file whenever the device is disconnected. For this to work, the new hardware has to be recognized by the operating system itself. Then the appropriate device files have to be created in /dev. Any processes running on the system have to be notified, &quot;Hey, new hardware is available, and here&#39;s the device file that you can use to access it.&quot;</p><p>Hotplug Devices 04:56-06:24 In order for this to happen, several separate components are implemented in the Linux operating system. The first component is sysfs. This component provides the /sys virtual file system. Its job is to export information about the system hardware devices, both hotplug and coldplug, so that user space processes and the applications and utilities that users are running on the system can access the hardware in the system.</p><p>The second component required for this to work is the hardware abstractions layer daemon, or hald. This daemon is run automatically when the system boots up, and its job is to provide the applications that are currently running on the system with information about the hardware that&#39;s available in the system, including both hotplug and coldplug devices.</p><p>Another component required for hotplug devices to work is the desktop bus, or dbus. Dbus runs as a daemon on your Linux system, and its key job is to notify all the running processes on your system whenever a hotplug device is connected or disconnected from the system. Without this daemon, the processes running on the system would have no idea that a new hard disk drive is available on a USB port.</p><p>The fourth and final component required to support hotplug devices on a Linux system is udev, the udev daemon, or udevd. Udev is responsible for creating that virtual file system mounted at /dev. It communicates with the Linux kernel through a special interface called uevent.</p><p>udevd 06:24-07:32 Here&#39;s the key thing you need to remember, whenever a hotplug device is added or removed from the system, the kernel sends out a uevent message, and that message is picked up by udevd. When it receives this message, it performs the task you see here based upon the rules defined in the /etc/udev/rules.d directory.</p><p>The first thing it does is initialize the device. Then, it automatically creates the appropriate device file in the /dev directory. As we&#39;ve talked about, this allows the user space processes on the system to be able to access that hardware. If that new device that&#39;s been connected is a network interface, then it will configure that interface with the ifup utility.</p><p>If the new device that&#39;s been connected is a storage device—perhaps a USB flash drive—then it mounts it using the information configured in the /etc/fstab. No matter what kind of device is connected, the last step in the process is that udev will inform all of the running processes about the new device. Feel free to use it. By doing this, the Linux operating system can support both coldplug devices as well as hotplug devices.</p><p>Summary 07:32-07:48 In this lesson, we discussed the differences between hotplug and coldplug hardware devices. We also reviewed the mechanisms Linux uses to enable hotplug devices to work properly with the operating system.</p><h2 id="_9-3-2-hotplug-and-coldplug-device-facts" tabindex="-1"><a class="header-anchor" href="#_9-3-2-hotplug-and-coldplug-device-facts"><span>9.3.2 Hotplug and Coldplug Device Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>Device categories</li><li>Components to manage devices</li></ul><h3 id="device-categories" tabindex="-1"><a class="header-anchor" href="#device-categories"><span>Device Categories</span></a></h3><p>Be aware of the following device categories when managing hardware:</p><table><thead><tr><th>Category</th><th>Description</th></tr></thead><tbody><tr><td>Coldplug</td><td> Devices that are connected prior to system boot are said to be “coldplugged.” Coldplug devices should only be removed or replaced when the power to the computer is off. Attempting to remove these devices while the power is on can damage the device or the computer. <p>Coldplug devices include:</p><ul><li>RAM (Random Access Memory) chips</li><li>CPU (Central Processing Unit)</li><li> Expansion cards, such as Peripheral Component Interconnect (PCI) or PCI Express cards </li><li>Standard hard disk drives</li></ul></td></tr><tr><td>Hotplug</td><td> Hotplug devices can be removed while the computer is on. Linux uses software designed to detect these changes as the devices are added and removed. <p>Hotplug devices include:</p><ul><li>USB devices</li><li>FireWire devices</li><li>Hot-swappable hard disk drives</li></ul></td></tr></tbody></table><h3 id="components-to-manage-devices" tabindex="-1"><a class="header-anchor" href="#components-to-manage-devices"><span>Components to Manage Devices</span></a></h3><p>Linux uses the following components to manage devices:</p><table><thead><tr><th>Component</th><th>Description</th></tr></thead><tbody><tr><td>sysfs</td><td> The Linux kernel provides a virtual file system called sysfs which is mounted at <b>/sys</b> . sysfs is able to export information about hotplug devices so that other utilities can access the information. </td></tr><tr><td>Hardware Abstraction Layer (HAL) daemon</td><td> The HAL daemon (hald) provides all running processes with data about current hardware. hald runs constantly. </td></tr><tr><td>Desktop Bus (D-Bus) daemon</td><td> The D-Bus daemon notifies running processes whenever a hotplug device is connected or disconnected from the system. </td></tr><tr><td>udev</td><td> The udev system is comprised of a few kernel services and the udevd daemon. The kernel informs the udevd daemon when certain events happen and the udevd daemon is configured to respond to events with corresponding actions. The event information comes from the kernel and the actions happen in userspace. The responses to the events are configurable in &quot;rules&quot;. A udev rule can specify what name will be given to a device regardless of which port the device has been placed. This consistent naming of devices guarantees that scripts dependent on a specific device&#39;s existence will not be broken. <p> For example, the udev daemon (udevd) creates a virtual file system that is mounted at /dev. It communicates with the Linux kernel through the uevent interface. When a hotplug device is added or removed, the kernel sends out a uevent message that is picked up by udevd. </p><p> Based on the rules defined in the files in the /etc/udev/rules.d directory, udevd then: </p><ul><li>Initializes the device.</li><li> Creates the appropriate device file in the /dev directory. </li><li> Configures the device using the <b>ifup</b> utility if the new device is a network interface. </li><li> Mounts the device using the information in <b>/etc/fstab</b> if the new device is a storage device. </li><li>Informs running processes about the new device.</li></ul></td></tr><tr><td><b>udevadm</b></td><td><b>udevadm</b> is the udev management tool. It expects a command and command specific options. It also controls the runtime behavior of udev, requests kernel events, manages the event queue, and provides simple debugging mechanisms. <br><table><thead><tr><th>Commands</th><th>Description</th><th>Examples</th></tr></thead><tbody><tr><td><b>trigger <i>[options]</i></b></td><td> Request device events from the kernel. This is primarily used to replay events at system coldplug time. This can also be used to add devices. </td><td><b>udevadm trigger --action=add --subsystem-match=pci <br></b> This adds the pci subsystem. <h2>udevadm trigger --type=devices</h2></td></tr><tr><td><b>control <i>[options]</i></b></td><td> Gives you the ability to control the udev daemon. For example, rules are not re-triggered automatically on already existing devices. Hot-pluggable devices, such as USB devices, will probably have to be reconnected for the new rules to take effect. </td><td><b>udevadm control --reload-rules <br></b> This reloads the rules files. </td></tr></tbody></table></td></tr></tbody></table>',34)]))}const l=t(a,[["render",n],["__file","03.html.vue"]]),h=JSON.parse('{"path":"/09/03.html","title":"Section 9.3 Hotplug and Coldplug Devices","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 9.3 Hotplug and Coldplug Devices","description":"some description"},"headers":[{"level":2,"title":"9.3.1 Hotplug and Coldplug Devices","slug":"_9-3-1-hotplug-and-coldplug-devices","link":"#_9-3-1-hotplug-and-coldplug-devices","children":[]},{"level":2,"title":"9.3.2 Hotplug and Coldplug Device Facts","slug":"_9-3-2-hotplug-and-coldplug-device-facts","link":"#_9-3-2-hotplug-and-coldplug-device-facts","children":[{"level":3,"title":"Device Categories","slug":"device-categories","link":"#device-categories","children":[]},{"level":3,"title":"Components to Manage Devices","slug":"components-to-manage-devices","link":"#components-to-manage-devices","children":[]}]}],"git":{"updatedTime":1736670348000},"filePathRelative":"09/03.md"}');export{l as comp,h as data};
