import{_ as t,c as i,a as s,o}from"./app-DD5NhL2N.js";const r={};function a(n,e){return o(),i("div",null,e[0]||(e[0]=[s('<p>As you study this section, answer the following questions:</p><ul><li>On which types of files should you configure the SUID and SGID bits?</li><li>What is the purpose of setting the sticky bit?</li><li>Which special permissions would be set using <b>chmod 6421</b> ?</li></ul><p>In this section, you will learn to:</p><ul><li>Set or remove special permissions</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td> Set owner user ID on execution <br> (SUID) </td><td> A special type of file permission given to a file. This permission grants a user temporary permission to run a program or file with the file owner&#39;s permissions. </td></tr><tr><td> Set group ID up on execution <br> (SGID) </td><td> A special file/directory permission given to a file. This permission grants a user temporary membership to a group so he or she can execute the directory, file, program, or command. </td></tr><tr><td>Sticky bit</td><td> An attribute that marks a file or directory to prevent anyone except the file owner from executing deletion. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 4.2 Manage user and group access <ul><li>Use special permissions</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td><p>2.5 Given a scenario, apply the appropriate access controls</p><ul><li>File permissions</li><li style="list-style:none;display:inline;"><ul><li>Set user ID (SUID)</li><li>Set group ID (SGID)</li><li>Sticky but</li></ul></li><li>Command-line utilities</li><li style="list-style:none;display:inline;"><ul><li>chmod</li><li>ls</li></ul></li></ul><p> 4.4 Given a scenario, analyze and troubleshoot user access and file permissions </p><ul><li>User file access issues</li><li style="list-style:none;display:inline;"><ul><li>Permission</li></ul></li></ul></td></tr></tbody></table><h2 id="_8-12-1-special-permissions" tabindex="-1"><a class="header-anchor" href="#_8-12-1-special-permissions"><span>8.12.1 Special Permissions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Special Permissions 00:00-00:22 In this lesson, we&#39;re going to discuss special permissions. Most of the time, you&#39;ll work with the standard Read, Write, and Execute permissions on Linux. But there are other, special permissions out there that you can use as well. Just be careful when setting them because if used incorrectly, they could create a security risk.</p><p>User ID Permission 00:22-00:46 The special permissions are listed here. First is SUID , or set users ID. It can only be applied to a binary executable file, not a word processing file, a directory, or a shell script. After assigning set user ID, when a user runs a file, they temporarily become that file&#39;s owner. Remember that this permission can&#39;t be applied to a directory.</p><p>Group ID Permission 00:46-01:19 Another special permission to know is SGID , or set group ID. This permission can be applied to binary executable files or directories. If you assign the set group ID permission to an executable file and then a user runs the file, that user becomes a temporary member of the file&#39;s owning group. If you set the group permission ID to a directory, when a user creates a file, the owner is set to the user&#39;s account. However, the owning group is set to the parent directory&#39;s owning group, not the user&#39;s primary group.</p><p>Sticky Bit 01:19-01:46 The last special permission here is sticky bit. This one&#39;s only assigned to directories, not files. When it&#39;s set, it prevents the deletion of files in that directory by anyone except the file&#39;s owner. This basically negates the effect of having the Write permission on a directory. If a user has the Write permission, they could potentially delete files in a directory that they don&#39;t own. Assigning sticky bit to a directory prevents this.</p><p>Numeric Values 01:46-04:26 Now, these special permissions are referenced as an extra digit added to the beginning of a file or directory mode. The set user ID has a numeric value of 4, the set group ID has a value of 2, and sticky bit has a value of 1.</p><p>For example, suppose that we wanted to add the SUID and the set group ID permission to a file in our home directory. It&#39;s an executable file named runme. We also want the file owner to have Read and Execute permissions, so it gets a value of 5. I want the group to have Read and Execute permissions as well, so it gets a 5. Then we want other authenticated users to have only Read permissions, so they get a 4. They won&#39;t be allowed to run it.</p><p>Since SUID has a numeric value of 4 and SGID has a value of 2, when we assign both to the same file, it gets the combined value of 6 as the first number in the mode. In this example, we enter chmod 6554 runme at the shell prompt. Now that these permissions are set, the user who runs this file will temporarily become the owner. Also, because the set group ID permission is there, that user will also temporarily become a member of that file&#39;s owning group. Notice in the command output that there&#39;s now an &quot;s&quot; where there should&#39;ve been an x for both owner and group. The &quot;s&quot; for owner implies the set user ID permission, and the &quot;s&quot; for group implies the set group ID permission.</p><p>Here&#39;s another example. We granted owner and group Read, Write, and Execute permissions to the RandD directory using 7 for owner and 7 for group. Read is 4, Write is 2, and Execute is 1. So that&#39;s a sum of 7 for both owner and group. Here&#39;s the problem, assigning the Write permission to the directory allows anyone in the owning group the ability to delete any file in that directory. This is a security risk, so instead we reconfigure the directory so that the users in the owning group can still create files but are blocked from deleting files that they don&#39;t own. We do this by assigning the sticky bit permission to the RandD [R and D] directory.</p><p>Sticky bit has a value of 1, so the first number in the mode is 1, followed by Read, Write, and Execute for the user. Then there&#39;s Read, Write, and Execute for the group. And we don&#39;t want to let others to have any access to the directory because it&#39;s for Research and Development. So we assign 0 to others. Here&#39;s the result: the mode now has Read, Write, and Execute for user; Read, Write, and Execute for group; and no permissions for others. And here&#39;s a &quot;T&quot; indicating the sticky bit is set.</p><p>Summary 04:26-04:52 That&#39;s it for this lesson. In this lesson, we talked about special permissions and how they&#39;re used in the Linux file system. We looked at the set user ID permission, the set group ID permission, and then we looked at sticky bit. We ended the lesson talking about assigning these permissions to files and directories using the chmod command.</p><h2 id="_8-12-2-assigning-special-file-permissions" tabindex="-1"><a class="header-anchor" href="#_8-12-2-assigning-special-file-permissions"><span>8.12.2 Assigning Special File Permissions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Assigning Special File Permissions 00:00-00:57 In this demonstration, we&#39;re going to discuss assigning special file permissions and what ramifications this has on files and directories. Let&#39;s begin by looking at assigning the SUID and SGID special permissions to a file.</p><p>I&#39;m currently logged into this system as my admin user, and I&#39;m in his /home directory. When I run the ls -l runme command, we can see that admin is the file&#39;s owner and has read/write permissions to the file. The owning group, which is users, is also assigned read/write permissions to the file. The other authenticated users are only assigned read access.</p><p>When I run cat runme, you see that it is a simple script that displays a single line of text on the screen that says, Hello World!. However, when I try to run this file, it gives me an error, saying, Permission denied. That&#39;s because the execute permission hasn&#39;t been assigned to anyone for this file.</p><p>Set the SUID and SGID Special Permissions 00:57-03:43 To fix that, I want to make this file readable, writable, and executable by the owner and group. We&#39;re not going to worry about others; we&#39;ll just leave them with their default read permission for now.</p><p>To do that, I&#39;m going to add the SUID and the SGID special permissions. This will cause any user who runs this executable file to temporarily become that file&#39;s owner and a member of this file&#39;s owning group, which is users. These two special permissions are added by adding an extra digit to the beginning of the file&#39;s mode. It works the same way with a directory.</p><p>Before we do this, I need to run su - first, to switch to my root user account. Next, I need to get back into the admin&#39;s home directory, so I&#39;ll run cd /home/admin and press Enter. To determine the values to use for our extra digit, you have to know that SUID has a value of 4, and SGID has a value of 2. When you add those two values together, you get 6.</p><p>To make the actual assignment, I&#39;ll run chmod, just like we would when making any changes to the permission, and then enter the value for our SUID and SGID bit, which is 6. For the rest of the mode that we want to assign to the file, let&#39;s assign 7 for the owner, which will grant read (4), write (2), and execute (1), for a total of 7.</p><p>Next, we&#39;ll assign the same permissions to the group, and we&#39;ll leave others with just read access to the file, which is a 4. Then we need to specify the name of the file, which is runme, and then press Enter.</p><p>Let&#39;s run ls -l runme again and see what changed. Notice, over here, we have rws permissions assigned to the file&#39;s owner. Notice that the s replaced the x that would normally be there if we made this file executable. This indicates that the SUID special permission has been assigned. Even though you can&#39;t see the X, the file is still executable. It will run, but it will run using the SUID special permissions. Likewise, an S has replaced the X in the group portion of the mode, again indicating that the SGID special permission has been assigned.</p><p>At this point, I can type ./runme, and press Enter, and the command is executed. When the command runs, the SUID and SGID special permissions are applied. That doesn&#39;t make any difference for this file because admin is currently the file owner and a member of the users group. However, if I had logged in as a different user account and ran the script, then that user would have temporarily become this file&#39;s owner while it was running, and that user would have temporarily become a member of the users group because of the SUID and SGID permissions that were enabled on this file.</p><p>Set the Sticky Bit Permissions 03:43-08:38 Let&#39;s shift gears and look at how to set the sticky bit permissions. For this example, we&#39;re going to set the sticky bit permission on a directory. The sticky bit permission has a very important use. When it&#39;s enabled on a directory, users are only allowed to delete files they own within a directory. If they&#39;re not the file&#39;s owner, they aren&#39;t allowed to delete the file. As you can imagine, that&#39;s usually a pretty good idea.</p><p>Currently, we have a shared directory defined on this system. Let&#39;s change to the directory by running cd /mnt/shared. When I run ls -l, we see that within the /shared directory, there&#39;s another directory named RandD.</p><p>When you look at the permissions currently assigned to this directory, you see that the directory&#39;s owner has read, write, and execute permissions. This allows the owner, admin, to list file contents, enter the directory, and add or delete files to the directory. Members of the RandD group have the same permissions, while other authenticated users have no access to the folder at all. Also, when I run the tail /etc/group command, we see that the admin and the zoey user accounts are both members of the RandD group, which is the owning group for the RandD folder.</p><p>Because of the mode that&#39;s been assigned to the RandD directory, either user—admin or zoey—is allowed to delete any file they want within the RandD directory. This has some negative ramifications. To see why, let&#39;s run exit to get out of the root account, and then run cd /mnt/shared/RandD so that I can create a file in this directory using my admin account.</p><p>To create a new file, I&#39;ll run touch testfile. This creates an empty file in the file system. By running ls -l, we see that the owner of the file is admin, and my default group named admin is the owning group for this file. We also see that I have read/write access, and the group has read/write access. All other authenticated users have only read access to the file.</p><p>If you only look at the permissions for this file, it would look like only the admin user would be able to delete it, since he is also the only member of the admin group. But watch what happens. I&#39;m going to run su zoey to switch to her account and provide her password. Notice that I&#39;m still in the RandD directory. When I run ls, I can see the testfile. When I run rm testfile, I&#39;m asked if I want to delete the file. When I say yes, it&#39;s gone.</p><p>The reason Zoey was able to delete the file is because she&#39;s a member of the RandD group, and the RandD group has read, write, and execute access to the RandD folder. Even though zoey was not the file&#39;s owner and was not a member of the owning group of the file, zoey was still able to delete that file.</p><p>You can imagine this could be messy in a shared folder situation if you have somebody who likes things really tidy and starts cleaning up everybody&#39;s files. You could lose a lot of data. You can avoid this situation by enabling the sticky bit on the parent directory of these files. When you do that, only the user who owns a file is allowed to delete that file.</p><p>To see this work, I need to run exit to get back to my account, and then su to switch to root. Notice that I&#39;m still in the RandD directory, so to set the sticky bit on that folder, I&#39;ll run cd .. to move up one directory. Next, I&#39;ll run ls -l to view the current mode of the RandD folder.</p><p>Now, to set the sticky bit, I need to run chmod. Then, just as before, we add a special permission to the mode of the RandD directory by adding an extra digit at the beginning of the mode. In this case, we want to add a 1, which is the value needed to set the sticky bit.</p><p>To leave the rest of the mode the way it is, I&#39;ll enter 770 and the name of the directory we&#39;re changing. The first 7 gives the directory owner all rights, and the second 7 gives the owning group all rights. The 0 removes all rights for all other authorized users. Now, when I press Enter and then run ls -l, notice that the letter T has been assigned over here. The T tells us that the sticky bit has been enabled.</p><p>Let&#39;s verify that it&#39;s actually doing what it&#39;s supposed to do. To do that, I&#39;m going to run exit to get out of the root account.I&#39;m back in admin, in the RandD directory. Let&#39;s run touch again to create a file named newfile. I&#39;ll run the ls -l command again, and we see that our new file has the same permissions as the first file that we created in this directory.</p><p>But now, let&#39;s switch to the zoey user and try to delete that file. To do that, I&#39;ll run rm newfile and press Enter. As before, I&#39;m asked to confirm the deletion of the file. But after typing Y, I&#39;m told this operation is not permitted. That&#39;s because with the sticky bit set on the RandD directory, only the file&#39;s owner is allowed to delete the file.</p><p>Summary 08:38-08:58 That&#39;s it for this demonstration. In this demo, we talked about configuring special permissions. First, we covered how to set the SUID and SGID special permissions on a file in the file system. Then we configured the sticky bit permission on a directory in the file system.</p><h2 id="_8-12-3-special-permission-facts" tabindex="-1"><a class="header-anchor" href="#_8-12-3-special-permission-facts"><span>8.12.3 Special Permission Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>About special permissions</li><li>Manage special permissions</li></ul><h3 id="about-special-permissions" tabindex="-1"><a class="header-anchor" href="#about-special-permissions"><span>About Special Permissions</span></a></h3><p>Be aware of the following special permissions:</p><table><thead><tr><th>Permission</th><th>Letter Abbreviation</th><th>Example</th><th>Octal Value</th><th>Description</th></tr></thead><tbody><tr><td>SUID (Set User ID)</td><td><b> s </b> in the execute permission position of the user permissions </td><td>rw <b style="color:#ff0000;"> s </b> rw-rw-</td><td>4</td><td> If the SUID bit is set, the program will run with the permissions of the file owner, not with the permissions of the user who runs the program. <ul><li> The most common use of SUID is to allow users to run a command as the root user. </li><li> Users do not become the root user, but rather the command or program runs as if executed by the root user. </li><li> Some programs require the SUID bit to be set for proper functionality. </li><li> Be careful in setting the SUID bit, as it could give a program too many permissions. </li></ul></td></tr><tr><td>SGID (Set Group ID)</td><td><b> s </b> in the execute permission position of the group permissions </td><td>rwxrw <b style="color:#ff0000;"> s </b> rw-</td><td>2</td><td> If the SGID bit is set: <ul><li> On a file: the program will run with the group permissions of the group owner. </li><li> On a directory: a newly created file will receive/inherit the same group owner as assigned to the parent directory. </li></ul></td></tr><tr><td>Sticky bit</td><td><b> t </b> in the execute permission position of the other permissions </td><td>rwxrw-rw <b style="color:#ff0000;"> t </b></td><td>1</td><td> This marks the file in such a way as to prevent the file&#39;s deletion from the system by anyone except the file owner. Setting the sticky bit works particularly well with shared files. <p>Sticky bits can also be set on directories.</p></td></tr></tbody></table><h3 id="manage-special-permissions" tabindex="-1"><a class="header-anchor" href="#manage-special-permissions"><span>Manage Special Permissions</span></a></h3><p>Use the following commands when managing special permissions:</p><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><strong> ls -l </strong></td><td> Displays a long file listing. A long file listing shows the permissions for the files (among other information). </td><td><h2>drwsr-xr-x</h2><p> (This is a script with 4755 as its mode and has the SUID set.) </p></td></tr><tr><td><strong> chmod </strong></td><td> Assigns a special permission. Be aware of the following syntax options: <ul><li><b><i> [decimal_value] </i></b> sets the permissions for the file according to the numbers represented for each mode category. <ul><li> The special permission <i> precedes </i> the standard octal representation of a set of permissions. </li><li> Only the <i> first </i> number changes to identify the special permission group settings. </li></ul></li><li><b><i> [category] </i></b> + <b><i> [permission] </i></b> adds a special permission for a user, group, or category to a file. </li><li><b><i> [category] </i></b> - <b><i> [permission] </i></b> removes a special permission for a user, group, or category from a file. </li></ul></td><td><b> chmod 4 <i> xxx </i></b> sets the SUID. <b><br> chmod u+s </b> sets the SUID. <b><br> chmod u-s </b> removes the SUID. <b><br> chmod 2 <i> xxx </i></b> sets the SGID. <br><b> chmod g+s </b> sets the SGID. <br><b> chmod 1 <i> xxx </i></b> sets the sticky bit. <br><b> chmod u+t </b> sets the sticky bit. <br><b> chmod u-t </b> removes the sticky bit. <br><b> chmod 6 <i> xxx </i></b> sets both the SUID and SGID. <br><b> chmod 7 <i> xxx </i></b> sets the SUID, SGID, and sticky bit. </td></tr></tbody></table>',55)]))}const l=t(r,[["render",a],["__file","12.html.vue"]]),d=JSON.parse('{"path":"/08/12.html","title":"Section 8.12 Special Permissions","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 8.12 Special Permissions","description":"some description"},"headers":[{"level":2,"title":"8.12.1 Special Permissions","slug":"_8-12-1-special-permissions","link":"#_8-12-1-special-permissions","children":[]},{"level":2,"title":"8.12.2 Assigning Special File Permissions","slug":"_8-12-2-assigning-special-file-permissions","link":"#_8-12-2-assigning-special-file-permissions","children":[]},{"level":2,"title":"8.12.3 Special Permission Facts","slug":"_8-12-3-special-permission-facts","link":"#_8-12-3-special-permission-facts","children":[{"level":3,"title":"About Special Permissions","slug":"about-special-permissions","link":"#about-special-permissions","children":[]},{"level":3,"title":"Manage Special Permissions","slug":"manage-special-permissions","link":"#manage-special-permissions","children":[]}]}],"git":{"updatedTime":1736669805000},"filePathRelative":"08/12.md"}');export{l as comp,d as data};
