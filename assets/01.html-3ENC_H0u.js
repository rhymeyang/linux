import{_ as o,c as a,a as r,b as e,d as t,o as s}from"./app-CsWvKd9L.js";const n={};function l(d,i){return s(),a("div",null,i[0]||(i[0]=[r('<p>As you study this section, answer the following questions:</p><ul><li>How are device drivers implemented on a Linux system?</li><li>Why are some device drivers not compiled into the kernel?</li><li>Which directories contain information about the hardware that is installed on the computer?</li><li>How would you use the <b class="fw-bold">hwinfo</b> utility to display information about all the hardware in the computer?</li><li>Which extension identifies a kernel module?</li><li>What type of information is stored in /proc/cmdline?</li><li>Which utility will display information about the PCI devices on the system?</li></ul><p>In this section, you will learn to:</p><ul><li>View hardware information</li><li>View /proc Information</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Device driver</td><td> A software component that allows a hardware device to communicate with the operating system of a computer. </td></tr><tr><td>Bluetooth</td><td> A short-range wireless communication technology that is able to operate without needing a direct line of sight between devices. </td></tr><tr><td> Wireless Fidelity <br> (WiFi) </td><td> A technology that uses radio waves to provide network connectivity. </td></tr><tr><td> Universal Serial Bus <br> (USB) </td><td> A plug-and-play interface that allows a computer to communicate with peripheral and other devices. </td></tr><tr><td> General Purpose Input Output <br> (GPIO) </td><td> A type of pin found on an integrated circuit that does not have a specific function. </td></tr><tr><td>Network adapters</td><td> A network adapter (also called a network interface card or NIC) that connects a host to the network medium. </td></tr><tr><td> Peripheral Component Interconnect <br> (PCI) </td><td> A standard for connecting computers and their peripherals; any piece of computer hardware that plugs directly into a PCI slot on a computer&#39;s motherboard. </td></tr><tr><td> Host bus adapter <br> (HBA) </td><td> A hardware device such as a circuit board or integrated circuit adapter that provides I/O processing and physical connectivity between a host system, such as a server, and a storage device. </td></tr><tr><td> Serial ATA <br> (SATA) </td><td> A computer bus interface that connects host bus adapters to mass storage devices such as hard disk drives, optical drives, and solid-state drives. </td></tr><tr><td> Small Computer System Interface <br> (SCSI) </td><td> A set of standards for physically connecting and transferring data between computers and peripheral devices. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 1.4 Manage system processes <br><ul><li>Monitor and manage running processes</li><li>Manage kernel modules</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.1 Summarize Linux fundamentals <br><ul><li>Filesystem Hierarchy Standard (FHS)</li><li style="list-style:none;display:inline;"><ul><li>/proc</li><li>/sys</li></ul></li><li>Device types in /dev</li><li>Listing hardware information</li><ul><li>lspci</li><li>lsusb</li><li>dmidecode</li></ul></ul><p>1.7 Given a scenario, manage software configurations</p><ul><li>Configure kernel options</li><ul><li>Modules</li></ul></ul><p> 4.3 Given a scenario, analyze and troubleshoot central processing unit (CPU) and memory issues </p><ul><li>Hardware</li><ul><li>lscpu</li><li>lsmem</li><li>/proc/cpuinfo</li><li>/proc/meminfo</li></ul></ul></td></tr></tbody></table><h2 id="_9-1-1-device-drivers" tabindex="-1"><a class="header-anchor" href="#_9-1-1-device-drivers"><span>9.1.1 Device Drivers</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Device Drivers 00:00-00:29 In this lesson, we&#39;re going to talk about device drivers. Since you&#39;ll be responsible for managing Linux systems, it&#39;s important that you understand how device drivers work within the operating system. The key thing to understand is that the CPU on your motherboard doesn&#39;t natively know how to communicate with the other hardware devices that are connected to your system. The CPU needs instructions in the form of software to tell it how to communicate with all these various devices.</p><p>Device Driver Types 00:29-01:17 For some simple devices—like your system clock, keyboard, and so on—basic drivers can be stored on a motherboard chip. When the system boots up, these drivers can be loaded right from the motherboard into memory.</p><p>If you&#39;re dealing with more complex devices—maybe a network card or a storage device—the software needed for the CPU to communicate can&#39;t really be stored on a motherboard chip. The problem is that there are so many different makes and models that it&#39;s completely infeasible to try to store all the software there. Instead, what we do is store the software on the system&#39;s hard drive.</p><p>As the system boots, the operating system loads the software driver from the hard disk into system memory. Once that&#39;s done, the CPU has all the information it needs to communicate with the hardware—in this example, a network card.</p><p>Kernel Modules 01:17-02:24 It&#39;s important to know that there are two different ways that Linux can implement a device driver for a particular piece of hardware. One option is to load the driver as a kernel module. Once the Linux kernel itself has been loaded into memory during the boot process, it can then be configured to load kernel modules.</p><p>Kernel modules are basically drivers that allow the CPU in the operating system to communicate with other hardware that&#39;s installed in the system. Kernel modules have either a .ko or .o extension. They&#39;re stored within the path that you see here—/lib/modules—followed by your kernel&#39;s version number.</p><p>Within that directory, there&#39;s a subdirectory called kernel. Within that directory, there&#39;s another subdirectory called drivers. And within the drivers subdirectory, we see several other subdirectories that each contain kernel modules for hardware devices. This is where the device drivers are stored. For example, the kernel modules that are needed to support SATA storage devices are located in this folder right here—called the /ata directory. But this isn&#39;t the only way that drivers can be loaded onto a Linux system.</p><p>Compiling Drivers into the Kernel 02:24-04:14 A second way is to actually compile the drivers themselves directly into the Linux kernel. Instead of loading a kernel module externally after the system boots, we take the device drivers themselves and integrate them directly into the Linux kernel. Because they&#39;re in the kernel, there&#39;s no need to load them at system boot. Understand that doing this requires that you manually recompile the kernel itself from its source code.</p><p>If you do, you need to specify which drivers you want directly integrated within the kernel during the recompiling process. At first glance, this probably sounds like a great way to do things, and this is a good strategy for some drivers. But as a general rule, you should limit the drivers compiled into the kernel to only those that the system needs to initially boot up. Maybe you have a special keyboard driver, or you need a driver for your storage devices. The rest should be loaded as kernel modules and not compiled into the kernel itself.</p><p>There are a couple of good reasons for doing things this way. First of all, each driver that you compile into the kernel, obviously increases its overall size. To keep things running fast, you should try to keep your kernel as lean and clean as possible.</p><p>Secondly, recompiling a kernel is quite complex. It requires a lot of in-depth knowledge about the hardware that you&#39;re going to be integrating. You need to know what each configuration element provides. If you don&#39;t know what you&#39;re doing, it&#39;s not going to work.</p><p>By loading device drivers as kernel modules at system boot, I can add or remove support from the hardware devices very quickly. It&#39;s very easy to do. I can even do it from the command line. If I compile all the drivers directly into the kernel, what&#39;s going to result after a couple of years is a very bloated kernel that contains support for hardware that&#39;s no longer in the system. Essentially, kernel modules make your system much more dynamic.</p><p>Summary 04:14-04:31 Okay, that&#39;s it for this lesson. In this lesson, we discussed the role of device drivers in a Linux system. First, we looked at kernel modules. Then we looked at device drivers that are directly compiled into the kernel itself.</p><h2 id="_9-1-2-device-types-facts" tabindex="-1"><a class="header-anchor" href="#_9-1-2-device-types-facts"><span>9.1.2 Device Types Facts</span></a></h2><p>This lesson covers Linux device types.</p><h3 id="linux-device-types" tabindex="-1"><a class="header-anchor" href="#linux-device-types"><span>Linux Device Types</span></a></h3><p>Linux systems have the capacity to use many types of devices. The table below lists some of these devices and outlines their basic features and purpose.</p><table><thead><tr><th>Device Type</th><th>Description</th></tr></thead><tbody><tr><td>Bluetooth</td><td> A short-range wireless communication technology, able to operate without needing a direct line of sight between devices. For example, Bluetooth can function though some obstructions, such as thin walls. Bluetooth devices communicate using what&#39;s called a personal area network, or PAN. Which is similar to an ad hoc wireless network. However, with a PAN, you have a single device called the master device that all other devices, called slaves, connect to. Slaves communicate through the master device and set up directly with each other. </td></tr><tr><td>Wi-Fi</td><td> Wi-Fi (wireless fidelity) is a technology that uses radio waves to provide network connectivity. A Wi-Fi connection is established using a wireless adapter to create hotspots (areas in the vicinity of a wireless router that are connected to the network and allow users to access internet services). </td></tr><tr><td>USB</td><td> The Universal Serial Bus (USB), is the most commonly used connection interface for peripheral devices. Keyboards, mice, external hard drives, printers, and scanners are all peripheral devices that connect to a computer using a USB connection. USB devices typically have a higher throughput than Bluetooth. </td></tr><tr><td>Monitors</td><td> A computer&#39;s primary output device is its display or monitor. Videos, photos, emails, web pages, and practically everything the computer processes is eventually output on the monitor. </td></tr><tr><td>GPIO</td><td> GPIO (General Purpose Input-Output) is a type of pin found on an integrated circuit that does not have a specific function. The pins on most integrated circuits have a dedicated purpose, such as sending a signal to a certain component. However, the function of a GPIO pin is customizable and can be controlled by software. Linux developers are familiar with GPIOs and use them when working with embedded and custom hardware. </td></tr><tr><td>Network adapters</td><td> A network adapter (also called a network interface card or NIC) connects a host to the network medium. The network adapter is responsible for converting binary data into a format to be sent on the network medium. </td></tr><tr><td>PCI</td><td> PCI stands for Peripheral Component Interconnect. A PCI device is any piece of computer hardware that plugs directly into a PCI slot on a computer&#39;s motherboard. A computer bus is a channel or path between the components in a computer. The PCI bus is not as fast as the system bus. Its primary purpose is to facilitate communication of hardware devices of all types, such as audio, video, network or graphics with the microprocessor. </td></tr><tr><td>HBA</td><td> A host bus adapter (HBA) is a hardware device, such as a circuit board or integrated circuit adapter, that provides I/O processing and physical connectivity between a host system, such as a server, and a storage device. </td></tr><tr><td>SATA</td><td> Serial ATA (SATA) is a computer bus interface that connects host bus adapters to mass storage devices such as hard disk drives, optical drives, and solid-state drives. Serial ATA succeeded the earlier Parallel ATA (PATA) standard to become the predominant interface for storage devices. </td></tr><tr><td>SCSI</td><td> Small Computer System Interface (SCSI), is a set of standards for physically connecting and transferring data between computers and peripheral devices. SCSI is most commonly used for hard disk drives and tape drives, but it can connect a wide range of other devices, including scanners and CD drives, although not all controllers can handle all devices. </td></tr><tr><td>Printers</td><td> A printer is a peripheral device which accept text and graphic output from a computer and transfer that onto a piece of paper. </td></tr><tr><td>Video</td><td> Video is an electronic medium for the recording, copying, playback, broadcasting, and display of moving visual media. A video device is anything that accomplishes this task, such as a camera. To capture and display video normally requires having some type of video card or device designed for this purpose installed in the computer. </td></tr><tr><td>Audio</td><td> Audio is another name for sound. Audio devices let you capture, save, and play back sound. A soundcard is an example of an audio device. Advanced Linux Sound Architecture (ALSA) is a software framework and part of the Linux kernel that provides an application programming interface (API) for sound card device drivers. </td></tr><tr><td>Client devices</td><td> A client is a computer or a program that, as part of its operation, relies on sending a request to another program or to hardware or software that accesses a service made available by a server (which may or may not be located on another computer). For example, web browsers are clients that connect to web servers and retrieve web pages for display. </td></tr></tbody></table><h2 id="_9-1-3-system-hardware-information" tabindex="-1"><a class="header-anchor" href="#_9-1-3-system-hardware-information"><span>9.1.3 System Hardware Information</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>System Hardware Information 00:00-00:16 A key skill that you need to have as a Linux system administrator is knowing how to view information about the currently installed hardware in your system. In this lesson, we&#39;re going to look at various tools that you can use to do this.</p><p>/proc 00:16-01:09 One of the best tools for looking at hardware information is the /proc directory. The /proc directory not only allows us to see detailed information about running processes, but it also contains text files that give us some great information about our currently installed hardware. One thing to always remember with the /proc directory is that it&#39;s dynamically created whenever you access it.</p><p>When we open the /proc directory, we see all these subdirectories. These text files are what contains our hardware information. We can use cat or any other text editor to open these files up and see more detailed hardware information. For example, if we open cpuinfo here, we can see which type of processor is installed and all the information on the CPU. Taking the time to view these files will give you a good grasp on the inner workings of your system.</p><p>/sys 01:09-02:43 In addition to the /proc directory, there&#39;s another directory within your Linux file system named /sys, and it also provides information about installed hardware. The file system within /sys is actually organized into a kind of tree structure that&#39;s grouped by the hardware bus, the hardware devices, and their associated drivers.</p><p>The top level of the /sys directory is shown here, and it contains subdirectories as well. For example, the /sys/block directory contains a symbolic link file for each block device in the system. /sys/bus contains a directory for each data bus in the system, like your PCI or USB bus. The /sys/class directory contains a listing of all device classes. The /sys/devices directory contains an entry for every hardware device that&#39;s been discovered on the system. And there&#39;s also a directory here called /sys/module, which contains a subdirectory for each module that&#39;s currently loaded into the kernel.</p><p>In addition to the /proc and /sys directories, most Linux distributions also provide a wide variety of command line tools that you can use to view information about system hardware. Many of these tools simply pull the data from the /proc directory and just make it easier to find and read the data you&#39;re looking for. You&#39;ll find that some of these tools may not be installed by default with your Linux distribution, but they can all be easily installed from the appropriate repository.</p><p>hdparm 02:43-03:11 The first utility is the hdparm command, which displays information about your hard disk drive. The syntax is to enter hdparm and then specify which hard disk device file you want to view information about. You&#39;d replace this with something like sda or sdb. And when you do, data about that device is displayed on the screen. In this case, I&#39;m looking at information about the sdb hard disk drive.</p><p>sg_scan 03:11-03:25 The next utility you need to be familiar with is the sg_scan utility. It scans your SCSI buses and lists all the devices that are connected to your SCSI controllers.</p><p>sginfo –l 03:25-03:33 Similarly, there&#39;s the sginfo -l command. It&#39;s also used to display information about all SCSI devices.</p><p>lsusb 03:33-04:03 Next up is the lsusb command. It displays information about all the USB devices that are currently connected to your system. When you run the command, you can see a listing of all your USB buses and all of the devices that are connected to that bus. In this example, I can see that I have two different USB buses. I have Bus 1 and I have Bus 2. On Bus 1, all I have is a root hub. On Bus 2, I have a root hub and another USB hub, along with a mouse.</p><p>hwinfo 04:03-04:38 Another useful tool is the hwinfo utility. It displays a comprehensive overview of all your system hardware. This probes the system hardware and then generate a report. An example of this is shown here. If you don&#39;t specify any options, it&#39;ll produce a very long report. What we usually do is limit the report to a single device subsystem using the --device option. You can replace &quot;device&quot; with a variety of different things. You just need to go look at the hwinfo man page to see which syntax to use for a particular type of device.</p><p>lspci 04:38-04:58 The last command we&#39;re going to look at here is lspci. This lists all the PCI devices installed with the system. When you use the -k option, the lspci command also lists the kernel modules associated with each PCI device. You can see an example of that here.</p><p>Summary 04:58-05:27 That&#39;s it for this lesson. In this lesson, we reviewed the various resources that you can use to view information about the hardware installed on a Linux system. We first looked at the /sys and /proc directories, both of which contain files and subdirectories that we can view to find detailed information about hardware. Then we went over several command line utilities that we can use to view system hardware information as well.</p><h2 id="_9-1-4-viewing-hardware-information" tabindex="-1"><a class="header-anchor" href="#_9-1-4-viewing-hardware-information"><span>9.1.4 Viewing Hardware Information</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Viewing Hardware Information 00:00-00:10 In this demonstration, we will look at several of the common ways of viewing information about the hardware of a Linux system.</p><p>Listing CPU and Memory 00:10-00:35 The lscpu command prints to the console various properties of the system&#39;s CPU, for example its architecture and model name.</p><p>The lsmem command prints to the console a summary of the system&#39;s primary memory.</p><p>We can also get similar information from the &quot;proc&quot; pseudo-filesystem, for example cat /proc/cpuinfo for the CPU, and cat /proc/meminfo for memory.</p><p>Listing Peripheral Devices 00:35-00:52 The lspci command lists devices connected to the system using the PCI bus. This includes, for example, the devices responsible for graphics, audio, networking, and the root USB controller.</p><p>We can also use lsusb to list devices connected to the system through USB.</p><p>Listing General Hardware Information 00:52-01:28 The lshw command prints an aggregate summary of all hardware available to the kernel, including CPU, memory, PCI and USB devices, as well as other devices such as SATA, special inputs like power buttons, and the motherboard itself. For the most accurate results, lshw should be run with elevated privileges.</p><p>The dmidecode command also prints general information about hardware available through from the BIOS. The exact scope and details available through this command vary according to BIOS manufacturer. dmidecode must be run with elevated privileges.</p><p>Listing Storage Devices and Storage Device Information 01:28-02:23 The lsblk command lists all &quot;block storage&quot; devices such as hard drives, SSD&#39;s, optical drives, and portable storage media. The blkid command can give more information about a given block storage device. For example, sudo blkid -i /dev/sda will give I/O statistics about the device /dev/sda.</p><p>The lsscsi command in the lsscsi package lists devices – typically block storage devices – connected to the system through the SCSI interface, or other devices that may be identified with the Linux SCSI subsystem. In our case, the command lists a few ATA devices.</p><p>The fsstat command in the sleuthkit package can be used to probe information about the filesystem on a partition. For example, we can use sudo fsstat /dev/sda3 | less to examine the root filesystem.</p><p>Summary 02:23-02:34 That&#39;s it for this demonstration. This has been a quick overview of several utilities for viewing hardware information on Linux.</p><h2 id="_9-1-5-device-driver-facts" tabindex="-1"><a class="header-anchor" href="#_9-1-5-device-driver-facts"><span>9.1.5 Device Driver Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>Implement device drivers</li><li>Driver information</li><li>Linux driver utilities</li></ul><h3 id="implement-device-drivers" tabindex="-1"><a class="header-anchor" href="#implement-device-drivers"><span>Implement Device Drivers</span></a></h3><p>A device driver is a software component that allows a hardware device to communicate with the operating system of a computer. Drivers allow an operating system to correctly interpret and implement the signals that come from the hardware device. The following table describes the two methods Linux uses to implement device drivers:</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>Loaded as a kernel module</td><td> A kernel <i>module</i> is software that the kernel accesses only when it is needed. When in use, modules run as if they were part of the kernel and have the same access rights. Modules: <ul><li>Have an .o or .ko extension.</li><li> Are stored in the <b>/lib/modules/ <i>kernel_version</i> /kernel/drivers/<i>driver_name</i></b> directory. </li><li>Are linked and unlinked dynamically.</li></ul></td></tr><tr><td>Compiled into the kernel</td><td> When the drivers are compiled into the kernel, they&#39;re integrated into the kernel build when the kernel is recompiled. This method requires an administrator to recompile the kernel. Drivers compiled into the kernel: <ul><li>Increase the size and complexity of the kernel.</li><li>Require considerable configuration expertise.</li><li>Consume additional computer resources.</li><li> Should be limited to the hardware needed to boot the computer, such as drivers for the keyboard, mouse, and disk drive. </li></ul></td></tr></tbody></table><h3 id="driver-information" tabindex="-1"><a class="header-anchor" href="#driver-information"><span>Driver Information</span></a></h3><p>The following directories contain information about the hardware that is installed on the computer:</p><table><thead><tr><th>Directory</th><th>Contents</th></tr></thead><tbody><tr><td><b>/proc</b></td><td> The <b>/proc</b> directory contains information about the system state and processes. Its contents are created dynamically. Files and directories found in the <b>/proc</b> directory are: <ul><li><b>cmdline</b> contains the boot options that were given to the kernel at boot time. </li><li><b>cpuinfo</b> contains information about the computer&#39;s CPU. </li><li><b>devices</b> contains a list of hardware installed on the computer. </li><li><b>dma</b> contains all the direct memory access assignments for the computer. Direct memory access gives hardware devices direct access to the computer&#39;s memory independent of the CPU. </li><li><b>interrupts</b> lists the interrupt request (IRQ) channels the computer uses. Interrupt requests are signals sent to the CPU that inform it that it needs to process input from a hardware device. </li><li><b>iomem</b> contains a mapping of the memory allocated to each device and the input/output port assignments for the memory. </li><li><b>modules</b> lists the kernel modules that the computer is currently using. </li><li><b>version</b> gives information about the current kernel version. </li><li><b>meminfo</b> displays detailed memory information on the system. </li><li><b>/scsi</b> contains a file or directory for each SCSI device attached to the computer. </li><li><b>/bus</b> contains a file or directory for each USB device attached to the computer. </li><li><b>/ide</b> contains a file for the IDE devices attached to the computer, including the internal hard drives and other devices that attach to an IDE ribbon. </li></ul><h2>/proc</h2><ul><li> Use the <b>cat</b> command (or other text viewing utilities) to view files in the <b>/proc</b> directory and subdirectories. </li><li> Do not use <b>vi</b> to view or modify files in the <b>/proc</b> directory. Instead, use the <b>echo</b> command to redirect commands to the appropriate files or commands. </li></ul></td></tr><tr><td><b>/sys</b></td><td> The <b>/sys</b> directory displays information about devices and drivers. The following directories are found in the <b>/sys</b> directory: <ul><li><b>/block</b> has an entry for each block device on the computer. Block devices include flash drives and hard disk drives. </li><li><b>/bus</b> holds a subdirectory for SCSI, USB, PCI, and ISA devices. Each of these subdirectories has an additional directory for devices and drivers that has information for each device and driver in the category. </li><li><b>/class</b> has files for each class of devices on the computer. </li><li><b>/devices</b> lists every device that has been discovered on the computer. The directory hierarchy places each device beneath the device to which it is connected. </li><li><b>/module</b> has a subdirectory for each kernel module installed on the computer. </li></ul></td></tr></tbody></table><h3 id="linux-driver-utilities" tabindex="-1"><a class="header-anchor" href="#linux-driver-utilities"><span>Linux Driver Utilities</span></a></h3><p>Linux includes several utilities that provide extensive information about your hardware configuration, including:</p>',68),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Command"),e("th",null,"Function"),e("th",null,"Examples")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",null,"lsusb")]),e("td",null,[t(" Displays information on all USB devices connected to the computer. This utility uses the following options: "),e("ul",null,[e("li",null,[e("b",null,"-v"),t(" shows exhaustive information.")]),e("li",null,[e("b",null,"-s"),t(),e("i",null,"bus_name"),t(" shows information for a specific bus. ")]),e("li",null,[e("b",null,"-t"),t(" displays the USB device hierarchy as a tree.")])])]),e("td",null,[e("b",null,"lsusb -v"),t(" shows all information about each USB device on the computer. ")])]),e("tr",null,[e("td",null,[e("b",null,"hwinfo")]),e("td",null,[t(" Displays information about hardware on the computer. Be aware of the following options: "),e("ul",null,[e("li",null,[e("b",null,[t("-- "),e("i",null,"hardware_item_name")]),t(" probes for a specific hardware item. Common hardware names include: "),e("ul",null,[e("li",null,[e("b",null,"bluetooth")]),e("li",null,[e("b",null,"camera")]),e("li",null,[e("b",null,"cdrom")]),e("li",null,[e("b",null,"cpu")]),e("li",null,[e("b",null,"disk")]),e("li",null,[e("b",null,"dsl")]),e("li",null,[e("b",null,"monitor")]),e("li",null,[e("b",null,"mouse")]),e("li",null,[e("b",null,"keyboard")]),e("li",null,[e("b",null,"usb")])])]),e("li",null,[e("b",null,"--short"),t(" shows an abbreviated list of information. ")]),e("li",null,[e("b",null,"--listmd"),t(" displays RAID devices.")])]),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," Not all distributions include the hwinfo command.")])])])])]),e("td",null,[e("b",null,"hwinfo --cpu"),t(" shows information about the computer's CPU. ")])]),e("tr",null,[e("td",null,[e("b",null,"lspci")]),e("td",null,[t(" Displays information for all PCI devices. Be aware of the following options: "),e("ul",null,[e("li",null,[e("b",null,"-k"),t(" shows the kernel drivers that support the device. ")]),e("li",null,[e("b",null,"-t"),t(" displays a tree diagram that shows connections between all busses, bridges, and devices. ")])])]),e("td",null,[e("b",null,"lspci -k"),t(" shows the devices and the kernel drivers that support them. ")])]),e("tr",null,[e("td",null,[e("b",null,"lsdev")]),e("td",null,[t(" Gathers information about your computer's installed hardware from the interrupts, ioports, and dma files in the "),e("b",null,"/proc"),t(" directory. This gives you a quick overview of which hardware uses what I/O addresses and what IRQ and DMA channels. "),e("p",null,"There are no options for this utility.")]),e("td")])])],-1)]))}const c=o(n,[["render",l],["__file","01.html.vue"]]),u=JSON.parse('{"path":"/09/01.html","title":"Section 9.1 Device Drivers","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 9.1 Device Drivers","description":"some description"},"headers":[{"level":2,"title":"9.1.1 Device Drivers","slug":"_9-1-1-device-drivers","link":"#_9-1-1-device-drivers","children":[]},{"level":2,"title":"9.1.2 Device Types Facts","slug":"_9-1-2-device-types-facts","link":"#_9-1-2-device-types-facts","children":[{"level":3,"title":"Linux Device Types","slug":"linux-device-types","link":"#linux-device-types","children":[]}]},{"level":2,"title":"9.1.3 System Hardware Information","slug":"_9-1-3-system-hardware-information","link":"#_9-1-3-system-hardware-information","children":[]},{"level":2,"title":"9.1.4 Viewing Hardware Information","slug":"_9-1-4-viewing-hardware-information","link":"#_9-1-4-viewing-hardware-information","children":[]},{"level":2,"title":"9.1.5 Device Driver Facts","slug":"_9-1-5-device-driver-facts","link":"#_9-1-5-device-driver-facts","children":[{"level":3,"title":"Implement Device Drivers","slug":"implement-device-drivers","link":"#implement-device-drivers","children":[]},{"level":3,"title":"Driver Information","slug":"driver-information","link":"#driver-information","children":[]},{"level":3,"title":"Linux Driver Utilities","slug":"linux-driver-utilities","link":"#linux-driver-utilities","children":[]}]}],"git":{"updatedTime":1736669805000},"filePathRelative":"09/01.md"}');export{c as comp,u as data};
