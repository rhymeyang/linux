import{_ as o,c as i,a as s,b as e,d as t,o as a}from"./app-CCsZbG-M.js";const r={};function l(h,n){return a(),i("div",null,n[0]||(n[0]=[s('<p>As you study this section, answer the following questions:</p><ul><li> What are the differences between symmetric and asymmetric encryption? </li><li> When would you use the Diffie-Hellman key exchange encryption standard? </li><li>Which encryption standards are supported by SSH1?</li><li>Which encryption standards are supported by SSH2?</li><li> Where does a client store the public keys that it received from SSH servers? </li><li> Which keys are sent to the client when establishing an SSH session? </li><li> Which file should you edit to configure the SSH daemon on the server? </li><li> Which file overrides the client&#39;s SSH configuration on a per-user basis? </li><li> What <b class="fw-bold">ssh</b> command would you use to log in to a server, execute a command, and return to the local system&#39;s shell prompt? </li></ul><p>In this section, you will learn to:</p><ul><li>Configure OpenSSH</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Key Terms</th><th>Definition</th></tr></thead><tbody><tr><td>Encryption</td><td> A security technique that encodes information so that only someone with the proper key can decode it. </td></tr><tr><td>Symmetric key encryption</td><td> An encryption method that uses only one key to encrypt and decrypt data (also known as secret key, pre-shared key, or private key encryption). </td></tr><tr><td>Asymmetric key encryption</td><td> An encryption method (also known as public key encryption) using two keys that are mathematically related. Both keys together form a key pair. </td></tr><tr><td>Public key</td><td> Part of a key pair used in asymmetric encryption. A public key is made available to anyone. Data encrypted with the public key can be decrypted using only the private key. </td></tr><tr><td>Private key</td><td> A key used in both symmetric and asymmetric encryption. A private key is kept secret. With symmetric encryption, the private key both encrypts and decrypts, as opposed to asymmetric encryption. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 4.3 Monitor and manage system access <ul><li>Manage remote connections</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.5 Given a scenario, use the appropriate networking tools or configuration files <br><ul><li>Remote networking tools</li><ul><li>Secure Shell (SSH)</li><li>Secure Copy Protocol (SCP)</li><li>SSH File Transfer Protocol (SFTP)</li></ul></ul><p>1.7 Given a scenario, manage software configurations</p><ul><li> Configure common system services <ul><li>SSH</li></ul></li></ul><p> 2.4 Given a scenario, configure and execute remote connectivity for system management </p><ul><li>SSH</li><ul><li>Configuration files</li><ul><li>/etc/ssh/sshd_config</li><li>/etc/ssh/ssh_config</li><li>~/.ssh/known_hosts</li><li>/etc/ssh/sshd_config</li><li>/etc/ssh/ssh_config</li></ul></ul></ul></td></tr></tbody></table><h2 id="_15-5-1-openssh" tabindex="-1"><a class="header-anchor" href="#_15-5-1-openssh"><span>15.5.1 OpenSSH</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Open SSH 00:00-00:33 In the early days of UNIX and Linux, we used various tools to establish network connections between systems. For example, you could access the shell prompt of a remote system over the network using Telnet, rlogin, or rshell. You could also copy files between systems using RCP or FTP. The problem with these tools was that they transmitted data as clear text. This means that anyone running a sniffer could easily capture data—such as a username and password—that&#39;s being transferred between two systems.</p><p>Unencrypted Communications 00:33-01:18 In this example, let&#39;s suppose that we have a client system that we want to use to remotely manage our Linux server located elsewhere on the network. To do so, we&#39;d start up the Telnet client on the workstation and establish a Telnet session between the workstation and the server. To access the console of the Linux server, we&#39;ll need to provide a username and password. If we needed to perform any root-level tasks, we&#39;d need to use the su command to switch to a root user account. When we do that, we&#39;re asked for yet another password. During this whole time, it&#39;s possible that someone could&#39;ve captured these packets as they were transferred back and forth. Because Telnet doesn&#39;t encrypt the information, it&#39;d be easy for someone to capture the username and password for both the regular and root user accounts.</p><p>Open SSH 01:18-02:21 To keep this from happening, you can install and use the OpenSSH package. In using OpenSSH, you can complete the same management tasks with Telnet, RCP, FTP, and so on, but you could do so securely—with encryption.</p><p>OpenSSH has several encryption-enabled components. The first, sshd daemon, is the SSH server that allows remote access to the system. The SSH client is used to connect to the sshd daemon on a different system.</p><p>If we need to copy files securely between two systems, we can use the scp, or secure copy command. Using scp, we can send files between systems, and the contents of those files are encrypted. Even if someone is able to capture the packets to sniff them, it will be useless without the key needed to decrypt the transmission.</p><p>The same can be accomplished using SFTP. It uses a secure form of FTP to transfer files between systems. slogin is another option for securely accessing the shell prompt of a remote system over the network.</p><p>Encrypted Communications (SSHv1) 02:21-03:50 SSH version one uses two sets of keys. It can use symmetric encryption where both hosts have the same private key, which can be used for encryption and decryption. It can also use private/public key encryption where the private key remains on the host while the public key is distributed to anyone on the system that needs it. Any data encrypted with the public key can only be decrypted with the private key that remains on the host. Because of this, even if the attacker captures the public key, they&#39;d not be able to decrypt it because it can only be decrypted with the private key.</p><p>The SSH client creates a connection with a system where the SSH daemon is running. It does so on IP port 22 – sshd. When we run SSH at the command prompt, the SSH server sends its public key to the SSH client system. The server uses a host key pair to store its private and public keys. The public key is sent over to the client system. The client stores the key in the .ssh/known_hosts file, which can be used by anyone on the system. Once this connection has been established, the server will use the public key to encrypt the private key. By doing this, the same secret key is now on both systems. That key can be used to encrypt and decrypt data transmitted between these two hosts. An attacker can sniff the transmissions if they want, but because they don&#39;t have the original private key, they&#39;ll be unable to decrypt it.</p><p>Encrypted Communications (SSHv2) 03:50-04:33 SSH2 and later versions are a bit different. The host key files used on the server are different because we can have two different sets of public and private keys—an RSA key pair and a DSA key pair. The key pair used will depend on which encryption mechanism was used to create them. Instead of transmitting the secret key in encrypted form, SSH2 uses the Diffie-Hellman key agreement to negotiate a secret key. This way, both the server and the client have the same key, but it&#39;s never actually sent over the network. Once the secure channel is negotiated, the user can authenticate to the SSH server from the SSH client, and data can be transferred between systems.</p><p>Summary 04:33-04:54 That&#39;s it for this lesson. In this lesson, we discussed OpenSSH. We talked about the downfalls of unencrypted communication and discussed how encrypted communication using SSH1 or SSH2 can help provide increased security when transferring information between systems.</p><h2 id="_15-5-2-encryption-facts" tabindex="-1"><a class="header-anchor" href="#_15-5-2-encryption-facts"><span>15.5.2 Encryption Facts</span></a></h2><p>Encryption is a security technique that encodes information so that it can only be decoded by someone with the proper key.</p><p>This lesson covers the following topics:</p><ul><li>Encryption types</li><li>Encryption standards</li></ul><h3 id="encryption-types" tabindex="-1"><a class="header-anchor" href="#encryption-types"><span>Encryption Types</span></a></h3><p>There are two encryption types:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Symmetric</td><td> Symmetric key encryption (also known as secret key encryption, pre-shared key encryption, or private key encryption) uses only one key to encrypt and decrypt data. <ul><li> Symmetric encryption is well-suited for bulk encryption because it is less CPU-intensive and much faster than other encryption methods. </li><li> Before communications begin, both parties must exchange the shared secret key using a secure channel. This is often done manually or with some form of asymmetric key cryptography. </li><li> Each pair of communicating entities requires a unique shared key. </li><li> As the number of bits in the key increases, so does the strength of the encryption. However, the greater the number of bits in the key, the more CPU resources are required to perform the encryption. </li></ul></td></tr><tr><td>Asymmetric</td><td> Asymmetric encryption (also known as public key encryption) uses two keys that are mathematically related. Both keys together form a key pair. <ul><li> The public key is made available to anyone; the private key is kept secret. </li><li> Data encrypted with the public key can only be decrypted using the private key. Data encrypted with the public key cannot be decrypted using the same public key. </li><li> The strength of an asymmetric encryption system lies in the security of its private keys. If the private key is ever compromised, a new key pair must be generated. </li><li> Asymmetric encryption is slower than symmetric encryption and is CPU-intensive. Processing speeds are much slower than symmetric key encryption. </li></ul></td></tr></tbody></table><h3 id="encryption-standards" tabindex="-1"><a class="header-anchor" href="#encryption-standards"><span>Encryption Standards</span></a></h3><p>Standards for symmetric and asymmetric encryption include:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Symmetric</td><td><i class="fs-italicize">Data Encryption Standard</i> (DES) is an old encryption standard that was created by the National Security Agency in the 1970s. DES uses weak encryption and can be easily broken. <p><i class="fs-italicize">Triple DES</i> (3DES) is an enhanced version of DES. 3DES applies DES three times and uses a 168-bit key. </p><p><i class="fs-italicize">Advanced Encryption Standard</i> (AES) is a stronger encryption system that supports encryption key lengths up to 256 bits. AES is based on the <i class="fs-italicize">Rijndael cipher</i> that was developed by Joan Daemen and Vincent Rijmen. </p><p><i class="fs-italicize">Blowfish</i> is an older encryption system that was designed to replace DES. Blowfish uses 64-bit blocks and key lengths anywhere from 32 bits to 448 bits. </p></td></tr><tr><td>Asymmetric</td><td><i class="fs-italicize">Rivest, Shamir, and Adleman</i> (RSA) is an encryption standard based on factoring large numbers into their prime values. RSA supports key lengths from 1,024 to 4,096 bits. <p><i class="fs-italicize">Digital Signature Algorithm</i> (DSA) is a United States Government encryption standard often used for digital signing. DSA currently supports <i class="fs-italicize">Secure Hashing Algorithm-1</i> (SHA-1), which uses key lengths between 160 and 256 bits, or SHA-2 <i class="fs-italicize">,</i> which uses key lengths between 256 and 1024 bits. </p><i class="fs-italicize">Diffie-Hellman key exchange</i> was developed by Whitfield Diffie and Martin Hellman. This standard is a <i class="fs-italicize">key agreement protocol</i> that generates symmetric keys simultaneously at sender and recipient sites over non-secure channels. The Diffie-Hellman key exchange: <ul><li> Provides for key distribution and does not provide any cryptographic services. </li><li> Is based on calculating discreet logarithms in a finite field. </li><li>Is used in many algorithms and standards.</li><li> Is subject to on-path attacks and requires strong authentication to validate the endpoints. </li></ul></td></tr></tbody></table><h2 id="_15-5-3-openssh-facts" tabindex="-1"><a class="header-anchor" href="#_15-5-3-openssh-facts"><span>15.5.3 OpenSSH Facts</span></a></h2><p>OpenSSH is a tool that encrypts network traffic over a network connection. OpenSSH is an open-source implementation of the Secure Shell (SSH) protocol and is implemented by default on most Linux distributions.</p><p>This lesson covers the following topics:</p><ul><li>Key facts</li><li>Steps to establish an SSH connection</li></ul><h3 id="key-facts" tabindex="-1"><a class="header-anchor" href="#key-facts"><span>Key Facts</span></a></h3><p>Be aware that SSH:</p><ul><li> Uses a public and private key pair to encrypt and transfer a symmetric key that is then used by both hosts to encrypt and decrypt transmissions during the SSH session. The public key is available to all users. The private key is kept secure and is never shared. </li><li> Can use associated key management software and scripts to automate the exchange of public keys. </li><li> Can be used to create a secure tunnel through which other unsecure network protocols, such as IMAP, POP3, SMTP, and X server traffic can be transmitted. </li><li> Is available in two versions. <ul><li> SSH version 1 (SSH1) is an older, less secure version of SSH. SSH1 only supports RSA encryption. </li><li> SSH version 2 (SSH2) is the current standard SSH implementation. It can use either DSA or RSA encryption. </li></ul></li></ul><h3 id="steps-to-establish-an-ssh-connection" tabindex="-1"><a class="header-anchor" href="#steps-to-establish-an-ssh-connection"><span>Steps to Establish an SSH Connection</span></a></h3><p>Computers use the following steps when establishing a session using SSH:</p>',39),e("ol",null,[e("li",null," A client running SSH establishes a connection to any system running the SSH daemon (sshd) over port 22. "),e("li",null," The computers determine which SSH version to use based on the specifications in the configuration files. Typically, this is SSH2. "),e("li",null,[t(" The server sends one of the following public keys from the /etc/ssh/ directory to the client: "),e("ul",null,[e("li",null,"ssh_host_key.pub (This is the SSH1 public key.)"),e("li",null," ssh_host_rsa_key.pub (This is the SSH2 public key when using RSA. The associated private key file is ssh_host_rsa_key.) "),e("li",null," ssh_host_dsa_key.pub (This is the SSH2 public key when using DSA. The associated private key file is ssh_host_dsa_key.) ")])]),e("li",null,[t(" When the client receives the public key from the server, it compares the key to the keys it has received and stored in one of the following files: "),e("ul",null,[e("li",null,"/etc/ssh/ssh_known_hosts"),e("li",null,"~/.ssh/known_hosts")]),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," If the key is not present in either of these files, the client prompts the user to accept and store the key.")])])])])]),e("li",null,[t(" One of the following occurs: "),e("ul",null,[e("li",null," If SSH1 is being used, the client generates a 256-bit symmetric key. The client then uses the server's public key to encrypt the symmetric key and then sends it to the server. Because the secret key was encrypted with the public key, it can only be decrypted by the server using its private key. "),e("li",null," If SSH2 is being used, the server and the client use the Diffie-Hellman key exchange system to agree on a symmetric key that will be used to encrypt data for the rest of the session. The secret key is not actually transmitted over the network. ")])]),e("li",null," The data transmitted between hosts is encrypted and decrypted using the same symmetric key. ")],-1),s('<h2 id="_15-5-4-openssh-configuration" tabindex="-1"><a class="header-anchor" href="#_15-5-4-openssh-configuration"><span>15.5.4 OpenSSH Configuration</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>OpenSSH Configuration 00:00-00:59 In this lesson, we&#39;re going to discuss OpenSSH configuration. Before you can use SSH, you first have to install the OpenSSH package on your system. This is usually installed by default, but if not, you may need to install it. This package includes the SSHD daemon as well as the SSH client.</p><p>You&#39;ll need to configure both the SSH server and the SSH client. The SSH server daemon can be configured using the /etc/ssh/sshd_config file. The SSH client can be configured using the /etc/ssh/ssh_config file. This file provides configuration parameters for all users on the system. You also have the option to configure a user-specific file for just your user account by editing the ssh_config file located in the /.ssh hidden directory within your /home directory.</p><p>Server Configuration (sshd_config) 00:59-02:46 You can modify various directories within the sshd_config file. This file doesn&#39;t require customizations to operate properly, so you may not need to make changes. However, if you want to customize it for your particular implementation, you can use an editor such as vi. There are a lot of different parameters, but let&#39;s look at some of the most useful ones.</p><p>First is AllowUsers. This restricts logins to the SSH server to only those users listed in this parameter. You can specify a list of different users, separating them by spaces.</p><p>DenyUsers prevents the users listed from being able to log into the SSH server. Again, you specify a list of users separated by spaces. AllowUsers and DenyUsers can&#39;t be used together. You&#39;d need to choose one or the other.</p><p>The HostKey parameter specifies which private host key should be used by SSH.</p><p>The ListenAddress parameter is useful when the system has multiple network interfaces installed. If you wanted to restrict the SSHD daemon to only listening on a particular network interface, then you&#39;d specify its IP address with ListenAddress.</p><p>The PermitRouteLogin parameter specifies whether the root user is allowed to access the system directly through the SSHD daemon. This is usually turned off, so you&#39;d need to log in as a standard user and then use the su command at the shell prompt to switch to the root.</p><p>The Port parameter specifies the port on which the SSHD daemon will listen for SSH client requests, and the Protocol parameter specifies which version of SSH you want to use—version one, version two, or versions one and two, which gives preference to version two but will still allow version one connections if necessary.</p><p>Client Configurations (ssh_config) 02:46-03:08 Now let&#39;s look at the SSH client. The SSH client is configured using the ssh_config files. This file is used to specify default parameters for all users running the SSH clients on the system. As with the SSHD daemon, the default parameters usually work well without customization. We&#39;ll look at a few useful parameters you may wish to modify.</p><p>Client Parameters (ssh_config) 03:08-04:13 You can adjust the Port parameter if your SSHD server system uses a different port than the default of 22. This is a security measure that some system administrators employ to deter possible attackers. If someone were to run a port scan and see that port 22 was open, they&#39;d know that SSH was running. If the port were changed to anything else, they&#39;d not know what the port was being used for.</p><p>The Protocol parameter can configure which protocol to use—either SSH version one, version two, or both—giving precedence to version two.</p><p>You can also configure strict host key checking. By default, the first time you connect to a given SSH server, you&#39;ll be prompted to accept that server&#39;s public key. If you want to, you can change this so that the client will be allowed to establish connections only to SSH servers whose public key has already been added to either the known-host file in the home directory or the system-wide list of known hosts in the /etc directory.</p><p>The User parameter allows you to specify which user account you&#39;re going to use to connect to the remote SSH server.</p><p>Connecting with the OpenSSH Client 04:13-05:11 Whichever port you decide to use between your server and client, be sure to open that port in the host-based firewall on the SSH server where the SSHD daemon is running. After configuring the firewall, you can connect the client on your local computer to the SSHD daemon using the ssh -l command.</p><p>The command syntax is shown here. ssh -L is followed by the username on the remote system that you want to connect as, followed by the hostname or IP address of the server you want to connect to.</p><p>You&#39;ll be prompted to add the public key for the system you&#39;re trying to log in to. The remote system is added to the list of known hosts. After providing a password, you&#39;ll be authenticated to the remote system as the user specified. At this point, any commands that you type at the prompt will be sent to and processed by the remote system. When you&#39;re done, you want to close the connection by typing exit, which will close the SSH session.</p><p>Summary 05:11-05:35 That&#39;s it for this lesson. In this lesson, we reviewed how to configure OpenSSH on a Linux system. We first talked about how to configure the server side of OpenSSH. Then we talked about how to configure the SSH client. We ended the lesson by talking about how to connect to an SSH server using the SSH client.</p><h2 id="_15-5-5-configure-openssh" tabindex="-1"><a class="header-anchor" href="#_15-5-5-configure-openssh"><span>15.5.5 Configure OpenSSH</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Intro to OpenSSH 00:00-00:27 The SSH protocol allows a secure connection to be made to a Linux or Unix-like system over a network. This connection can be used to run commands and more advanced uses such as transferring files and redirecting network traffic. OpenSSH is the most widely used SSH implementation. In this demonstration, we&#39;ll perform basic uses of the ssh command and configure an OpenSSH server.</p><p>Connecting to a Server with SSH 00:27-01:52 For this demo, we have a server on the local network called demo-ssh-server, which has a user called demo. We can use SSH to log into that user account with the command ssh demo@demo-ssh-server. As a security precaution, SSH prompts us to verify the identity of the server the first time we connect to it. We&#39;re then prompted for the remote user account&#39;s password.</p><p>Once we&#39;ve entered that, we&#39;re now operating a shell on the remote system, as we can see by the shell prompt now showing demo@demo-ssh-server. From here, we can run commands, examine files and directories, and do everything essentially on the server that we can do through the shell on our own system. To return to the local shell, we use the logout command.</p><p>As an alternative to the user@hostname style syntax, we can use the -l (dash lowercase �l&#39;) option (for login) to specify the username, as in ssh -l demo demo-ssh-server. Note that the username on the remote server may differ from the username on the local system. If we put a command and arguments after the ssh command, such as ssh demo@demo-ssh-server ls -la, then the command will run on the server and immediately return us to our local shell rather than entering an interactive shell on the server.</p><p>Configuring the OpenSSH server 01:52-03:24 Let&#39;s now switch our view over to the demo-ssh-server machine to look at how to configure OpenSSH on the server. In most Linux distributions, including Ubuntu, the configuration files for OpenSSH are located in the directory /etc/ssh.</p><p>The main configuration file we want is sshd_config. sshd stands for SSH Daemon, which is the name of the SSH server process. We can edit the configuration using sudo nano sshd_config.</p><p>The syntax of this file is similar to many other configuration files, with # indicating a comment and options specified in the form &quot;Option value&quot; (option space value). With most distros, the default options for OpenSSH are designed to work out of the box, but we can use this configuration to customize various network and security settings.</p><p>As an example, the Port option controls which TCP network port accepts SSH traffic. The default value is 22, but it&#39;s not uncommon for a server to use a non-default value. For instance, let&#39;s change ours to 2201. To apply this change, we first save the configuration file, then use systemctl to restart the ssh service.</p><p>Now, switching our view back to the client machine, we can see how the change has taken effect. We&#39;ll connect to the server again, this time using the command ssh -p 2201 demo@demo-ssh-server, where the -p option specifies a non-default port number.</p><p>Summary 03:24-03:37 That&#39;s it for this demonstration. In this lesson, we gave an overview of the basic usage and configuration of OpenSSH.</p><h2 id="_15-5-6-openssh-configuration-facts" tabindex="-1"><a class="header-anchor" href="#_15-5-6-openssh-configuration-facts"><span>15.5.6 OpenSSH Configuration Facts</span></a></h2><p>Open Secure Shell (OpenSSH) is a suite of utilities that provides secure network connections for remote login and file transfer. OpenSSH uses the SSH protocol for authentication and encryption.</p><p>This lesson covers the following topics:</p><ul><li>Configuration files</li><li>SSH commands</li></ul><h3 id="configuration-files" tabindex="-1"><a class="header-anchor" href="#configuration-files"><span>Configuration Files</span></a></h3><p>OpenSSH uses the following configuration files:</p>',38),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"File"),e("th",null,"Description"),e("th",null,"Examples")])]),e("tbody",null,[e("tr",null,[e("td",null,"/etc/ssh/sshd_config"),e("td",null,[t(" The /etc/ssh/sshd_config file configures the SSH daemon on the server system. Be aware of the following important options for configuring an SSH server: "),e("ul",null,[e("li",null,[e("b",null,"AllowUsers"),t(" lists users allowed to use SSH. If an "),e("b",null,"AllowUsers"),t(" line is in a file, all users except those listed are denied access by default. ")]),e("li",null,[e("b",null,"DenyUsers"),t(" lists users not allowed to use SSH. If a "),e("b",null,"DenyUsers"),t(" line is in a file, all users except those listed are granted access by default. ")]),e("li",null,[e("b",null,"Protocol"),t(" specifies which version of SSH is allowed when establishing a connection to a server. "),e("ul",null,[e("li",null," SSH 2 is more secure and is supported on newer distributions. (It is the default.) "),e("li",null,"SSH 1 is typically used on older systems.")])]),e("li",null,[e("b",null,"ListenAddress"),t(" specifies the addresses that SSH should use when listening for requests. By default, the server listens on all IP addresses assigned to it. Use this line to specify specific addresses. ")]),e("li",null,[e("b",null,"port"),t(" specifies the port number. The default is 22. Use this line to change the default. ")]),e("li",null,[e("b",null,"UsePAM"),t(" enables the Pluggable Authentication Modules (PAM) interface between SSHDs and the system. ")]),e("li",null,[e("b",null,"PermitRootLogin"),t(" specifies whether users can log in as root over SSH. If set to "),e("b",null,"no"),t(" , users must log in using standard user credentials, but they can use the "),e("b",null,"su"),t(" command to elevate their privileges. ")])]),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," Restart the SSHD daemon to implement the changes.")])])])])]),e("td",null,[e("b",null,"AllowUsers jsmith mkimball"),t(" grants access to the specified users. "),e("br"),e("b",null,"DenyUsers gedwards fjones"),t(" denies access to the specified users. "),e("br"),e("b",null,"Protocol 1,2"),t(" allows the server to use either protocol. "),e("br"),e("b",null,"ListenAddress 192.168.10.10:22"),t(" ensures that the server listens only on the IP address specified. "),e("br"),e("b",null,"port 11111"),t(" changes the SSH port from the default port to port 11111. "),e("br")])]),e("tr",null,[e("td",null,[t(" /etc/ssh/ssh_config "),e("br"),t(" ~/.ssh/config ")]),e("td",null,[t(" The /etc/ssh/ssh_config file configures OpenSSH for all users on the client system. ~/.ssh/config is a user-specific hidden file that can override the configuration settings in /etc/ssh/ssh_config. Both files can be overridden using command line options included with the "),e("b",null,"ssh"),t(" command. "),e("p",null," Be aware of the following important options for configuring an SSH client: "),e("ul",null,[e("li",null,[e("b",null,"Protocol"),t(" specifies which version of SSH is allowed when accessing the SSH server. ")]),e("li",null,[e("b",null,"StrictHostKeyChecking"),t(" determines whether SSH clients can accept keys from SSH servers not previously accessed. The keys of previously accessed servers reside in one of the following directories: "),e("ul",null,[e("li",null,"/etc/ssh/ssh_known_hosts"),e("li",null,"~/.ssh/known_hosts")]),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" If this parameter is set to "),e("b",null,"yes"),t(" , you must add new keys manually with: "),e("b",null,"cat"),t(),e("b",null,"keyfile.pub"),e("b",null,">> /etc/ssh/ssh_known_hosts")])])])])])]),e("li",null,[e("b",null,"CheckHostIP"),t(" verifies that the supplied key matches the IP address of the server when set to "),e("b",null,"yes"),t(" . This prevents IP spoofing, but might generate warnings or refuse connection if the server changes its keys. ")]),e("li",null,[e("b",null,"port"),t(" specifies the port used to connect to the SSH server. ")]),e("li",null,[e("b",null,"user"),t(" automatically logs in with the specified username instead of requesting one. ")])])]),e("td",null,[e("b",null,"Protocol 1,2"),t(" allows the client to connect using either protocol. "),e("br"),e("b",null,"StrictHostKeyChecking no"),t(" automatically adds new host keys to the known hosts files. Other options are "),e("b",null,"yes"),t(" and "),e("b",null,"ask"),t(" . ( "),e("b",null,"ask"),t(" is the default.) "),e("br"),e("b",null,"port 11111"),t(" changes the SSH port from the default port to port 11111. "),e("br"),e("b",null,"user jsmith"),t(" automatically uses jsmith as the user when logging in. ")])])])],-1),s('<h3 id="ssh-commands" tabindex="-1"><a class="header-anchor" href="#ssh-commands"><span>SSH Commands</span></a></h3><p>The following table lists commands used in conjunction with SSH:</p><table><thead><tr><th>Command</th><th>Function</th><th>Examples</th></tr></thead><tbody><tr><td><b>service sshd</b></td><td> Manages the current state of the SSH daemon on the server for init-based distributions. Consider the following options: <ul><li><b>start</b> starts the SSHD daemon if it is not currently running. </li><li><b>stop</b> halts a running SSHD daemon.</li><li><b>restart</b> stops and restarts the SSHD daemon.</li><li><b>status</b> shows the status of the SSHD daemon.</li></ul></td><td><b>service sshd</b><b>start</b> starts the SSH daemon. <br><b>/etc/init.d/sshd start</b> starts the SSH daemon. <br><b>service sshd status</b> shows whether the SSHD daemon is running. <b><br>/etc/it.d/sshd status</b> shows whether the SSHD daemon is running. </td></tr><tr><td><b>systemctl command sshd</b></td><td> Manages the current state of the SSH daemon on the server for systemd-based distributions. Consider the following commands: <ul><li><b>start</b> starts the SSHD daemon if it is not currently running. </li><li><b>stop</b> halts a running SSHD daemon.</li><li><b>restart</b> stops and restarts the SSHD daemon.</li><li><b>status</b> shows the status of the SSHD daemon.</li></ul></td><td><b>systemctl start sshd</b> starts the SSHD daemon. <br><b>systemctl stop sshd</b> stops the SSHD daemon. <br><b>systemctl restart sshd</b> restarts the SSHD daemon. <br><b>systemctl status sshd</b> displays the status of the SSHD daemon. </td></tr><tr><td><b>ssh</b></td><td> Makes a secure connection from the SSH client to the SSH server. Consider the following options: <ul><li><b>-l</b> specifies the user account on the server. Without this option, SSH uses the same user account name being used on the client computer. </li><li><b class="c2 fw-bold"> hostname</b> specifies the SSH server hostname. Alternatively, the server&#39;s IP address could be used. </li><li><b class="c2 fw-bold"> commands</b> (optional) runs the command on the remote system. </li></ul></td><td><b>ssh -l bjones hs1</b> logs in to the hs1 computer as bjones. <br><b>ssh -l bjones@hs1 ls -la /var/log</b> logs in to the hs1 computer as bjones, executes the <b>ls -la /var/log</b> command on the remote computer, and then closes the connection. </td></tr><tr><td><b>scp</b></td><td> Encrypts and copies files from a remote system over the network. Consider the following options: <ul><li><b class="c3 fw-bold"> username</b> specifies the user account on the remote system. </li><li><b class="c2 fw-bold"> @hostname:remotefile</b> specifies the remote system and the remote file. </li><li><b class="c3 fw-bold"> destination/filename</b> specifies where to locate and what to name the new file. If the new file name is omitted, the file is copied using the original name. </li></ul></td><td><b>scp bjones@hs1:hostfile ~/</b> copies hostfile from the server to the home directory on the client. <br><b>scp ~/clientfile bjones@hs2.mydomain.com:/home/bjones/</b> copies clientfile from the client computer to the home directory of bjones on the server. <br><b>scp bjones@hs1.corpnet.com:/home/bjones/file1 bjones@hs2.corpnet.com:/home/bjones/</b> copies file1 from hs1 to hs2. </td></tr><tr><td><b>sftp</b></td><td> Transfers files securely from FTP servers. Consider the following options: <ul><li><b class="c3 fw-bold"> username</b> specifies the user account on the remote system. </li><li><b class="c2 fw-bold"> @hostname</b> specifies the remote system. </li></ul><h2>ftp</h2><ul><li><b>pwd</b> shows the current directory on the SFTP server. </li><li><b>get</b><b class="c3 fw-bold"> file_name</b> copies a file from the SFTP server. </li><li><b>put file_name</b> copies a file to the SFTP server.</li><li><b>cdup</b> traverses up a directory.</li><li><b>ls</b> displays files in the current directory on the SFTP server. </li></ul></td><td><b>sftp bjones@ftp1.corpnet.com</b> connects to the FTP server as bjones. </td></tr><tr><td><b>slogin</b></td><td> Allows access to a shell on a remote computer. This command is identical to the <b>ssh</b> command and is supported only for backwards compatibility. </td><td><b>slogin -l bjones hs1</b> logs in to the hs1 computer as bjones. </td></tr></tbody></table>',3)]))}const d=o(r,[["render",l],["__file","05.html.vue"]]),u=JSON.parse('{"path":"/15/05.html","title":"Section 15.5 OpenSSH","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 15.5 OpenSSH","description":"some description"},"headers":[{"level":2,"title":"15.5.1 OpenSSH","slug":"_15-5-1-openssh","link":"#_15-5-1-openssh","children":[]},{"level":2,"title":"15.5.2 Encryption Facts","slug":"_15-5-2-encryption-facts","link":"#_15-5-2-encryption-facts","children":[{"level":3,"title":"Encryption Types","slug":"encryption-types","link":"#encryption-types","children":[]},{"level":3,"title":"Encryption Standards","slug":"encryption-standards","link":"#encryption-standards","children":[]}]},{"level":2,"title":"15.5.3 OpenSSH Facts","slug":"_15-5-3-openssh-facts","link":"#_15-5-3-openssh-facts","children":[{"level":3,"title":"Key Facts","slug":"key-facts","link":"#key-facts","children":[]},{"level":3,"title":"Steps to Establish an SSH Connection","slug":"steps-to-establish-an-ssh-connection","link":"#steps-to-establish-an-ssh-connection","children":[]}]},{"level":2,"title":"15.5.4 OpenSSH Configuration","slug":"_15-5-4-openssh-configuration","link":"#_15-5-4-openssh-configuration","children":[]},{"level":2,"title":"15.5.5 Configure OpenSSH","slug":"_15-5-5-configure-openssh","link":"#_15-5-5-configure-openssh","children":[]},{"level":2,"title":"15.5.6 OpenSSH Configuration Facts","slug":"_15-5-6-openssh-configuration-facts","link":"#_15-5-6-openssh-configuration-facts","children":[{"level":3,"title":"Configuration Files","slug":"configuration-files","link":"#configuration-files","children":[]},{"level":3,"title":"SSH Commands","slug":"ssh-commands","link":"#ssh-commands","children":[]}]}],"git":{"updatedTime":1736839271000},"filePathRelative":"15/05.md"}');export{d as comp,u as data};
