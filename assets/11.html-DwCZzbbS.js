import{_ as t,c as s,a,o as i}from"./app-1gerZY4a.js";const o={};function r(n,e){return i(),s("div",null,e[0]||(e[0]=[a('<p>As you study this section, answer the following questions:</p><ul><li>What is the function of umask?</li><li>What does the umask value represent?</li><li>In which file should you set the umask value to make it persistent?</li><li>When configuring umask, what is the difference between using numbers or symbols?</li></ul><p>In this section, you will learn to:</p><ul><li>Change the umask</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>umask</td><td>The value used to restrict the permissions for a file or directory.</td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 4.2 Manage user and group access <ul><li> Manage directory and file ownership for users and groups </li><li> Manage directory and file ownership for users and groups </li><li>Configure umask values</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 2.1 Summarize the purpose and use of security best practices in a Linux environment <br><ul><li>Linux hardening</li><li style="list-style:none;display:inline;"><ul><li>Setting default umask</li></ul></li></ul><p>2.5 Given a scenario, apply the appropriate access controls</p><ul><li>Command-line utilities</li><li style="list-style:none;display:inline;"><ul><li>umask</li></ul></li></ul><p> 4.4 Given a scenario, analyze and troubleshoot user access and file permissions </p><ul><li>User file access issues</li><li style="list-style:none;display:inline;"><ul><li>Permission</li></ul></li></ul></td></tr></tbody></table><h2 id="_8-11-1-the-umask-command" tabindex="-1"><a class="header-anchor" href="#_8-11-1-the-umask-command"><span>8.11.1 The umask Command</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>The umask Command 00:00-00:09 In this lesson, we&#39;ll talk about default Linux permissions when creating files or directories.</p><p>Default Permissions 00:09-01:42 By default, Linux assigns read-write to owner; read-write to group; and read-write to others whenever a file is created. They are represented numerically as 666.</p><p>Then, if you create a new directory, Linux, by default, will assign read, write, and execute to the directory owner, the owning group, and to all other users in the system.</p><p>Even though those are the default permissions, the permissions actually assigned will be different. Let&#39;s look at an example.</p><p>In this example, I created a new directory in my home directory named widgetproject. And within that directory I created a new file called schedule.odt. Now, based on the default permissions, the widget project directory should have a mode R-W-X, R-W-X, R-W-X, and the schedule.odt file should have a mode of read-write, read-write, read-write – but notice that&#39;s not the case.</p><p>Here it shows the directory&#39;s mode of read, write, execute; read, write, execute; and read and execute – which is basically mode 775. So, the owner and group each have read, write, and execute; and just read and execute to all other authenticated users. For the file, read and write permissions were granted to owner and group, and only read permissions were granted to others.</p><p>Why did this happen? Well, because the default permissions are so liberal, they create a potential for directories and files to be deleted or changed by those who don&#39;t need that level of control.</p><p>Use umask to View Permissions 01:42-02:36 So, to increase security of the system, Linux uses a variable called umask to automatically remove permissions from the default mode for new directories and files. The value of the umask is a three-digit number, which you can view by running the umask command at the shell prompt.</p><p>Four numbers will come up. Just ignore the first one. The last three are 002, which is normally the default value of umask, but some Linux distributions use 022 instead.</p><p>Each digit represents a numeric permission that will be removed from the default permissions assigned by Linux. So, the first digit in the umask variable represents permissions that will be removed from the file or directory owner; which is represented as U.</p><p>The second digit represents the removed permissions of the owning group, and the last digit represents permissions that will be removed from others.</p><p>Effect of umask 02:36-03:33 Here&#39;s an example. Previously, the distribution had a umask variable of 002 when I ran the umask command. This means the write permission is removed from others. Zero means nothing is removed from the owner, and zero here means nothing is removed from group.</p><p>Let&#39;s say we create a new directory. Default mode would grant read, write, and execute to every entity, but because of the umask value here we subtract the w permission from others.</p><p>This results in read, write, and execute granted to the owner; read, write, and execute granted to group; and read and execute to others because we subtracted the w permission with umask.</p><p>Likewise, when creating a new file, the default permissions are read and write for all entities. But the value of umask removes the write permission from others. The effective permission now is read-write for owner and group and read for others.</p><p>Use umask to Change Permissions 03:33-05:37 The umask default value usually is sufficient for administrators, but it can be changed if needed. To do this, change the value assigned to umask. You can do this temporarily by entering umask at the shell prompt followed by the numeric permissions that you want subtracted from the default permissions for both files and directories.</p><p>For example, to remove the executable permission from others whenever a new directory is created, specify a 3 in the last spot. Or if we want to remove the default write permissions given to group for new files or directories, we use a 2. And we want the owner to keep the default permissions, so we use a 0 in the first value.</p><p>So, the result is the write permission is removed from group; write – valued at 2, and execute – valued at one, which summed together is 3 are removed from others. Now only members of the owning group or the directory owner can enter the directory.</p><p>With this new value, 023, I created a new folder. Within that folder, I created a new file at the shell prompt. Notice that the permissions are different than they were before. The owner still has 0, meaning no permissions were subtracted from the default permissions.</p><p>But I subtracted the write permission from group. I also subtracted write and execute from others. So, when I created the temp files directory, others received read, but not write or execute. Also, when I created the file, others received only the read permission.</p><p>Even though this method works, it&#39;s not persistent. When the system restarts, umask reverts to its default values. This happens because umask is applied each time the system boots using the umask parameter in either of these files – the /etc/profile files or the /etc/login.defs file – depending on which distribution you have.</p><p>So, to make permanent changes to umask, edit the appropriate configuration file in a text editor and set the value of umask to your desired value.</p><p>Summary 05:37-05:54 That&#39;s it for this lesson. In this lesson, we talked about the effect of the umask command on default permissions for directories and files in Linux. We finished the lesson by discussing how to modify the umask command.</p><h2 id="_8-11-2-use-umask" tabindex="-1"><a class="header-anchor" href="#_8-11-2-use-umask"><span>8.11.2 Use umask</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Use umask 00:00-00:20 In this demonstration, we&#39;re going to cover how to set which default access permissions will be granted when new files or directories are created. This is done using umask. We need to look at the default permissions that are assigned to files and directories when they&#39;re created in the file system.</p><p>View Default Permissions 00:20-01:47 First, we&#39;ll use the touch command to create a file named mytestfile. Let&#39;s also make a new directory using the mkdir named temp. Now, let&#39;s run the ls -l command so we can see the permissions that were automatically assigned to our new file and this directory.</p><p>Let&#39;s start with the mytestfile. Here, we see that the file&#39;s owner, the admin user, is assigned read-write access to the file, but no execute permission. This makes sense because it&#39;s not an executable file. The owning group, also name admin, also received read-write access to the file, and all other authenticated users on the system received read access to the file.</p><p>This means that if I were to put something in this file, admin or any member of the admin group could open it and edit it. Any other authenticated user on the system would also be able to see the file&#39;s contents, but they wouldn&#39;t be able to modify it.</p><p>Now let&#39;s look at the /temp directory we just created. Here we see that the owner, admin, and all members of the admin group have been granted the read, write, and execute permissions to this directory. This means that they can list the file contents, they can add and delete files from the directory, and they can enter the directory.</p><p>All other authenticated users to the system have read and execute access to the directory. This means they can list directory contents and they can go into the directory, but they&#39;re not allowed to add or remove files from the directory.</p><p>Decimal Permissions 01:47-02:34 Before we go further, it&#39;s important to understand that each of the letters used to represent a permission is assigned a value. The Read permission has the value of 4. The Write permission has a value of 2. The Execute permission has the value of 1. This means that if all three permissions are assigned to a user, the decimal equivalent is 7.</p><p>As we saw when we looked at the file we just created, the owner and group were given the rw permissions or the equivalent of 4 (for Read), plus 2 (for Write), which equals 6. Therefore, 6 is the value assigned to the owner and the group for our new file, but 4 was assigned to all other authenticated users, which gives them the Read permission. So the umask value assigned to this file is 664.</p><p>Linux Default Permissions 02:34-03:12 To understand how umask works, it&#39;s important to understand that when you create a file, the Linux kernel assigns the permissions of rw-rw-rw-, or 666, to files and rwxrwxrws, or 777, to directories. So, the question is, why didn&#39;t we see that when we created our new file and directory? Well, a umask value has been set in your shell configuration files to change the default values from 666 for files to 664. For directories, the umask changes the default value of 777 to 775.</p><p>View the Value of umask 03:12-04:53 So, what is umask, and how does it work? A umask is used to subtract permissions from the kernel&#39;s default decimal values to give you the new desired values. You can view the current value of your umask by just running umask at the shell prompt.</p><p>Here, you see that we have a umask value of 0002. This 0 specifies that no permissions are subtracted from the owner. This 0 specifies that no permissions are subtracted from the group. But since we have a value of 2 here, this means that 2 will be subtracted from the default value for all others.</p><p>Let me give you an example of how this works. When a file is created, Linux will try to assign the permission of 666. So, if the umask is 002, we subtract 2 from the last 6, which leaves us with 664. As we discussed earlier, 4 is equivalent to the Read permission, so this is the only permission granted to the other authenticated users. We see this as we look at the new file we created, where 664 is rw-rw-r--.</p><p>As another example, when we created our directory, Linux started with 777. But again, because of the umask, we subtracted 2 from the last position, leaving us with 775, where 5 is the value of 4 + 1—Read (4) and Execute (1). And again, this matches what we saw when we created the new directory.</p><p>Be aware that not all distributions will use the same default umask. Most of them probably use 002. Some use a value of 022 instead of 002, which would remove the write permission from the group as well by default.</p><p>Change the umask 04:53-06:43 If you&#39;re not happy with the assignments that result from the default umask, you can modify the value of umask, which will change what permissions are assigned to any other files or directories created.</p><p>For example, by default, admin is giving other authenticated users permission to read all files and to enter all the directories in the file system. From a security standpoint, that may not be the greatest idea. Leaving these default permissions means users could poke around through all the different files in the file system and view their contents. They won&#39;t be able to change them, but they&#39;ll be able to see them, and they&#39;ll also be able to run any executable files found in them.</p><p>Perhaps a better security posture would be to remove the execute permission from others when the permissions are assigned. That way, they can&#39;t go down a level into those directories or see the files within them.</p><p>Since the value assigned to x is 1, to remove the x permission from others using a umask, we would need to add the value of 1 to our umask. So instead of using the default umask of 002, we&#39;d use 003. To do that, all you need to do is run umask and the new value of 003 and press Enter. Now, when I run umask again, we see it shows our new value of 003.</p><p>Let&#39;s test our new umask to make sure that it works the way we think it should. To do that, I&#39;ll use the touch command to create a new file named mytestfile2. Let&#39;s also make a new directory using the mkdir command named temp2. Now, let&#39;s run the ls -l command so we can see the permissions that were assigned to our new file using our new umask.</p><p>Notice that for our new file, nothing changed. Both of our files have the same permissions. But when we look at our directories, we see that the temp2 still has the Read permission, but no longer has the Execute permission, which will prevent them from entering that directory.</p><p>Non-Persistent Umask 06:43-07:07 Before we end, I need to point out that the value you assign to umask from the command line is not persistent. This means that as long as this system stays running, the value we assign remains in effect. But as soon as we reboot the system, the umask value will jump back to its default. If you want to make that value persistent across reboots, you&#39;ll have to go into a shell configuration file and add the necessary command.</p><p>Summary 07:07-07:34 That&#39;s it for this demonstration. In this demo, we talked about using umask. First, we looked at the default modes that are assigned to files and directories when they&#39;re created in the file system. Then we discussed the role of umask in subtracting permissions from the default mode assigned to files and directories. Finally, we customized the value of umask to modify the default mode that&#39;s assigned to files and directories.</p><h2 id="_8-11-3-the-umask-command-facts" tabindex="-1"><a class="header-anchor" href="#_8-11-3-the-umask-command-facts"><span>8.11.3 The umask Command Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>About umask</li><li>Calculating umask</li><li>umask commands</li></ul><h3 id="about-umask" tabindex="-1"><a class="header-anchor" href="#about-umask"><span>About umask</span></a></h3><p>Each file on your system has a set of permissions associated with it which are used to protect files. For example, file permissions determine which users may access that file and what type of access they have to the file, such as being able to read, write, and execute the file.</p><p>When a user creates a file or directory, it&#39;s created with a default set of permissions. In some cases, the system defaults may be open or relaxed for the purpose in which the file or directory was created. For example, if a file has been given the default permissions of 666, then read/write permissions (rw-rw-rw-) have been granted to everyone. Similarly, a directory with the default permissions of 777 is granted the read/write/execute permissions (rwxrwxrwx) to everyone.</p><p>A new file&#39;s permissions may be restricted by applying a permissions &quot;mask&quot; called the umask.</p><h3 id="calculating-umask" tabindex="-1"><a class="header-anchor" href="#calculating-umask"><span>Calculating umask</span></a></h3><p>By default, files receive rw-rw-rw- (666) permissions and directories receive rwxrwxrwx (777) permissions when they are created. In most cases, the default assignment gives excess permissions to files and directories.</p><p>The umask value identifies which permissions are removed from the default permissions when files and directories are created. The following table shows what happens when the mask is set to a value of 022.</p><table><thead><tr><th>Umask Calculation</th><th>For Files (binary)</th><th>For Directories (binary)</th><th>For Files (letter abbreviation)</th><th>For Directories (letter abbreviation)</th></tr></thead><tbody><tr><td>Default permission</td><td>666</td><td>777</td><td>rw-rw-rw-</td><td>rwxrwxrwx</td></tr><tr><td><b class="fw-bold">Umask</b> (minus)</td><td>022</td><td>022</td><td>----w--w-</td><td>----w--w-</td></tr><tr><td><b class="fw-bold">Result</b> (equals)</td><td>644</td><td>755</td><td>rw-r--r--</td><td>rwxr-xr-x</td></tr></tbody></table><p>Additional umask example calculations are described below:</p><ul><li> A umask of <b class="fw-bold">066</b> results in file permissions of <b class="fw-bold">rw-------- (600)</b> and directory permissions of <b class="fw-bold">rwx--x--x (711)</b> . </li><li> A umask of <b class="fw-bold">033</b> results in file permissions of <b class="fw-bold">rw-r--r-- (644)</b> and directory permissions of <b class="fw-bold">rwxr--r-- (744)</b> . </li><li> A umask of <b class="fw-bold">011</b> results in no changes to file permissions (the <b class="fw-bold">x</b> permission is already removed by default) and directory permissions of <b class="fw-bold">rwxrw-rw- (766)</b> . </li></ul><p>The umask can also be represented and changed using a symbolic (letter) representation of the mask.</p><table><thead><tr><th>Symbol</th><th>Definition</th></tr></thead><tbody><tr><td>u</td><td>User (the owner of the file)</td></tr><tr><td>g</td><td>Group (any member of the file&#39;s defined group)</td></tr><tr><td>o</td><td>Other (anyone else)</td></tr><tr><td>a</td><td>All (equivalent to all of the above - u, g, and o)</td></tr></tbody></table><h3 id="umask-symbolic-letter-or-permission" tabindex="-1"><a class="header-anchor" href="#umask-symbolic-letter-or-permission"><span>umask symbolic_letter[+ or -]permission</span></a></h3><table><thead><tr><th>Umask Calculation</th><th>Binary</th><th>Letters</th><th>Example</th></tr></thead><tbody><tr><td>Default Permission</td><td>666</td><td>rw-rw-rw-</td><td rowspan="4"><img src="https://cdn.testout.com/_version_6015/linuxpro2022v6-en-us/en-us/resources/text/t_umask_lp6/umask_symb.jpg" alt="Examples of the umask command"></td></tr><tr><td>Default umask</td><td>022</td><td>u=rwx,g=rx,o=rx</td></tr><tr><td> Command: <b class="fw-bold"><br> umask</b><b class="fw-bold">g-w</b></td><td>222</td><td>u=rx,g=rx,o=rx</td></tr><tr><td><b class="fw-bold">Result</b> (equals)</td><td>644</td><td>r--r--r--</td></tr></tbody></table><h3 id="umask-commands" tabindex="-1"><a class="header-anchor" href="#umask-commands"><span>umask Commands</span></a></h3><p>The table below lists the commands for managing umask:</p><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><b>umask</b> <br> or <br><b>umask -S</b></td><td> Displays the current umask setting. The <b>-S</b> switch indicates that a symbolic representation of a mask will be used. </td><td><b>umask <br></b> The result would be something like <b>022</b> or <b>0022</b><br> This is the typical default umask setting. <h2>umask -S</h2></td></tr><tr><td><b>umask <i>number</i></b></td><td>Changes the default umask to a number between 000 and 777.</td><td> Typing <b>umask 007</b> sets the umask to remove nothing from the user or group but removes all permissions from others. </td></tr><tr><td><b>umask <i>symbol</i></b></td><td> Changes the default umask to a symbolic representation of a mask. </td><td><b>umask g+w <br></b> Adds the write permission to the group. </td></tr></tbody></table><p>Be aware of the following:</p><ul><li> The default umask value may vary depending on the Linux distribution (022 or 0022 is the most common default). </li><li> Setting the umask with the <b>umask</b> command is only persistent for the shell session. </li><li> To make the umask persistent through shell sessions and reboots, add the <b>umask</b> command to the shell configuration file (depending on the distribution). </li></ul>',79)]))}const h=t(o,[["render",r],["__file","11.html.vue"]]),d=JSON.parse('{"path":"/08/11.html","title":"Section 8.11 The umask Command","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 8.11 The umask Command","description":"some description"},"headers":[{"level":2,"title":"8.11.1 The umask Command","slug":"_8-11-1-the-umask-command","link":"#_8-11-1-the-umask-command","children":[]},{"level":2,"title":"8.11.2 Use umask","slug":"_8-11-2-use-umask","link":"#_8-11-2-use-umask","children":[]},{"level":2,"title":"8.11.3 The umask Command Facts","slug":"_8-11-3-the-umask-command-facts","link":"#_8-11-3-the-umask-command-facts","children":[{"level":3,"title":"About umask","slug":"about-umask","link":"#about-umask","children":[]},{"level":3,"title":"Calculating umask","slug":"calculating-umask","link":"#calculating-umask","children":[]},{"level":3,"title":"umask symbolic_letter[+ or -]permission","slug":"umask-symbolic-letter-or-permission","link":"#umask-symbolic-letter-or-permission","children":[]},{"level":3,"title":"umask Commands","slug":"umask-commands","link":"#umask-commands","children":[]}]}],"git":{"updatedTime":1736669805000},"filePathRelative":"08/11.md"}');export{h as comp,d as data};
