import{_ as n,c as s,a as i,b as e,d as t,o}from"./app-DD5NhL2N.js";const r={};function l(d,a){return o(),s("div",null,a[0]||(a[0]=[i('<p>As you study this section, answer the following questions:</p><ul><li>Why is it important to plan disk partitioning before installing Linux?</li><li>What is the difference between a primary partition and an extended partition?</li><li>Which utility would you use to manage disk partitions?</li><li>Linux allows a maximum of only four primary partitions on a single hard disk drive. What can you do to get around this limitation?</li><li>What does the /dev/sda3 device file name identify?</li><li>Which directory stores device file names?</li></ul><p>In this section, you will learn to:</p><ul><li>View and manage MBR partitions</li><li>Use <b>fdisk</b> to view the partition information on the system</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Partition</td><td>A region on a hard disk that can be managed by an operating system.</td></tr><tr><td>Primary partition</td><td>An MBR partition that contains only one file system.</td></tr><tr><td>Extended partition</td><td>An optional partition that can contain multiple logical partitions, each with their own file system.</td></tr><tr><td>Logical partition</td><td>A partition contained in an extended partition.</td></tr><tr><td>Device file</td><td>An interface for a device driver that appears in the Linux file system under the /dev directory.</td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p>',7),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col"}," Exam"),e("th",{scope:"col"}," Objective")])]),e("tbody",null,[e("tr",null,[e("td",null,"TestOut Linux Pro"),e("td",null,[t("2.1 Manage storage devices "),e("ul",null,[e("li",null,"Create and manage disk partitions"),e("li",null,"Create and manage swap partitions")])])]),e("tr",null,[e("td",null,"CompTIA Linux+ XK0-005"),e("td",null,[t("1.1 Summarize Linux fundamentals "),e("ul",null,[e("li",null,[t("Storage concepts "),e("ul",null,[e("li",null,[t("Partition type "),e("ul",null,[e("li",null,"Master boot record (MBR)")])])])])]),e("p",null,[t("1.3 Given a scenario, configure and manage storage using the appropriate tools "),e("br")]),e("ul",null,[e("li",null,"Disk partitioning"),e("li",{style:{"list-style":"none",display:"inline"}},[e("ul",null,[e("li",null,"Commands"),e("li",{style:{"list-style":"none",display:"inline"}},[e("ul",null,[e("li",null,"fdisk"),e("li",null,"partprobe")])])])]),e("li",null,"Storage hardware"),e("li",{style:{"list-style":"none",display:"inline"}},[e("ul",null,[e("li",null,"lsblk"),e("li",null,"blkid")])])])])])])],-1),i('<h2 id="_8-2-1-mbr-disk-partitions" tabindex="-1"><a class="header-anchor" href="#_8-2-1-mbr-disk-partitions"><span>8.2.1 MBR Disk Partitions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>MBR Disk Partitions 00:00-00:20 In this lesson, we&#39;re going to discuss managing master boot record disk partitions on a Linux system&#39;s hard drive. The MBR partition formats have been around since the early 1980s, but it&#39;s still used on many Linux systems today even though more flexible partitioning options are available.</p><p>fdisk Utility 00:20-02:01 The utility that&#39;s common across all Linux distributions for managing MBR partitions is the fdisk utility. You can use it to view, create, or delete partitions from the shell prompt, and it requires root-level access to use.</p><p>Let&#39;s look at the syntax. First, run fdisk. Then, specify the name of the hard disk device you want to manage the partitions on. In this diagram, we have three hard disks. To use fdisk correctly, you need to understand the device-naming syntax. The first, second, and third hard disks are named sda, sdb, and sdc, respectively.</p><p>Notice that all the hard disks are addressed using a file in the /dev directory. If I want to manage the partitions of the second hard disk, then I&#39;d use this command: fdisk/dev/sdb. The system decides which hard disk is first, second, or third based on which connector the hard disk is connected to on your hard disk controller. For example, the connector on a system that uses SATA hard disk drives connected to the lowest numbered SATA connector, such as SATA0, will be sda. The hard disk connected to the next higher numbered connector, such as SATA1, will be sdb, and so on.</p><p>Next, you enter one of the various fdisk commands at the command prompt to tell it what you want to do with the partitions.</p><p>To see a list of all the fdisk commands and what they do, enter the m command. Here you can see that the n command will create a new partition, the p command lets you view partitions, and the t command can change the partition type.</p><p>Be sure to use caution with the d command. It will delete the partition and all its data with no way to retrieve it.</p><p>Viewing Existing Partitions 02:01-02:18 To see if there are any existing partitions, use the p command. All the current partitions will be listed. This can help you determine if there&#39;s room to add another partition and what numbers to assign the new partition. In this output, it shows no partitions. So, we can add new partitions without a problem.</p><p>Creating New Partitions: Extended Partitions 02:18-03:17 To do so, use the n command at the fdisk prompt. Then specify either a primary partition or an extended partition. MBR partitions allow only up to four partitions. If you need more than four partitions, include an extended partition in your table.</p><p>An extended partition is a container for logical partitions; you can create many logical partitions within one. It&#39;s best to create the number of primary partitions you want first, then create an extended partition with the remaining space on the drive. Then, define the logical partitions within the extended partition.</p><p>In this example, we need six partitions on the hard drive. To do this, we could create three primary partitions and then define the rest of the disk space as an extended partition. To get six total partitions, we&#39;ll need to define three logical partitions within the extended partition. We end up with six partitions even though we are only technically allowed to have four. Also, note that you can only have one extended partition per disk.</p><p>Primary Partitions 03:17-05:29 When creating a partition, enter e for an extended partition or p for a primary partition. In this example, we chose p for primary. We then specified the number to assign to the partition. By default, fdisk will suggest a number one higher than the number assigned to the last partition. Because we have no previous partitions on the disk, the default number suggested here is 1. You can choose a different number, but the default is usually sufficient. Here we just hit Enter to use the default.</p><p>Next, we specify the size of the partition by entering the beginning and ending sectors we want. By default, fdisk will specify the first available sector where a partition could begin. The default suggestion helps use disk space effectively.</p><p>Here it&#39;s suggesting the first available sector, 2048, which is about here. Then we&#39;ll specify the last sector. There are several options for this. You can calculate it yourself or specify the total number of sectors and let fdisk determine the ending sector number for you. Or you can specify a size, such as kilobytes, megabytes, gigabytes, and so on. In this example, we specified a size of 10 GB. Then, fdisk calculated the ending sector and set it up automatically. We now have a new 10 GB partition on the hard drive.</p><p>To make sure the partition was created, you can run the p command again to see if it&#39;s listed now with the correct parameters. Here we see the first partition on the sdb disk drive with its starting sector, the ending sector, the total number of sectors, size, and partition type, which is a standard Linux partition. Notice that now that the partition is created, we use a different device file to refer to the partition. Instead of referring to it as /dev/sdb, which points to the hard disk, we point to the first partition on the hard drive with its own device file: /dev/sdb1. This indicates the first partition on the second hard drive in the system.</p><p>At this point, the partition and its changes haven&#39;t been written to disk yet and are only saved in memory. This allows you to play with the partition scheme before making changes. Before you commit the partition to the disk, you can use the q command to undo changes you&#39;ve made.</p><p>Changing Partition Types 05:29-05:58 The standard Linux partition we just created is good for storing data, but if you need to create a swap partition that&#39;ll be used for virtual memory, you&#39;ll need a different type of partition. To change the type of partition, type t at the command prompt and then enter the ID number of the partition type you want to use.</p><p>You can use the l command to see a list of all the partition types and their numbers.</p><p>For example, to create a swap partition, type in the number 82. Also, notice that the standard Linux partition&#39;is type 83.</p><p>Commit Changes to Disk 05:58-06:15 Now that we have the new partitioning defined, it&#39;s time to commit those partitions to the disk. This is done with the w command. Once you use this command, the changes are written to the disk, and the q command to undo changes will no longer work.</p><p>Forcing the Kernel to See a New Partition 06:15-06:41 You&#39;ll need to reboot the system before the Linux kernel will recognize the partition changes. If it&#39;s not a good time to reboot the system, you can use the partprobe command to force the kernel to see the new partition table without a reboot. The syntax is shown here: type partprobe -s. The -s option shows a summary of what it finds. Here we see it found the new partition on /dev/sdb.</p><p>Summary 06:41-07:03 That&#39;s it for this lesson. In this lesson, we discussed managing MBR partitions. We talked about using the fdisk utility to view, create, change, and delete partitions. We ended this lesson by looking at how we can use the partprobe command to update the kernel with the updated partition table.</p><h2 id="_8-2-2-managing-mbr-partitions" tabindex="-1"><a class="header-anchor" href="#_8-2-2-managing-mbr-partitions"><span>8.2.2 Managing MBR Partitions</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Manage MBR Partitions with fdisk 00:00-00:19 Storage media like hard disks can be partitioned using a format called Master Boot Record, or MBR. In this demonstration, we&#39;ll introduce you to the standard Linux utility, fdisk, which creates and manages MBR partitions on a hard drive.</p><p>Create an MBR Primary Partition 00:19-03:58 First, we need to know the name of the hard drive we want to format. We can get a list of all storage devices using the lsblk command. Here we see a disk called sdb. This is an empty hard disk, and we&#39;ll be using fdisk to create some partitions on it. To do that, we call sudo fdisk /dev/sdb. Now we enter the fdisk interactive prompt. This means that we&#39;ll be able to enter commands into fdisk to set up the disk and partitions the way we want them. Then, after we&#39;re done, we&#39;ll exit and go back to the shell.</p><p>Note these messages that are shown when we start the utility: &quot;Changes will remain in memory only, until you decide to write them.&quot; This is a part of how fdisk works. It means that if we exit fdisk without saving, no changes will be made. Then there&#39;s &quot;Be careful before using the write command.&quot; If there were any existing data on the disk, creating a new partition would effectively delete that data, and there&#39;d be no way to fully recover it. It&#39;s always recommended to keep backups of any important files before formatting or partitioning a hard drive, and be sure that you know which drive you&#39;re operating on before committing changes to it.</p><p>You can also see &quot;Device does not contain a recognized partition table.&quot; This is expected for an empty hard disk. &quot;Created a new DOS disklabel&quot; shows up as well. This means that fdisk has automatically started us with an empty MBR partition table. In fdisk and certain other Linux disk utilities, MBR is referred to as DOS or MS-DOS, as it was the partition format introduced and used by those operating systems. At this point, we could choose a different partition format, including GPT, but for this demo, we&#39;ll continue using MBR.</p><p>The first command we will use is m, for menu, which shows us a list of all available commands. The p command prints the partition table, displaying information about the disk. If there were partitions, they&#39;d be listed here. Because the drive is empty, we don&#39;t expect to see any.</p><p>To create a new partition, the command is n, for new. With MBR, we have a choice between p for primary and e for extended. We&#39;ll get back to extended partitions in a moment, for now let&#39;s create a primary partition. Notice here that the prompt says &quot;(default p)&quot;. This means that just hitting Return will select the primary partition option for us.</p><p>Next, we specify the partition number. MBR allows a maximum of four primary partitions, so our options are 1 through 4. And because this is the first partition we&#39;re creating, the default option is 1. Next, we specify the first sector of the partition. A sector is a unit of disk space that&#39;s related to the disk&#39;s physical layout and the way it communicates with the system. Disk utilities often operate in ranges of sectors. Typically, a sector is 512 bytes, and we can see from when we printed the partition table that this is the case here as well. Sector 2048 is the first available sector, but if we wanted to leave space in front of this partition, we could specify a higher number.</p><p>Next, we choose the last sector of the partition. The default option is for the partition to extend to the end of the available space, but I actually want to place multiple partitions on this disk and use only half for the first one. This prompt allows us to pick the last sector according to the size we want. Since it&#39;s a 20-gigabyte hard drive, I&#39;ll specify +10G. The plus is important; it denotes that it&#39;s a size. Because the first sector is 2048, the last sector will be 2048 plus 10 gigabytes.</p><p>And now the first partition has been created. If we use p again, we can see that the partition table now contains one entry called /dev/sdb1. Remember, this hasn&#39;t been written to the disk yet; it&#39;s just showing our work in progress.</p><p>Change an MBR Partition Type 03:58-05:31 The Type says Linux, meaning that this partition is intended to hold a Linux file system. fdisk always selects this type by default when creating a primary partition, but we can change it if we want to. To view the full list of MBR partition types, we can use the l command, for list. There are a lot of options, but most of these are here for compatibility with other operating systems. The most important partition types for Linux have human-friendly keywords, or aliases. These are listed at the bottom. For example, linux is for a Linux file system, and swap is for a Linux swap partition.</p><p>We can change the type of our new partition with the t command, for type. Because there&#39;s currently only one partition, fdisk automatically selects it. Next, we enter the new type we want to change to with the appropriate two-digit hex code or alias.</p><p>Here it says that the partition type is Linux swap / Solaris. Oracle Solaris is another operating system that happens to use the same hex code for its MBR partition type as a Linux swap partition. fdisk will mention both possible meanings of the hex code, but this doesn&#39;t affect the ability of Linux to use the swap partition.</p><p>Alternatively, we may want to choose a type for compatibility with another operating system. For example, NTFS is the primary file system used by Microsoft Windows, and it&#39;s also fully supported by Linux. We can change the partition type to NTFS with the code 07. This could be quite useful, for example, if the same system boots Windows and Linux. Both operating systems would have access to the same partition.</p><p>Create Extended and Logical Partitions 05:31-07:02 Now we want to create an extended partition. The command is n again, and this time we choose e for extended. This is the second partition, and we can let it fill the rest of the disk, so the defaults are fine. If we print the partition table again, notice that the new partition has a Type called Extended rather than the name of an operating system or file system. The purpose of an extended partition isn&#39;t to hold a file system or other data by itself. Rather, the extended partition is a container for what are called logical partitions.</p><p>We can create as many logical partitions as we want, as long as there&#39;s space for them inside the extended partition. Once again, to create a partition, the command is n. Notice that it didn&#39;t ask if we wanted a primary or extended partition because the only space left now is inside the extended one. fdisk knows we must be creating a logical partition. It also automatically assigns the new partition the number 5. We&#39;ll take the default starting sector and make it 2.5 gigabytes in size. And we&#39;ll repeat this, making a total of four logical partitions of roughly equal size inside of the extended partition.</p><p>Using extended and logical partitions allows us to overcome one of the major limitations of MBR, which is that otherwise there can&#39;t be more than four partitions on a disk. However, only a primary partition can be used with MBR-compatible system booting, which is an important consideration when you install an operating system. Also note that there can&#39;t be more than one extended partition on a disk.</p><p>Write an MBR Partition Table 07:02-07:39 Finally, it&#39;s time to commit these new partitions to the disk. We can do that with the w command, for write, which saves the changes we&#39;ve made and exits fdisk. Back in the shell, we can use lsblk again to see all the new partitions here. Although we specified MBR partition types for them, fdisk doesn&#39;t initialize the actual file systems. We have to do that as a separate step before we can put any files on the disk. At this point, we can call the fdisk command with the --list option, as in sudo fdisk --list /dev/sdb, to print the current partition table to the standard output.</p><p>Summary 07:39-07:56 That&#39;s it for this demonstration. In this demo, we talked about using the Linux fdisk utility to create an MBR partition table on a hard disk. And we created primary, extended, and logical partitions.</p><h2 id="_8-2-3-mbr-partition-management-facts" tabindex="-1"><a class="header-anchor" href="#_8-2-3-mbr-partition-management-facts"><span>8.2.3 MBR Partition Management Facts</span></a></h2><p>The Master Boot Record (MBR) partition format has been used by many operating systems, including Linux, for a number of years.</p><p>This lesson covers the following topics:</p><ul><li>MBR limitations and workarounds</li><li>Partition types</li><li>MBR partition tools</li></ul><h3 id="mbr-limitations-and-workarounds" tabindex="-1"><a class="header-anchor" href="#mbr-limitations-and-workarounds"><span>MBR Limitations and Workarounds</span></a></h3><p>The MBR partition format has several limitations. Some of these limitations are listed below.</p><ul><li>The Master Boot Record must be installed on the first 512 bytes of the hard disk.</li><li>Only four standard partitions can be created on a storage device.</li><li>The default block size of 512 bytes limits partitions to a maximum size of 2 TB.</li></ul><p>However, many workarounds have been implemented over the years to address these issues, such as:</p><ul><li>Logical Block Addressing (LBA), which allows the use of larger hard disks.</li><li>The use of 4,096-byte sectors to increase the maximum partition disk size.</li><li>Extended partitions that can contain many logical partitions.</li></ul><h3 id="partition-types" tabindex="-1"><a class="header-anchor" href="#partition-types"><span>Partition Types</span></a></h3><p>A partition is a logical division of the storage device associated with a hard disk drive. A storage device using an MBR can have a single partition or multiple partitions. The most common partitioning scheme divides a disk into two different partition types:</p>',55),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Type"),e("th",null,"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"Primary"),e("td",null,[t(" A primary partition is used to store data as well as the operating system. Primary partitions: "),e("ul",null,[e("li",null,"Can hold operating system boot files."),e("li",null,"Cannot be further subdivided into logical drives."),e("li",null,"Can be formatted with a file system.")]),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null," There can be a maximum of four primary partitions or three primary partitions and one extended partition on a single hard disk drive.")])])])])])]),e("tr",null,[e("td",null,"Extended"),e("td",null,[t(" An extended partition is an optional partition that contains logical partitions. Because an operating system can't be booted from a logical partition from within an extended partition, this partition type is not bootable. Extended partitions: "),e("ul",null,[e("li",null," Can be further subdivided into an unlimited number of logical partitions. "),e("li",null," Cannot be directly formatted with a file system. However, logical partitions within an extended partition can be formatted with a file system. ")]),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,"Only one extended partition can exist on a single hard disk drive.")])])])])])])])],-1),e("h3",{id:"mbr-partition-tools",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mbr-partition-tools"},[e("span",null,"MBR Partition Tools")])],-1),e("p",null,"Use the following tools to create and manage partitions:",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Tool"),e("th",null,"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",null,"fdisk")]),e("td",null,[t(" The "),e("b",null,"fdisk"),t(" utility is used to manage partitions on a hard disk. The "),e("b",null,"fdisk"),t(" utility has the following characteristics: "),e("ul",null,[e("li",null,[t(" When you create a partition, "),e("b",null,"fdisk"),t(" requests a beginning/ending sector or size. "),e("ul",null,[e("li",null," The size is indicated using K (kilobytes), M (megabytes), G (gigabytes), or T (terabytes). ")])]),e("li",null,[t(" When creating a partition, you specify the partition type using a hexadecimal code. Common hexadecimal codes include: "),e("ul",null,[e("li",null,"0x82 (Linux swap)"),e("li",null,"0x83 (Linux partition)"),e("li",null,"0x85 (Linux extended partition)"),e("li",null,"0x8e (Linux LVM partition)")])]),e("li",null,[t(" Using the "),e("b",null,"-l"),t(" option displays the current partition configuration on the system. ")])]),e("h2",null,"fdisk [device_name]"),e("ul",null,[e("li",null,[e("b",null,"l"),t(" lists the partition types supported.")]),e("li",null,[e("b",null,"m"),t(" displays the help screen.")]),e("li",null,[e("b",null,"n"),t(" creates a new partition.")]),e("li",null,[e("b",null,"p"),t(" displays the partition table for that device. "),e("br"),e("div",null,[e("div",null,[e("div",null,[e("div",{class:"to-icon large","aria-hidden":"true",style:{width:"20px"}},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",null,[e("span",null," The /proc/partitions file contains a table with major and minor number of partitioned devices, their number of blocks, and the device name in /dev.")])])])])]),e("li",null,[e("b",null,"q"),t(" exits "),e("b",null,"fdisk"),t(" without saving changes.")]),e("li",null,[e("b",null,"w"),t(" writes the partition table to disk (saving the file) and exits the "),e("b",null,"fdisk"),t(" utility. ")]),e("li",null,[e("b",null,"d"),t(" deletes a partition.")])])])]),e("tr",null,[e("td",null,[e("b",null,"partprobe")]),e("td",null,[t(" The "),e("b",null,"partprobe"),t(" command makes a request to the operating system to re-read the partition table. The operating system kernel reads the partition table and recognizes the table changes. ")])])])],-1),i('<h2 id="_8-2-4-device-naming-facts" tabindex="-1"><a class="header-anchor" href="#_8-2-4-device-naming-facts"><span>8.2.4 Device Naming Facts</span></a></h2><p>A Linux administrator should understand how a Linux system implements different types of storage devices.</p><p>This lesson covers the following topics:</p><ul><li>Storage device types</li><li>Linux storage device files</li></ul><h3 id="storage-device-types" tabindex="-1"><a class="header-anchor" href="#storage-device-types"><span>Storage Device Types</span></a></h3><p>Linux systems accommodate many types of storage. The most common ones are listed below.</p><table><thead><tr><th>Storage Device Type</th><th>Description</th></tr></thead><tbody><tr><td> Hard disk drive <br> (HDD) </td><td> For decades, hard disk drives have been the primary type of long-term storage used in desktop and server systems. Hard disk drives magnetically store information using spinning aluminum disks called platters. Each platter is coated with a magnetic surface material that allows the hard disk&#39;s read/write heads to store and retrieve information to and from the drive. The faster the disk&#39;s platters spin, the faster data can be accessed. <p> A hard disk drive identifies where data can be stored on its platters using several parameters that are collectively called the drive&#39;s geometry. The following parameters are used by the storage device interface to determine how the drive is accessed and where data can be stored: </p><ul><li><i>Heads</i> specifies the number of read/write heads on the drive. </li><li><i>Cylinders</i> specifies the number of concentric parallel tracks on all sides of all platters in the hard disk drive. </li><li><i>Sectors Per Track</i> specifies the number of wedge-shaped areas the platters have been divided into. </li></ul><p> Hard disk drives are connected to the system motherboard using a storage interface. The interface is commonly integrated within the motherboard itself. However, the interface may also be implemented using an expansion card that&#39;s installed in an expansion slot. In a modern desktop computer system, the following storage interfaces may be used: </p><ul><li>Serial ATA (SATA)</li><li>Small Computer System Interface (SCSI)</li><li>Parallel ATA (PATA) (This interface is obsolete)</li></ul><p> Hard disks provide several advantages, including the following: </p><ul><li>They can store a large amount of data.</li><li>They provide reasonably fast access speeds.</li><li>The store data at a relatively low cost per megabyte.</li></ul><p> Hard disks also have several disadvantages, including the following: </p><ul><li> Hard disks wear out over time because they&#39;re mechanical devices that contain moving parts. </li><li> Hard disks are vulnerable to physical damage. For example, dropping a hard drive while it&#39;s spinning can cause the read/write heads to dig into the platter, destroying any data stored there. </li></ul></td></tr><tr><td>Solid state drive (SSD)</td><td> A solid-state drive is a storage device that functions much like a hard disk drive, using the same block-based I/O operations. However, instead of aluminum platters, SSDs use flash memory to store data. SSDs typically provide storage capacity comparable to that of a small hard drive. They&#39;re beginning to replace standard hard disk drives in computer systems. <p>Some of the advantages of SSDs include that they:</p><ul><li>Are much faster than hard drives.</li><li>Have no moving parts, so they last longer.</li><li>Have lower power consumption than hard drives.</li><li>Are less susceptible to physical damage.</li><li>Are smaller and lighter than hard drives.</li><li> Use the same SATA interface found in standard hard disk drives. </li></ul> The main disadvantage currently for solid-state drives is cost. They are several times more expensive than comparable hard drives. </td></tr><tr><td>External flash storage device</td><td> Like an SSD, external flash storage devices store information using programmable, non-volatile flash memory. External flash storage devices most commonly connect to the computer using a USB interface. Advantages of flash devices include: <ul><li>Portability</li><li>Larger storage capacity than optical discs</li><li>Relatively fast read access</li></ul><p>Some of the disadvantages of flash devices are:</p><ul><li>Less storage capacity than hard disks</li><li>Relatively slow write speeds</li></ul><p>Common external flash storage devices include:</p><ul><li>CompactFlash cards</li><li>eMMC cards</li><li>SD cards</li><li>SSD cards</li><li>MiniSD cards</li><li>MicroSD cards</li><li>xD cards</li><li>Hybrid cards (combines SSD and HDD technology)</li><li>Memory sticks</li></ul></td></tr><tr><td>Optical disc</td><td> Optical discs, such as CDs, DVDs, and Blu-ray discs, store information using pits and lands on the surface of their reflective coating. As the disc spins, the optical drive uses a laser to read data stored on the surface of the disc in the form of deflected and reflected light. <p>Some advantages of optical discs include the following:</p><ul><li>They&#39;re highly portable.</li><li>They&#39;re inexpensive.</li><li>They have a long shelf life and are relatively sturdy.</li><li> They use the same storage interfaces found in standard hard disk drives (SATA, SCSI, and PATA). </li><li> Recordable optical discs allow you to both read and write data. </li><li> Blu-ray discs can store a large amount of data (25 GB or more, depending upon the format). </li></ul><p>Some disadvantages of optical discs include:</p><ul><li> They&#39;re slower than hard disks, SSDs, and external flash devices. </li><li> Older optical disc standards have limited storage capacities (650 MB for CDs and 4.7 GB for DVDs). </li><li> There are occasionally compatibility issues between disc formats and readers. </li></ul></td></tr></tbody></table><h3 id="linux-storage-device-files" tabindex="-1"><a class="header-anchor" href="#linux-storage-device-files"><span>Linux Storage Device Files</span></a></h3><p>Storage devices in Linux are represented by device files.</p><ul><li>Device files are located in the /dev directory.</li><li>The /dev directory contains files for all types of devices, even those that don&#39;t exist on the system.</li><li>Not only do device files represent devices, they also indicate how data is transferred to that device: <ul><li>Devices such as hard drives that receive data in block transfers by using memory to buffer the transfers are called block devices. <ul><li>The <b>lsblk</b> command lists information about block devices, including name, type (disk or partition), size, and mount point.</li><li>The <b>blkid</b> command also lists the attributes of block devices, including its Universally Unique Identifier (UUID), file system type, and volume label.</li><li>The /etc/crypttab file describes encrypted block devices that are set up during system boot. Each line describes one encrypted block device. Each line is in the form of <i>name encrypted-device password options</i> . The first two fields are mandatory; the remaining two are optional.</li></ul></li><li>Devices that send data transfers character-by-character (like a keyboard) are called character devices. <ul><li>A raw device is a special type of logical device that is associated with a character device file.</li></ul></li></ul></li></ul><p>The table below lists and describes the most common device files:</p><table><thead><tr><th>Device File</th><th>Description</th></tr></thead><tbody><tr><td>/dev/sd <i>xn</i></td><td><i>sd</i> files identify hard drives. A letter (beginning with a) follows the sd designation and identifies the hard drive&#39;s ID. At the end is appended a number (beginning with 1) that identifies the partition on the drive. Examples are listed below. <ul><li><i>sda2</i> is the second partition (2) on the hard drive with the lowest ID number (a). </li><li><i>sdc1</i> is the first partition (1) on the hard drive with the third lowest ID number (c). </li><li><i>sda1</i> is the first partition (1) on the hard drive with the lowest ID number (a). </li><li><i>sdb3</i> is the third partition (3) on the hard drive with the second lowest ID number (b). </li><li><i>sdc2</i> is the second partition (2) on the hard drive with the third lowest ID number (c). </li><li><i>sdd1</i> is the first partition (1) on the drive with the forth lowest ID number (d). </li></ul></td></tr><tr><td>/dev/sr <i>n</i></td><td> This is a special designation used to identify optical drives in the system. The optical drive with the lowest ID number is addressed as <i>sr0</i> . The optical drive with the next lowest ID number is addressed as <i>sr1</i> , and so on. Many distributions include symbolic links named /dev/cdrom or /dev/dvd that point to the actual device file (sr0). </td></tr><tr><td>/dev/fd <i>n</i></td><td><i>fd</i> files identify floppy drives. Device numbering begins at 0. For example, /dev/fd0 is the first floppy drive. </td></tr><tr><td>/dev/tty <i>n</i></td><td><i>tty</i> files identify local terminals on the system. Device numbering begins at 0. Subsequent terminals are represented with files that increment by one (for example, the file for terminal two is <b>/</b> dev/tty1, and so on). </td></tr><tr><td>/dev/ttyS <i>n</i></td><td><i>ttyS</i> files identify serial ports. Device numbering begins at 0. Files for subsequent serial ports are represented by files that increment by one (for example, the file for serial port two is /dev/ttyS1, and so on). </td></tr><tr><td>/dev/lp <i>n</i></td><td><i>lp</i> files identify parallel ports. Device numbering begins at 0. Files for subsequent parallel ports are represented by files that increment by one (for example, the file for parallel port two is /dev/lp1, and so on). </td></tr><tr><td>/dev/st <i>n</i></td><td><i>st</i> files identify SCSI tape devices. Device numbering begins at 0. </td></tr></tbody></table>',12)]))}const c=n(r,[["render",l],["__file","02.html.vue"]]),p=JSON.parse('{"path":"/08/02.html","title":"Section 8.2 MBR Disk Partitions","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 8.2 MBR Disk Partitions","description":"some description"},"headers":[{"level":2,"title":"8.2.1 MBR Disk Partitions","slug":"_8-2-1-mbr-disk-partitions","link":"#_8-2-1-mbr-disk-partitions","children":[]},{"level":2,"title":"8.2.2 Managing MBR Partitions","slug":"_8-2-2-managing-mbr-partitions","link":"#_8-2-2-managing-mbr-partitions","children":[]},{"level":2,"title":"8.2.3 MBR Partition Management Facts","slug":"_8-2-3-mbr-partition-management-facts","link":"#_8-2-3-mbr-partition-management-facts","children":[{"level":3,"title":"MBR Limitations and Workarounds","slug":"mbr-limitations-and-workarounds","link":"#mbr-limitations-and-workarounds","children":[]},{"level":3,"title":"Partition Types","slug":"partition-types","link":"#partition-types","children":[]},{"level":3,"title":"MBR Partition Tools","slug":"mbr-partition-tools","link":"#mbr-partition-tools","children":[]}]},{"level":2,"title":"8.2.4 Device Naming Facts","slug":"_8-2-4-device-naming-facts","link":"#_8-2-4-device-naming-facts","children":[{"level":3,"title":"Storage Device Types","slug":"storage-device-types","link":"#storage-device-types","children":[]},{"level":3,"title":"Linux Storage Device Files","slug":"linux-storage-device-files","link":"#linux-storage-device-files","children":[]}]}],"git":{"updatedTime":1736669805000},"filePathRelative":"08/02.md"}');export{c as comp,p as data};
