import{_ as s,c as a,a as l,b as e,d as t,o as i}from"./app-C99zI2Uc.js";const o={};function r(h,n){return i(),a("div",null,n[0]||(n[0]=[l('<p>As you study this section, answer the following questions:</p><ul><li>What is a shell?</li><li>What are the basic differences between common shells?</li><li>Which common commands are used to navigate through shells?</li><li>Which items can you use the Tab key to complete after beginning to type the name?</li><li>What does the tilde symbol ( <b class="fw-bold">~</b> ) in the prompt indicate?</li></ul><p>In this lesson, you will learn to:</p><ul><li>Enter shell commands</li><li>Work with the Linux shell</li></ul><p>Key terms for this section include the following:</p>',5),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term"),e("th",{scope:"col",class:"fw-bold"}," Definition")])]),e("tbody",null,[e("tr",null,[e("td",null,"Linux shell"),e("td",null,"A command line interface (CLI) or text user interface (TUI) for the Linux operating system.")]),e("tr",null,[e("td",null,"Shell prompt"),e("td",null,"A character or set of characters at the start of the command line that indicates that the shell is ready to receive commands.")]),e("tr",null,[e("td",null,"PATH environment variable"),e("td",null,"An shell environment variable that contains the set of directories that are searched when you type an executable file at the shell prompt.")]),e("tr",null,[e("td",null,"Tab complete"),e("td",null,"A shell feature that attempts to complete a command, file, or directory after pressing the Tab key when the first few characters of a command, file, or directory are typed at the shell prompt.")]),e("tr",null,[e("td",null,"Command history"),e("td",null,"A shell feature that stores shell commands and displays them when you press the Up and Down arrow keys.")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam"),e("th",{scope:"col",class:"fw-bold"}," Objective")])]),e("tbody",null,[e("tr",null,[e("td",null,"TestOut Linux Pro"),e("td",null,[t("1.2 Configure and use Linux shell environments "),e("br"),e("ul",null,[e("li",null,"Manage environment variables"),e("li",null,"View available shells")])])]),e("tr",null,[e("td",null,"CompTIA Linux+ XK0-005"),e("td",null,[t("1.2 Given a scenario, manage files and directories "),e("ul",null,[e("li",null,[t("File and directory operations "),e("ul",null,[e("li",null,"ls"),e("li",null,"pwd"),e("li",null,"cd"),e("li",null,"~"),e("li",null,".")])])]),e("p",null,"2.2 Given a scenario, implement identity management"),e("ul",null,[e("li",null,[t("Account creation and deletion "),e("ul",null,[e("li",null,"Default shell"),e("li",null,[t("Configuration files "),e("ul",null,[e("li",null,"/etc/passwd")])])])])]),e("p",null,"2.4 Given a scenario, configure and execute remote connectivity for system management"),e("ul",null,[e("li",null,[t("Commands "),e("ul",null,[e("li",null,"su -")])])]),e("p",null,"2.5 Given a scenario, apply the appropriate access controls"),e("ul",null,[e("li",null,[t("Command-line utilities "),e("ul",null,[e("li",null,"ls")])])]),e("p",null,"3.1 Given a scenario, create simple shell scripts to automate common tasks."),e("ul",null,[e("li",null,[t("Shell script elements "),e("ul",null,[e("li",null,[t("Shell built-in commands "),e("ul",null,[e("li",null,"echo")])])])]),e("li",null,[t("Environment variables "),e("ul",null,[e("li",null,"$PATH"),e("li",null,[t("$SHELL "),e("br")])])])])])])])],-1),l('<h2 id="_2-1-1-linux-shell-overview" tabindex="-1"><a class="header-anchor" href="#_2-1-1-linux-shell-overview"><span>2.1.1 Linux Shell Overview</span></a></h2><h3 id="introduction-00-00-00-27" tabindex="-1"><a class="header-anchor" href="#introduction-00-00-00-27"><span>Introduction 00:00-00:27</span></a></h3><p>In this lesson, we&#39;re going to talk about the Linux shell. In order for an operating system to be useful, it must provide some way for the end user to communicate with the operating system itself. Basically, the end user needs a way to tell the operating system what tasks it needs to complete. Maybe we want it to run a program. Maybe we want it to copy a file from one location in the file system to another. Perhaps we&#39;re done with the computer and want to shut the operating system down.</p><h3 id="user-interfaces-00-27-01-11" tabindex="-1"><a class="header-anchor" href="#user-interfaces-00-27-01-11"><span>User Interfaces 00:27-01:11</span></a></h3><p>These commands are given to the operating system through a user interface. Most Linux distributions provide two different types of user interfaces that you can employ. The first one&#39;s the command-line interface, or the CLI. When using the command-line interface, the end user must communicate with the operating system by typing commands at the command prompt. We type the command we want and hit Enter, which sends it to the operating system, and it does whatever that command is designed to do.</p><p>In addition to the command-line interface, Linux (at least most Linux distributions) also offer an easy-to-use and aesthetically pleasing graphical user interface. This interface allows them to interact with the Linux kernel using a keyboard and a mouse (basically, the same environment you&#39;re used to when running Windows).</p><h3 id="command-line-interface-01-11-01-49" tabindex="-1"><a class="header-anchor" href="#command-line-interface-01-11-01-49"><span>Command-Line Interface 01:11-01:49</span></a></h3><p>Now, understand that although graphical user interfaces are usually a lot easier to use, most of the tasks you&#39;re going to perform in order to administer and support a Linux system have to be done from the command-line. This is because many Linux systems, especially those configured to function as network servers, won&#39;t have a graphical user interface enabled. Basically, the idea here is that instead of spending processor cycles continually redrawing a graphical screen, most Linux system administrators configure their systems using the text-based command-line interface. That way, system resources are reallocated to just processing network requests instead of redrawing that graphical screen all the time.</p><h3 id="the-linux-shell-01-49-02-16" tabindex="-1"><a class="header-anchor" href="#the-linux-shell-01-49-02-16"><span>The Linux Shell 01:49-02:16</span></a></h3><p>To fully understand how the command-line interface works on Linux, you need to understand the concept of a Linux shell. The shell is a command interpreter that allows you to type commands at the keyboard that are then sent to the operating system kernel. Essentially, the shell provides that command-line interface. The neat thing about it is that Linux allows you to choose from a variety of different shells. You can try out several different command-line shells and then pick the one that you like best. That&#39;s not the case with most other operating systems.</p><h3 id="view-the-current-shell-02-16-02-44" tabindex="-1"><a class="header-anchor" href="#view-the-current-shell-02-16-02-44"><span>View the Current Shell 02:16-02:44</span></a></h3><p>When you first boot your Linux system and log in, your default shell will be loaded. You can identify which shell is your default shell using the command that you see here. At the shell prompt, you enter &#39;ps -p $$.&#39; The command that you see here is used to display text on the screen. We&#39;re telling the interface to go out and get the value of the shell environment variable and display it on the screen. It returns whatever the default shell is. As you can see in this example, the default shell is the Bash shell.</p><h3 id="changing-shells-02-44-03-35" tabindex="-1"><a class="header-anchor" href="#changing-shells-02-44-03-35"><span>Changing Shells 02:44-03:35</span></a></h3><p>Now, understand that you&#39;re not stuck with the default shell configured on your system. If you want to switch to a different shell, all you have to do is enter the change shell function at the prompt. For example, if you&#39;re currently using the Bash shell but want to use the Z shell instead, type CHSH at the prompt. Once you press Enter and add your password, you can change to Z shell with the command chsh /bin/zsh.</p><p>You can check the operating shell with ps -p $$. If it still shows as the default shell, reboot Linux and check again, and it will show the zsh shell.</p><p>You can always turn the shell back to the default bash by completing a few steps. First, enter chsh, then you just need to press Enter to return to the default shell. Remember, you have to restart the entire Linux system to see the change from the command ps -p $$.</p><h3 id="gui-shell-sessions-03-35-03-59" tabindex="-1"><a class="header-anchor" href="#gui-shell-sessions-03-35-03-59"><span>GUI Shell Sessions 03:35-03:59</span></a></h3><p>In addition to the text-based environment, you can run terminal sessions within the Linux graphical environment. This is done in much the same way as you would on Windows. You simply run a terminal program, such as Console or Gnome Terminal. Then, in order to run multiple command-line sessions, all you have to do is open up two or more terminal windows. Each shell session runs its own programs independent of those in the other shell sessions.</p><h3 id="summary-03-59-04-18" tabindex="-1"><a class="header-anchor" href="#summary-03-59-04-18"><span>Summary 03:59-04:18</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we talked about Linux shells. We first talked about what a shell is. Then we reviewed the different types of shells used on Linux distributions. We also learned how to change shells, see the current shell, and open multiple sessions.</p><h2 id="_2-1-2-linux-shell-facts" tabindex="-1"><a class="header-anchor" href="#_2-1-2-linux-shell-facts"><span>2.1.2 Linux Shell Facts</span></a></h2><p>The Linux shell is often described as a Command Line Interface (CLI) or Text User Interface (TUI) to the Linux Operating System.</p><p>This lesson covers the following topics:</p><ul><li>Linux shell definition and use</li><li>Linux shell access methods</li><li>Linux shell types</li><li>Linux shell common characteristics</li></ul><h3 id="linux-shell-definition-and-use" tabindex="-1"><a class="header-anchor" href="#linux-shell-definition-and-use"><span>Linux Shell Definition and Use</span></a></h3><p>A Linux shell is a program that traditionally provides the text user interface (TUI) for Linux. The term shell is descriptive since it is considered an outer layer of the operating system. The shell is the interface between you, a user or administrator, and the internal parts of the operating system, including its very core, which is the kernel. The shell&#39;s main function is to read and parse your commands and then execute them through interactions with the Linux kernel.</p><p>Most Linux distributions offer a workstation version that includes a graphical user interface (GUI), and many administrative tasks can be completed within the graphical environment. Since a GUI can diminish server performance, many Linux distributions offer a server version where the GUI is either disabled or is not installed. Whether you are managing a Linux workstation version or a server version, you perform much of your administrative tasks using shell commands. In addition, you will find that graphical environments and tools may vary between distributions, but shell commands are more likely to be consistent.</p><h3 id="linux-shell-access-methods" tabindex="-1"><a class="header-anchor" href="#linux-shell-access-methods"><span>Linux Shell Access Methods</span></a></h3><p>The Linux shell can be accessed:</p>',29),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Access Method"),e("th",{scope:"col",class:"fw-bold"}," Description")])]),e("tbody",null,[e("tr",null,[e("td",null,[t("From the Console "),e("br"),t(" (The keyboard and monitor "),e("br"),t(" attached to a computer running Linux)")]),e("td",null,[t("Press the following key combinations: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"Ctrl+Alt+F1"),t(" (in some Linux distributions, "),e("b",{class:"fw-bold"},"Alt+F1"),t(" ) will start or switch to the first Linux shell session.")]),e("li",null,[e("b",{class:"fw-bold"},"Ctrl+Alt+F2"),t(" through "),e("b",{class:"fw-bold"},"Ctrl+Alt+F6"),t(" (in some Linux distributions, "),e("b",{class:"fw-bold"},"Alt+F2"),t(" through "),e("b",{class:"fw-bold"},"Alt+F6"),t(" ) will switch to the second through sixth shell sessions.")])]),e("div",{class:"info","data-block":`
       While Linux distributions will vary, in
              most cases, when a GUI is installed, it will use the first console
              session. Use <b>Ctrl+Alt+F1</b> to switch to a graphical login
              screen. If you are already logged in, <b>Ctrl+Alt+F7</b> will
              switch to the desktop GUI.`},[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("span",{class:"to-icon large","aria-hidden":"true"},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" While Linux distributions will vary, in most cases, when a GUI is installed, it will use the first console session. Use "),e("b",null,"Ctrl+Alt+F1"),t(" to switch to a graphical login screen. If you are already logged in, "),e("b",null,"Ctrl+Alt+F7"),t(" will switch to the desktop GUI.")])])])])])])]),e("tr",null,[e("td",null,"From a desktop GUI"),e("td",null,"Open a terminal session from the applications menu.")])])],-1),e("h3",{id:"linux-shell-types",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#linux-shell-types"},[e("span",null,"Linux Shell Types")])],-1),e("p",null,"The following table describes many common shell types:",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Shell Type"),e("th",{scope:"col",class:"fw-bold"}," Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"sh"),e("td",null,"The Bourne shell is the oldest Linux shell but is not widely used. This shell was developed for UNIX in the 1970s.")]),e("tr",null,[e("td",null,"Bash"),e("td",null,[t("The Bourne-Again shell (Bash) is the default shell used by most Linux distributions. It uses commands similar to a UNIX shell. The Bash includes: "),e("ul",null,[e("li",null,"Command and file name completion when pressing the Tab key."),e("li",null,"Command history.")])])]),e("tr",null,[e("td",null,"zsh"),e("td",null,"The Z shell (zsh) is an improved version of Bash and is available on many Linux distributions.")]),e("tr",null,[e("td",null,"shh"),e("td",null,"The Bourne shell (sh) is an earlier version of Bash and is similar in many ways. The sh shell was originally created by Steve Bourne.")]),e("tr",null,[e("td",null,"ksh"),e("td",null,"The Korn shell (ksh) provides scripting features not found in Bash. Ksh was developed by David Korn.")]),e("tr",null,[e("td",{height:"43"}," csh"),e("td",{height:"43"}," The C shell (csh) uses syntax similar to the syntax used in the C programming language.")]),e("tr",null,[e("td",null,"tcsh"),e("td",null,"The tcsh shell is an improved version of csh. It offers command line editing and completion features that are not available in csh.")])])],-1),e("p",null,"The following commands can be used to determine the default shell type and the current shell type.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Command"),e("th",{scope:"col",class:"fw-bold"}," Description")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"echo $SHELL")]),e("td",null,[t("The "),e("b",{class:"fw-bold"},"echo $SHELL"),t(" command returns the default or preferred shell. The environment "),e("b",{class:"fw-bold"},"$SHELL"),t(" holds the user's preferred shell, which is typically set in "),e("b",{class:"fw-bold"},"/etc/passwd"),t(" . For example, if Bash is the user's preferred shell, "),e("b",{class:"fw-bold"},"$SHELL"),t(" will hold the value "),e("b",{class:"fw-bold"},"/bin/bash"),t(" . The preferred shell does not change when you switch shell types.")])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"echo $0")]),e("td",null,[t("The "),e("b",{class:"fw-bold"},"echo $0"),t(" command can be used to return the current shell type. The special variable "),e("b",{class:"fw-bold"},"$0"),t(" normally holds the command used to start a script. A shell session is initiated by a script. Consequently, "),e("b",{class:"fw-bold"},"$0"),t(" will hold the name of the script, which is consistent with the shell type. For example, "),e("b",{class:"fw-bold"},"$0"),t(" in a console session running bash might hold the value "),e("b",{class:"fw-bold"},"-bash"),t(" , $0 in a terminal application opened from a desktop menu might hold the value "),e("b",{class:"fw-bold"},"bash"),t(" . When you type "),e("b",{class:"fw-bold"},"ksh"),t(" , the "),e("b",{class:"fw-bold"},"ksh"),t(" script is run, a Korn shell session is opened, and "),e("b",{class:"fw-bold"},"$0"),t(" will hold the value "),e("b",{class:"fw-bold"},"ksh"),t(" .")])])])],-1),l('<h3 id="linux-shell-common-characteristics" tabindex="-1"><a class="header-anchor" href="#linux-shell-common-characteristics"><span>Linux Shell Common Characteristics</span></a></h3><p>Despite their differences, all shells share some common characteristics.</p><ul><li>The shell provides a command line interface that allows the user to interact with the Linux kernel.</li><li>A Linux system can run multiple shell sessions at the same time.</li><li>One shell session can run within another shell session. This may be done interactively, such as when a user starts a second shell from the first shell&#39;s command line or automatically, by scripts or programs.</li><li>Shells use configuration files to establish their operating environments.</li></ul><h2 id="_2-1-3-shell-commands" tabindex="-1"><a class="header-anchor" href="#_2-1-3-shell-commands"><span>2.1.3 Shell Commands</span></a></h2><h3 id="shell-commands-00-00-00-32" tabindex="-1"><a class="header-anchor" href="#shell-commands-00-00-00-32"><span>Shell Commands 00:00-00:32</span></a></h3><p>In this lesson, we&#39;re going to talk about using shell commands. Even though most modern Linux distributions include some type of graphical user interface, most of the work you&#39;re going to do to manage a Linux System will be done from the shell prompt. For example, you may need to enter commands to run a program, finding information, managing files, and creating file systems. Therefore, you must be familiar with how to enter commands at the shell prompt.</p><p>Using the shell is done similarly to other operating systems. All you must do is enter the command that you want to run.</p><h3 id="enter-commands-at-the-shell-prompt-00-32-01-04" tabindex="-1"><a class="header-anchor" href="#enter-commands-at-the-shell-prompt-00-32-01-04"><span>Enter Commands at the Shell Prompt 00:32-01:04</span></a></h3><p>Suppose you want to display a listing of all the files and directories within the current directory. To do this, type the ls command and press Enter at the shell prompt. A listing of all the files and folders is displayed when you do this.</p><p>Entering commands at the shell prompt is straightforward. Understand that you must be aware of a couple of issues when entering commands at the shell prompt. The first one is that the Linux shell handles the path to the executable you want to run in a manner that&#39;s different from other operating systems. If you&#39;ve come from a different operating system environment, like a Windows environment, this can be a problem.</p><p>Linux utilizes a PATH environment variable, just like a Windows system does.</p><h3 id="path-environment-variable-01-04-01-41" tabindex="-1"><a class="header-anchor" href="#path-environment-variable-01-04-01-41"><span>PATH Environment Variable 01:04-01:41</span></a></h3><p>When you enter commands at the shell prompt, the Linux shell doesn&#39;t look in the current directory first. This can be confusing for a new Linux administrator. The solution is the Linux path environment.</p><p>As you can see here, the PATH environment variable contains a list of directories. Each directory is separated by a colon in the PATH. As you can see here, if you want to view the PATH environment variable, you can type echo $PATH at the shell prompt. Remember, this shell won&#39;t be able to find files if that directory isn&#39;t in your PATH environment variable. Instead, the shell will return an error.</p><h3 id="execute-from-the-current-directory-01-41-02-02" tabindex="-1"><a class="header-anchor" href="#execute-from-the-current-directory-01-41-02-02"><span>Execute from the Current Directory 01:41-02:02</span></a></h3><p>Let&#39;s suppose you have an executable file named zombie right here, in your user accounts home directory. Then we enter zombie right here, at the shell prompt. When we press Enter, it generates an error. This happens because the shell can&#39;t find the file we&#39;re trying to run here. Why is this? This user&#39;s home directory isn&#39;t included, by default, within the PATH environment variable.</p><h3 id="options-for-running-executables-02-02-02-50" tabindex="-1"><a class="header-anchor" href="#options-for-running-executables-02-02-02-50"><span>Options for Running Executables 02:02-02:50</span></a></h3><p>There are three options for running executable files. The first one is to enter the full path to the executable file. In the previous example—because it&#39;s in my home directory and my username was jpatrick—I could&#39;ve entered /home/jpatrick/zombie at the shell prompt. By doing that, the shell would then know exactly where that executable file resided in the file system, and then it could run it, whereas before, it couldn&#39;t.</p><p>A second option is to switch to the directory where the executable resides and then add a dot slash (./) to the beginning of the command. The dot slash characters specify the current directory, whatever it happens to be. By adding these characters to the beginning of the command, you tell the shell to look for the command you&#39;re entering in the current directory.</p><p>The final option is to add the directory where the executable resides to the list of directories in your PATH environment variable.</p><h3 id="case-sensitivity-02-50-03-18" tabindex="-1"><a class="header-anchor" href="#case-sensitivity-02-50-03-18"><span>Case Sensitivity 02:50-03:18</span></a></h3><p>In addition to path issues, you also need to be aware that Linux file names and directory names are case-sensitive, and Linux commands are also case-sensitive. Therefore, if the executable file that you&#39;re going to run is named zombie with all lowercase characters, like we just saw, then you must enter zombie with all lowercase characters at the shell prompt.</p><p>Remember, this rule applies not just to file names, but to directory names as well. If you use the wrong case in a directory name in a path, it will point that shell to a completely different place in the file system.</p><h3 id="command-completion-03-18-03-49" tabindex="-1"><a class="header-anchor" href="#command-completion-03-18-03-49"><span>Command Completion 03:18-03:49</span></a></h3><p>When entering commands at the Bash shell, there&#39;s a feature you&#39;ll grow to love called command completion. Some people call it tab complete—it&#39;s the same thing.</p><p>This feature is very helpful when you enter a very long file name, a very long directory name, or even a very long command name at the command prompt. When you start typing a few characters of the command, file name, or directory name in question and then press the Tab key, the Bash shell will guess what it is you want to type and automatically complete the command. This saves a lot of trouble, especially if you make a lot of typographical errors, as I do.</p><h3 id="tab-completion-example-03-49-05-00" tabindex="-1"><a class="header-anchor" href="#tab-completion-example-03-49-05-00"><span>Tab Completion Example 03:49-05:00</span></a></h3><p>For example, suppose you have a file in your user&#39;s home directory named averylongfilenamefordemonstrationpurposes.txt. That&#39;s a long file name. You really don&#39;t want to have to type that all out if you&#39;re going to edit it. Let&#39;s suppose you do need to edit it for some reason. You want to pull it up in your vi editor. Well, one option would be to type out the full command: vi averylongfilenamefordemonstrationpurposes.txt at the shell prompt. However, the chances of typing the file name wrong are very high. To prevent this, you can use command completion to take care of the typing for you.</p><p>In this example, we start by typing vi, and then we enter the path of the file, which is in our home directory, so we enter ~/. And then we type the first three, or four, or five letters of the file name right here; we type avery. Then, instead of finishing out the entire file name, I press the Tab key at that point. When I do this, the bash shell will look at all the files within the specified directory and look for any of them that begin with A-V-E-R-Y. When it does this, it will determine that I probably wanted to open the file with the name averylongfilenamefordemonstrationpurposes.txt. So, it will add the full file name right here, at the end of the command. Then, all I must do is press Enter.</p><h3 id="command-history-05-00-06-13" tabindex="-1"><a class="header-anchor" href="#command-history-05-00-06-13"><span>Command History 05:00-06:13</span></a></h3><p>The next feature of the shell that we want to talk about is command history. Understand that every time you enter a command at the shell prompt, that command is saved in a file in your home directory. The name of the file is .bash_history. This file is just a simple text file. It&#39;s a hidden file containing all of your previously entered shell commands, one on each line. This file is continuously updated every single time you enter a shell command.</p><p>You can display the contents of the .bash_history file by entering the history command at the shell prompt. When you do, a list of all your recent commands is displayed. This is really useful because if I need to run one of these commands again, all I have to do is press the up-arrow key at the shell prompt. When I do, the shell&#39;s going to read this file, and it will display the last command that I entered. If I press the up-arrow key, again and again, it will scroll through this list of previously used commands. When I hit the one that I want, all I have to do is press Enter to execute it.</p><p>This is useful, especially if you need to retype a very long, complex command. Be aware that if you don&#39;t want to arrow through all of your past commands to find the one you want, you can just enter part of the command you need and press Ctrl+R. When you do that, the bash shell is going to look through your command history and display the most recent command that matches the partial command that you started entering.</p><h3 id="summary-06-13-06-32" tabindex="-1"><a class="header-anchor" href="#summary-06-13-06-32"><span>Summary 06:13-06:32</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we discussed how to enter commands at the shell prompt and organize directories. We also talked about the command completion feature of the shell, using command history, and finally, we looked at several commonly used shell commands.</p><h2 id="_2-1-4-enter-shell-commands" tabindex="-1"><a class="header-anchor" href="#_2-1-4-enter-shell-commands"><span>2.1.4 Enter Shell Commands</span></a></h2><h3 id="introduction-00-00-00-17" tabindex="-1"><a class="header-anchor" href="#introduction-00-00-00-17"><span>Introduction 00:00-00:17</span></a></h3><p>In this demonstration, we&#39;re going to learn how to enter commands at the Linux shell prompt. The Linux shell works in much the same way as the command prompt in a Windows environment. If I want to run a command, I type its name at the shell prompt and press Enter.</p><h3 id="the-pwd-command-00-17-00-36" tabindex="-1"><a class="header-anchor" href="#the-pwd-command-00-17-00-36"><span>The pwd Command 00:17-00:36</span></a></h3><p>For example, if I wanted to run the pwd command, I would type the name of the command and then press Enter. The pwd command stands for print working directory. This command tells us where we are in the Linux file system. If I press Enter, it tells me that I&#39;m currently in the /home/jpatrick directory.</p><h3 id="pwd-and-tilde-00-36-01-01" tabindex="-1"><a class="header-anchor" href="#pwd-and-tilde-00-36-01-01"><span>pwd and Tilde 00:36-01:01</span></a></h3><p>The pwd command says that I&#39;m in /home/jpatrick, but the native shell prompt simply shows a tilde (~) where the name of the directory would typically be listed. That&#39;s because the tilde on a Linux system is a shortcut that points to the /home directory of whatever user is currently logged in. I&#39;m currently logged in as the jpatrick user, so my /home directory is /home/jpatrick.</p><h3 id="full-directory-path-01-01-01-40" tabindex="-1"><a class="header-anchor" href="#full-directory-path-01-01-01-40"><span>Full Directory Path 01:01-01:40</span></a></h3><p>No matter what directory you&#39;re currently in, in the file system, the pwd command will display the name of that directory along with the full path to that directory. For example, I&#39;m going to type the cd command to change directories to the /tmp directory. Now, if I type pwd, it tells me that I&#39;m in the /tmp directory. If I want to switch back to my /home directory, I can use the tilde character. I type the cd command again to change directory and specify the tilde instead of typing the full path to my home directory, /home/jpatrick. Then press Enter, and I&#39;m back to my jpatrick user&#39;s /home directory.</p><h3 id="the-whoami-command-01-40-02-17" tabindex="-1"><a class="header-anchor" href="#the-whoami-command-01-40-02-17"><span>The whoami Command 01:40-02:17</span></a></h3><p>Another useful command is the whoami command. Whoami displays the name of the current user. You can see that I&#39;m logged in as jpatrick. You might be asking, &quot;Well, what&#39;s the significance of that command? Why would you need that?&quot;</p><p>In Linux, it&#39;s common to switch between user accounts. For example, I may log in to the system with my jpatrick user, but when I need to perform administrative tasks, I&#39;ll need to switch to my superuser account, root. If I&#39;m switching back and forth between jpatrick and the root user account, I might forget who I&#39;m currently logged in as. Using the whoami command, I can easily determine which user account I&#39;m currently logged in to.</p><h3 id="the-su-command-02-17-02-46" tabindex="-1"><a class="header-anchor" href="#the-su-command-02-17-02-46"><span>The su Command 02:17-02:46</span></a></h3><p>In order to switch between user accounts, I use the su command. su stands for substitute user or super user and can be used to switch between different user accounts on the system. For example, I&#39;m currently logged in as jpatrick. But if I wanted to switch to the ksanders user account on the system, I would type su ksanders. If I don&#39;t provide a username when using this command and just type su, the system will default to the super user account.</p><h3 id="the-exit-command-02-46-03-19" tabindex="-1"><a class="header-anchor" href="#the-exit-command-02-46-03-19"><span>The exit Command 02:46-03:19</span></a></h3><p>Once I&#39;m logged in as root, I can perform administrative tasks on the system as the superuser account. When I&#39;m done, I should exit out of the root user account and go back to a standard user account for security reasons. I have two different options for switching back to the jpatrick user account. One would be to type su jpatrick to switch back to the root user account. An easier way to do it is to type exit and press Enter. When I do, I&#39;m logged out of my root user account, and I&#39;m switched back to my jpatrick user account.</p><h3 id="the-uname-command-03-19-03-49" tabindex="-1"><a class="header-anchor" href="#the-uname-command-03-19-03-49"><span>The uname Command 03:19-03:49</span></a></h3><p>Another command that can be useful is the uname command. The uname command displays information about the system. If you just run uname without providing any parameters, all it does is tell you the name of the kernel running on this system. However, if you run uname with the -a option, it returns much more information, including the name of the kernel currently running, the hostname, the kernel release number, and the version date. Also listed are the machine hardware platform and some other system specific information.</p><h3 id="summary-03-49-04-11" tabindex="-1"><a class="header-anchor" href="#summary-03-49-04-11"><span>Summary 03:49-04:11</span></a></h3><p>And that&#39;s it for this demonstration. In this demo, we discussed several Linux shell commands, such as pwd to show what directory you&#39;re in, whoami to show the logged in user, su to switch users, exit to log out of a shell, and uname to show system information.</p><h2 id="_2-1-5-work-with-the-linux-shell" tabindex="-1"><a class="header-anchor" href="#_2-1-5-work-with-the-linux-shell"><span>2.1.5 Work with the Linux Shell</span></a></h2><h3 id="introduction-00-00-00-18" tabindex="-1"><a class="header-anchor" href="#introduction-00-00-00-18"><span>Introduction 00:00-00:18</span></a></h3><p>In this demonstration, we&#39;re going to look at several key features of the Linux shell. Specifically, we&#39;re going to explore the ls command, command history, tab complete, and several key path components that you should be aware of when using the Linux shell.</p><h3 id="command-history-00-18-00-33" tabindex="-1"><a class="header-anchor" href="#command-history-00-18-00-33"><span>Command History 00:18-00:33</span></a></h3><p>Command history is a useful feature of the Linux shell. When you&#39;ve already entered a command in a shell, you can reuse it without having to retype it manually every single time. Using the arrow keys, I can select a previously entered command and execute it again.</p><h3 id="the-ls-command-00-33-01-15" tabindex="-1"><a class="header-anchor" href="#the-ls-command-00-33-01-15"><span>The ls Command 00:33-01:15</span></a></h3><p>The ls command is used to list files inside the shell. If we enter the ls command without other options, it will list the files in the current directory. By default, ls displays only non-hidden files. Within my home directory there are several hidden files that ls doesn&#39;t reveal unless you use options with it. If I want to view regular files and directories as well as hidden files and directories, I&#39;ll enter the ls command with the -a option, which stands for all, and it will display all files, including the hidden ones. A home directory typically has many hidden files. Linux distinguishes hidden files by adding a period before the file name.</p><h3 id="history-functions-01-15-02-10" tabindex="-1"><a class="header-anchor" href="#history-functions-01-15-02-10"><span>History Functions 01:15-02:10</span></a></h3><p>In this user&#39;s home directory, you&#39;ll notice the file named .bash_history. This file stores commands you enter at the prompt. Once the command has been stored, I can access it using the up-arrow key. The .bash_history is then read, and you can scroll through previous commands using the arrow keys, listed in order from most recently entered.</p><p>For example, if I have previously run the uname -a command and wanted to run the command again, I could use the Up and Down arrow keys until I reach the uname -a command, press Enter, and the output for uname -a is displayed. Using the shell history is very efficient when you need to repeat a long or complex command.</p><p>You can see the commands stored in your history file with the history command. Type history at the prompt, and all the commands in the file will be displayed. They&#39;re listed in the order the commands were added to the history.</p><h3 id="tab-complete-02-10-02-40" tabindex="-1"><a class="header-anchor" href="#tab-complete-02-10-02-40"><span>Tab Complete 02:10-02:40</span></a></h3><p>As you use the Linux shell, you&#39;ll often have to type long file names, directory names, or commands. Tab complete is a useful feature that can speed up your typing. Tab complete can be used as you start typing a command or filename in the shell. Instead of typing the entire command or path or filename, type the first few characters and then press the tab key. The shell will look for a matching command or file at the PATH variable or within the directory you specify.</p><h3 id="tab-complete-–-in-action-02-40-03-14" tabindex="-1"><a class="header-anchor" href="#tab-complete-–-in-action-02-40-03-14"><span>Tab Complete – In Action 02:40-03:14</span></a></h3><p>For example, let&#39;s suppose that I need to change to the /etc directory in the file system. To do this, I would type the cd command, which stands for change directory, then press space, and then start typing the name of the directory that I want to change to. With tab complete, I can type /e and then, if I press Tab, it automatically fills out the rest of the directory name for me. It can do that because there&#39;s only one directory at the root of the file system that begins with an e, the /etc directory. Then I can press Enter, and it changes to the /etc directory.</p><h3 id="tab-complete-–-multiple-matches-03-14-04-03" tabindex="-1"><a class="header-anchor" href="#tab-complete-–-multiple-matches-03-14-04-03"><span>Tab Complete – Multiple Matches 03:14-04:03</span></a></h3><p>There may be situations when tab complete comes up with more than one match. When that occurs, nothing comes up after I press tab. The reason may be that there are multiple directories or files beginning with the same search criteria. For example, I&#39;m going to type cd Do to switch to my Downloads directory. I press Tab, and nothing happens. To see what the multiple matches are, you can press the Tab key twice. It tells me that there are two matches, Documents and Downloads. To continue using tab complete without typing the entire name, I can add more characters to narrow down the matching files or folders. In our example, if I type cd Dow then press the Tab key, there&#39;s only one match. Pressing Enter switches me to the directory I want.</p><h3 id="paths-04-03-05-01" tabindex="-1"><a class="header-anchor" href="#paths-04-03-05-01"><span>Paths 04:03-05:01</span></a></h3><p>The last feature we&#39;ll cover in this demonstration is the path system. When I type the &#39;ls&#39; command to view a listing of all files in my /home directory, notice that there&#39;s one file here that&#39;s in green. The green color identifies the file as an executable; in this case, the file is a script made into an executable that can be run in the shell prompt.</p><p>Most operating systems can run an executable located in the current directory. I would just type &#39;hello&#39;, and it should work. However, when type the file name, it fails and says, &quot;Hey, I can&#39;t find this file.&quot;</p><p>This is one of those things that&#39;s frustrating for new Linux users because you look and think the hello is in my current directory. Why is that the case? In operating systems, such as windows, the environment will look in the current directory for the command. If it finds it in that directory, it will run. If it doesn&#39;t in the current directory, it will look in all directories. Remember, the Linux shell does not do that.</p><h3 id="path-options-05-01-06-10" tabindex="-1"><a class="header-anchor" href="#path-options-05-01-06-10"><span>Path Options 05:01-06:10</span></a></h3><p>If your current directory, in this case /home/jpatrick, is not found in the path environment variable, then it cannot run the executable. What do you do in that situation? There are three different options.</p><p>The first is to explicitly specify the directory where the executable file resides, in which case the Linux shell can find the file and run it. In this case, I can enter &#39;/home/jpatrick/hello&#39; and run it. It will work because I told the Linux shell explicitly where that file resides.</p><p>Actually, to make things shorter when running commands in your home directory, I could have typed ~/hello. Remember, the tilde is a shortcut for the home directory of the current user.</p><p>Another option is to specify the current directory. This can be useful if you&#39;re dealing with an executable that&#39;s in a folder somewhere in the file system buried many layers deep, and you don&#39;t want to find and type out the full path. You can use the ./ shortcut to specify that the command you&#39;re about to run exists in the</p><p>current directory. ./ always means current directory. So I can enter ./hellohec, and it runs without typing the whole directory.</p><h3 id="summary-06-10-06-28" tabindex="-1"><a class="header-anchor" href="#summary-06-10-06-28"><span>Summary 06:10-06:28</span></a></h3><p>And that&#39;s it for this demonstration. We talked about the features of the Linux shell. We looked at the command history, hidden files, history functions, tab complete, and ended the demonstration by discussing Linux shell paths.</p><h2 id="_2-1-6-linux-shell-command-facts" tabindex="-1"><a class="header-anchor" href="#_2-1-6-linux-shell-command-facts"><span>2.1.6 Linux Shell Command Facts</span></a></h2><p>The Linux shell is a text user interface that provides a command line interface (CLI). Users employ the shell to interact with the Linux kernel by typing commands at the shell prompt.</p><p>This lesson covers the following topics:</p><ul><li>Bash shell command line prompt</li><li>$PATH Linux shell environment variable</li><li>Running an executable file</li><li>Command history feature</li><li>Tab complete feature</li><li>Common Linux shell commands</li></ul><h3 id="bash-shell-command-line-prompt" tabindex="-1"><a class="header-anchor" href="#bash-shell-command-line-prompt"><span>Bash Shell Command Line Prompt</span></a></h3><p>Each Linux shell type has a customizable command line prompt. For the Bash shell, the default command line prompt varies with each Linux distribution but is generally displayed in the following format:</p>',90),e("ul",null,[e("li",null,"The username of the current user"),e("li",null,"The @ symbol"),e("li",null,"The hostname"),e("li",null,"A space"),e("li",null,[t("The base name of the current working directory "),e("br"),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("span",{class:"to-icon large","aria-hidden":"true"},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" If the current working directory is the home directory (the default directory when the user first logs in), the tilde symbol ( "),e("b",null,"~"),t(" ) is displayed instead.")])])])])])]),e("li",null,[t("A character that indicates the type of user: "),e("ul",null,[e("li",null,"The # character typically indicates that the current user is the root user."),e("li",null,"The $ character typically indicates that the current user is a normal user.")])])],-1),l('<h3 id="path-linux-shell-environment-variable" tabindex="-1"><a class="header-anchor" href="#path-linux-shell-environment-variable"><span>$PATH Linux Shell Environment Variable</span></a></h3><p>The $PATH environment variable contains the set of directories that are searched when you type an executable file at the shell prompt.</p><ul><li>The shell does not look (by default) in the current working directory for the executable file.</li><li>To see the list of directories, type <b class="fw-bold">echo $PATH</b> at the shell prompt.</li><li>To add a directory to a path, type <b class="fw-bold">PATH=$PATH:[directory_path]</b> and then type <b class="fw-bold">export PATH</b> .</li></ul><h3 id="running-an-executable-file" tabindex="-1"><a class="header-anchor" href="#running-an-executable-file"><span>Running an Executable File</span></a></h3><p>The following table describes how to run executable files.</p><table><thead><tr><th scope="col" class="fw-bold"> File Location</th><th scope="col" class="fw-bold"> Run Action</th></tr></thead><tbody><tr><td>Resides in a directory that is included in the $PATH environment variable.</td><td>Type the filename at the shell prompt.</td></tr><tr><td>Resides in the current working directory, and the current directory is not included within the path environment variable.</td><td>Type <b class="fw-bold">./</b> followed by the filename.</td></tr><tr><td>Does not reside in the current working directory,and its directory is not included within the path environment variable.</td><td>Type the full or relative path to the executable file.</td></tr></tbody></table><blockquote><p>File names and paths are case-sensitive.</p></blockquote><h3 id="command-history-feature" tabindex="-1"><a class="header-anchor" href="#command-history-feature"><span>Command History Feature</span></a></h3><p>The Linux shell keeps a history of commands you type at the shell prompt.</p><ul><li>The commands are stored as a history queue within the hidden `.bash_history` file in your home directory.</li><li>Press the <b class="fw-bold">Up</b> and <b class="fw-bold">Down</b> keys to scroll through your previously typed commands. <ul><li>You can edit the command or re-run it as is by pressing <b class="fw-bold">Enter</b>.</li></ul></li><li>Type <b class="fw-bold">history</b> to display the commands stored in the history queue.</li><li>Type <b class="fw-bold">history -c</b> to clear the history queue.</li><li>Using a <b class="fw-bold">space</b> before a command prevents the command from appearing in the history.</li></ul><h3 id="tab-complete-feature" tabindex="-1"><a class="header-anchor" href="#tab-complete-feature"><span>Tab Complete Feature</span></a></h3><h4 id="tab" tabindex="-1"><a class="header-anchor" href="#tab"><span>Tab</span></a></h4><ul><li>After typing the beginning of a command, file, or directory, press <b class="fw-bold">Tab</b> to complete it.</li><li>If pressing Tab does not fully complete the command, file, or directory, press <b class="fw-bold">Tab</b> again. <ul><li>If there is no matching command, file, or directory name, your command entry will not change.</li><li>If there is more than one matching command, file, or directory name, a list of all matches will be displayed to help you resolve your command entry.</li></ul></li></ul><h3 id="common-linux-shell-commands" tabindex="-1"><a class="header-anchor" href="#common-linux-shell-commands"><span>Common Linux Shell Commands</span></a></h3><p>The following table describes several common commands used at the shell prompt.</p>',15),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"},"Command"),e("th",{scope:"col",class:"fw-bold"}," Function")])]),e("tbody",null,[e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"pwd")]),e("td",null,"Shows the present working directory.")]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"whoami")]),e("td",null,"Displays the current username.")]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"uname")]),e("td",null,[t("Prints system information. The "),e("b",{class:"fw-bold"},"uname"),t(" command has the following options: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"-a"),t(" prints all system information.")]),e("li",null,[e("b",{class:"fw-bold"},"-o"),t(" prints the operating system.")]),e("li",null,[e("b",{class:"fw-bold"},"-p"),t(" prints the processor's architecture type.")])])])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"su")]),e("td",null,[t("Switches users in the shell prompt. The "),e("b",{class:"fw-bold"},"su"),t(" command has the following options: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"su -l"),t(),e("b",{class:"fw-bold"},"[username]"),t(" switches to the specified user and creates a new login shell.")]),e("li",null,[e("b",{class:"fw-bold"},"su"),t(),e("b",{class:"fw-bold"},"[username]"),t(" (without the dash, but with the username) switches to the user in the current shell.")]),e("li",null,[e("b",{class:"fw-bold"},"su -"),t(),e("b",{class:"fw-bold"},"[username]"),t(" (with the dash and the username) switches to the user and loads that user's environmental variables.")]),e("li",null,[e("b",{class:"fw-bold"},"su -"),t(" (with the dash but without the username) switches to the root user and loads the root user's environmental variables. "),e("ul",null,[e("li",null,"The root user account is the Linux system superuser."),e("li",null,"The root user can perform any task. Some utilities do not work if the administrator is not logged in as the root user.")])]),e("li",null,[e("b",{class:"fw-bold"},"su"),t(" (no dash or username) switches to the root user but does not load the root user's environmental variables.")])]),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("span",{class:"to-icon large","aria-hidden":"true"},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[e("b",null,"su"),t("requires the password of the user except when switching from root to a normal user.")])])])])])])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"exit")]),e("td",null,[t("Exits the current shell (which may close the login shell) or to go back to the original user after using the "),e("b",{class:"fw-bold"},"su"),t(" command.")])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"exec")]),e("td",null,"Executes an executable to replace the shell process with the new process created by the executable file.")]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"cd")]),e("td",null,[t("Changes directories. For example, when the "),e("b",{class:"fw-bold"},"/usr"),t(" directory is the current directory: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"cd bin"),t(" changes to the "),e("b",{class:"fw-bold"},"bin"),t(" directory in the current directory.")]),e("li",null,[e("b",{class:"fw-bold"},"cd /usr/bin"),t(" changes to the "),e("b",{class:"fw-bold"},"/usr/bin"),t(" directory from anywhere in the file system.")])])])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"ls")]),e("td",null,[t("Shows names of files and directories in the current directory. The "),e("b",{class:"fw-bold"},"ls"),t(" command has the following options: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"-a"),t(" shows all files and directories, including hidden files.")]),e("li",null,[e("b",{class:"fw-bold"},"-l"),t(" shows extended information about files, including size, permissions, owner, and modified date.")]),e("li",null,[e("b",{class:"fw-bold"},"-d"),t(" displays only directories.")]),e("li",null,[e("b",{class:"fw-bold"},"-s"),t(" sorts files by size.")]),e("li",null,[e("b",{class:"fw-bold"},"-X"),t(" sorts by extension.")])]),e("p",null,"Many distributions use a color scheme to identify different file types as follows:"),e("ul",null,[e("li",null,"Directories are blue."),e("li",null,"Text files are white."),e("li",null,"Links are cyan."),e("li",null,"Executable files are green."),e("li",null,"Compressed files are red.")])])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"history")]),e("td",null,[t("Shows all the commands in the history queue. The "),e("b",{class:"fw-bold"},"-c"),t(" option clears the history list. "),e("br"),e("div",null,[e("div",{class:"to-info-box"},[e("div",{class:"to-info-box-body"},[e("span",{class:"to-icon large","aria-hidden":"true"},[e("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fal","data-icon":"circle-info",class:"svg-inline--fa fa-circle-info",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},[e("path",{fill:"currentColor",d:"M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM208 352c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-112c0-8.8-7.2-16-16-16l-40 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l24 0 0 96-32 0zm48-168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"})])]),e("div",{class:"to-info-box-body-content"},[e("span",null,[t(" History command queues are separate for each user. For example, a command typed as one user cannot be used after using the "),e("b",null,"su"),t(" command to switch to another user.")])])])])])])]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"clear")]),e("td",null,"Clears the shell screen.")]),e("tr",null,[e("td",null,[e("b",{class:"fw-bold"},"chsh")]),e("td",null,[t("Changes the default shell. The "),e("b",{class:"fw-bold"},"chsh"),t(" command has the following options: "),e("ul",null,[e("li",null,[e("b",{class:"fw-bold"},"-s"),t(" changes to a different installed shell. The command prompts for a password.")]),e("li",null,[e("b",{class:"fw-bold"},"-l"),t(" lists all installed shells.")])]),t(" For example, "),e("b",{class:"fw-bold"},"chsh -s /bin/ksh [username]"),t(" changes the default shell for the user to the Korn shell if it is installed on the computer.")])])])],-1)]))}const c=s(o,[["render",r],["__file","01.html.vue"]]),u=JSON.parse('{"path":"/02/01.html","title":"Section 2.1 The Linux Shell","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 2.1 The Linux Shell","description":"some description"},"headers":[{"level":2,"title":"2.1.1 Linux Shell Overview","slug":"_2-1-1-linux-shell-overview","link":"#_2-1-1-linux-shell-overview","children":[{"level":3,"title":"Introduction 00:00-00:27","slug":"introduction-00-00-00-27","link":"#introduction-00-00-00-27","children":[]},{"level":3,"title":"User Interfaces 00:27-01:11","slug":"user-interfaces-00-27-01-11","link":"#user-interfaces-00-27-01-11","children":[]},{"level":3,"title":"Command-Line Interface 01:11-01:49","slug":"command-line-interface-01-11-01-49","link":"#command-line-interface-01-11-01-49","children":[]},{"level":3,"title":"The Linux Shell 01:49-02:16","slug":"the-linux-shell-01-49-02-16","link":"#the-linux-shell-01-49-02-16","children":[]},{"level":3,"title":"View the Current Shell 02:16-02:44","slug":"view-the-current-shell-02-16-02-44","link":"#view-the-current-shell-02-16-02-44","children":[]},{"level":3,"title":"Changing Shells 02:44-03:35","slug":"changing-shells-02-44-03-35","link":"#changing-shells-02-44-03-35","children":[]},{"level":3,"title":"GUI Shell Sessions 03:35-03:59","slug":"gui-shell-sessions-03-35-03-59","link":"#gui-shell-sessions-03-35-03-59","children":[]},{"level":3,"title":"Summary 03:59-04:18","slug":"summary-03-59-04-18","link":"#summary-03-59-04-18","children":[]}]},{"level":2,"title":"2.1.2 Linux Shell Facts","slug":"_2-1-2-linux-shell-facts","link":"#_2-1-2-linux-shell-facts","children":[{"level":3,"title":"Linux Shell Definition and Use","slug":"linux-shell-definition-and-use","link":"#linux-shell-definition-and-use","children":[]},{"level":3,"title":"Linux Shell Access Methods","slug":"linux-shell-access-methods","link":"#linux-shell-access-methods","children":[]},{"level":3,"title":"Linux Shell Types","slug":"linux-shell-types","link":"#linux-shell-types","children":[]},{"level":3,"title":"Linux Shell Common Characteristics","slug":"linux-shell-common-characteristics","link":"#linux-shell-common-characteristics","children":[]}]},{"level":2,"title":"2.1.3 Shell Commands","slug":"_2-1-3-shell-commands","link":"#_2-1-3-shell-commands","children":[{"level":3,"title":"Shell Commands 00:00-00:32","slug":"shell-commands-00-00-00-32","link":"#shell-commands-00-00-00-32","children":[]},{"level":3,"title":"Enter Commands at the Shell Prompt 00:32-01:04","slug":"enter-commands-at-the-shell-prompt-00-32-01-04","link":"#enter-commands-at-the-shell-prompt-00-32-01-04","children":[]},{"level":3,"title":"PATH Environment Variable 01:04-01:41","slug":"path-environment-variable-01-04-01-41","link":"#path-environment-variable-01-04-01-41","children":[]},{"level":3,"title":"Execute from the Current Directory 01:41-02:02","slug":"execute-from-the-current-directory-01-41-02-02","link":"#execute-from-the-current-directory-01-41-02-02","children":[]},{"level":3,"title":"Options for Running Executables 02:02-02:50","slug":"options-for-running-executables-02-02-02-50","link":"#options-for-running-executables-02-02-02-50","children":[]},{"level":3,"title":"Case Sensitivity 02:50-03:18","slug":"case-sensitivity-02-50-03-18","link":"#case-sensitivity-02-50-03-18","children":[]},{"level":3,"title":"Command Completion 03:18-03:49","slug":"command-completion-03-18-03-49","link":"#command-completion-03-18-03-49","children":[]},{"level":3,"title":"Tab Completion Example 03:49-05:00","slug":"tab-completion-example-03-49-05-00","link":"#tab-completion-example-03-49-05-00","children":[]},{"level":3,"title":"Command History 05:00-06:13","slug":"command-history-05-00-06-13","link":"#command-history-05-00-06-13","children":[]},{"level":3,"title":"Summary 06:13-06:32","slug":"summary-06-13-06-32","link":"#summary-06-13-06-32","children":[]}]},{"level":2,"title":"2.1.4 Enter Shell Commands","slug":"_2-1-4-enter-shell-commands","link":"#_2-1-4-enter-shell-commands","children":[{"level":3,"title":"Introduction 00:00-00:17","slug":"introduction-00-00-00-17","link":"#introduction-00-00-00-17","children":[]},{"level":3,"title":"The pwd Command 00:17-00:36","slug":"the-pwd-command-00-17-00-36","link":"#the-pwd-command-00-17-00-36","children":[]},{"level":3,"title":"pwd and Tilde 00:36-01:01","slug":"pwd-and-tilde-00-36-01-01","link":"#pwd-and-tilde-00-36-01-01","children":[]},{"level":3,"title":"Full Directory Path 01:01-01:40","slug":"full-directory-path-01-01-01-40","link":"#full-directory-path-01-01-01-40","children":[]},{"level":3,"title":"The whoami Command 01:40-02:17","slug":"the-whoami-command-01-40-02-17","link":"#the-whoami-command-01-40-02-17","children":[]},{"level":3,"title":"The su Command 02:17-02:46","slug":"the-su-command-02-17-02-46","link":"#the-su-command-02-17-02-46","children":[]},{"level":3,"title":"The exit Command 02:46-03:19","slug":"the-exit-command-02-46-03-19","link":"#the-exit-command-02-46-03-19","children":[]},{"level":3,"title":"The uname Command 03:19-03:49","slug":"the-uname-command-03-19-03-49","link":"#the-uname-command-03-19-03-49","children":[]},{"level":3,"title":"Summary 03:49-04:11","slug":"summary-03-49-04-11","link":"#summary-03-49-04-11","children":[]}]},{"level":2,"title":"2.1.5 Work with the Linux Shell","slug":"_2-1-5-work-with-the-linux-shell","link":"#_2-1-5-work-with-the-linux-shell","children":[{"level":3,"title":"Introduction 00:00-00:18","slug":"introduction-00-00-00-18","link":"#introduction-00-00-00-18","children":[]},{"level":3,"title":"Command History 00:18-00:33","slug":"command-history-00-18-00-33","link":"#command-history-00-18-00-33","children":[]},{"level":3,"title":"The ls Command 00:33-01:15","slug":"the-ls-command-00-33-01-15","link":"#the-ls-command-00-33-01-15","children":[]},{"level":3,"title":"History Functions 01:15-02:10","slug":"history-functions-01-15-02-10","link":"#history-functions-01-15-02-10","children":[]},{"level":3,"title":"Tab Complete 02:10-02:40","slug":"tab-complete-02-10-02-40","link":"#tab-complete-02-10-02-40","children":[]},{"level":3,"title":"Tab Complete – In Action 02:40-03:14","slug":"tab-complete-–-in-action-02-40-03-14","link":"#tab-complete-–-in-action-02-40-03-14","children":[]},{"level":3,"title":"Tab Complete – Multiple Matches 03:14-04:03","slug":"tab-complete-–-multiple-matches-03-14-04-03","link":"#tab-complete-–-multiple-matches-03-14-04-03","children":[]},{"level":3,"title":"Paths 04:03-05:01","slug":"paths-04-03-05-01","link":"#paths-04-03-05-01","children":[]},{"level":3,"title":"Path Options 05:01-06:10","slug":"path-options-05-01-06-10","link":"#path-options-05-01-06-10","children":[]},{"level":3,"title":"Summary 06:10-06:28","slug":"summary-06-10-06-28","link":"#summary-06-10-06-28","children":[]}]},{"level":2,"title":"2.1.6 Linux Shell Command Facts","slug":"_2-1-6-linux-shell-command-facts","link":"#_2-1-6-linux-shell-command-facts","children":[{"level":3,"title":"Bash Shell Command Line Prompt","slug":"bash-shell-command-line-prompt","link":"#bash-shell-command-line-prompt","children":[]},{"level":3,"title":"$PATH Linux Shell Environment Variable","slug":"path-linux-shell-environment-variable","link":"#path-linux-shell-environment-variable","children":[]},{"level":3,"title":"Running an Executable File","slug":"running-an-executable-file","link":"#running-an-executable-file","children":[]},{"level":3,"title":"Command History Feature","slug":"command-history-feature","link":"#command-history-feature","children":[]},{"level":3,"title":"Tab Complete Feature","slug":"tab-complete-feature","link":"#tab-complete-feature","children":[]},{"level":3,"title":"Common Linux Shell Commands","slug":"common-linux-shell-commands","link":"#common-linux-shell-commands","children":[]}]}],"git":{"updatedTime":1736314799000},"filePathRelative":"02/01.md"}');export{c as comp,u as data};
