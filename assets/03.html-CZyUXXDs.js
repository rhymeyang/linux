import{_ as a,c as t,a as s,o as n}from"./app-D-CuBheB.js";const o={};function i(r,e){return n(),t("div",null,e[0]||(e[0]=[s('<p>As you study this section, answer the following questions:</p><ul><li>In general terms, what does the term sandboxing mean?</li><li>In technology terms, what are sandboxed applications?</li><li>What are some popular sandboxed environment packages?</li></ul><p>In this section, you will learn to:</p><ul><li>Use snaps and snapd</li><li>Use flatpak</li></ul><p>The key terms for this section include:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Sandboxed Applications</td><td> Sandboxed Applications, or Sandboxing, is the act of isolating programs on your computer to keep them from potentially interacting with other programs and systems. </td></tr><tr><td>Sandboxed Packages</td><td>Applications that are used to create sandboxed applications.</td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>CompTIA Linux+ XK0-005</td><td> 1.6 Given a scenario, build and install software <ul><li>Sandboxed applications</li><ul><li>snapd</li><li>Flatpak</li><li>AppImage</li></ul></ul></td></tr></tbody></table><h2 id="_13-3-1-introduction-to-sandboxed-applications" tabindex="-1"><a class="header-anchor" href="#_13-3-1-introduction-to-sandboxed-applications"><span>13.3.1 Introduction to Sandboxed Applications</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Sandboxing Applications 00:00-00:19 In this lesson, we&#39;re going to look at sandboxed applications. Sandboxed applications are becoming more common in the business world. We&#39;re going to review what sandboxing an application means, the purposes of sandboxing applications, and common software that&#39;s used to sandbox applications.</p><p>What is Sandboxing? 00:19-00:33 Traditional applications run on top of our systems. They use the same processing, ram, disk, and video hardware space.</p><p>Sandboxing is a security tool that isolates a program or process from parts of the system that it doesn&#39;t need to interact with in order to run.</p><p>Purpose of Sandboxing 00:33-01:15 When a user starts a program, it typically gains all permissions that the user has in order to run. This is usually more permissions than the program needs to operate. This can cause security issues when programs have vulnerabilities or are hacked. Malicious users can use the extended permissions these programs are using in order to gain a foothold on your system. Sandboxing is used to identify only the resources and permissions a program needs and then block everything else.</p><p>For example, most web browsers only need processing, ram, and video access. Disk space is only needed to store data if users are allowed to download files. We could create a sandboxed version of chrome that doesn&#39;t allow users to save to the hard disk.</p><p>Sandboxing Software 01:15-02:23 Systemd, the system management suite of tools, comes with sandboxing options that can be used to restrict how the processes access the system. This is a more involved process and requires users to create edit, and provision permissions for sandboxed processes.</p><p>SNAPs are bundled applications. These applications come with the intended application and its dependencies packaged together in a sandboxed environment. Users can install snap applications from the snap store. Many default programs such as Firefox, Nautilus, and other core applications are snaps in Ubuntu 22.04. Similar to SNAPs are apps built as a Flatpak. Flatpak apps are found on other Linux distributions, where SNAPs are primarily on Ubuntu and its derivatives.</p><p>Containers are another form of sandboxing application. They&#39;re similar to snaps but can work on Windows, Linux, and macOS environments. Docker is a popular program for building containers that many developers have begun adopting.</p><p>Virtual Machines are another common form of sandboxing applications. Many companies will run their programs or services through virtual machines. This not only provides a layer of security but allows these virtual machines to be portable.</p><p>Summary 02:23-02:37 In this lesson, we learned what Sandboxed applications are, the purpose of sandboxing applications, and looked at common software used to sandbox applications.</p><h2 id="_13-3-2-using-snaps-and-snapd" tabindex="-1"><a class="header-anchor" href="#_13-3-2-using-snaps-and-snapd"><span>13.3.2 Using snaps and snapd</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Using Snaps and snapd 00:00-00:21 Snaps is a distribution-independent software package installed and managed using a tool called snapd. Software provided by snaps is run in a sandbox and updated automatically. In this demo, we&#39;ll introduce the use of snapd by installing the Firefox web browser.</p><p>Installing and Running a Snap 00:21-01:34 The snap command is used to interact with snapd from the command-line. This command provides a similar interface to Aptitude and other popular package managers.</p><p>For example, we can use snap search &#39;Firefox&#39; to search for the snap we want to install. All snaps are distributed through an online service called the snap store at https://snapcraft.io/store. This command searches the snap store for snaps whose name or description matches the keyword &#39;Firefox.&#39; And the top result—the firefox—snap, is exactly what we&#39;re looking for.</p><p>To install it, we use sudo snap install firefox. After downloading and processing, the application has successfully been installed. At that point, we can run the firefox command to start the browser as if it had been installed through a conventional system package. And Firefox has also been added to our desktop environment&#39;s application launcher.</p><p>We can view a list of installed snaps with snap list and manually trigger an update for Firefox using sudo snap refresh firefox. As mentioned earlier, updates are also performed automatically in the background. To uninstall a snap, we can use sudo snap remove firefox.</p><p>Channels 01:34-02:31 Often, one snap will provide multiple channels, meaning that it&#39;s possible to select between alternate versions of the software to have installed. For example, many snaps are available as a stable channel by default but also provide beta</p><p>and/or edge channels, which may provide newer features, but may not be as thoroughly tested or debugged.</p><p>To select a channel, we use the --channel option during the snap install command, for instance, sudo snap install firefox --channel edge. We can see now that Firefox is version 107.0a1, whereas previously, it was 105.0.1-1.</p><p>For software that&#39;s currently installed, we can use snap refresh instead of snap install to modify its channel. For example, sudo snap refresh firefox --channel stable. Or we can use the convenience option sudo snap refresh firefox --stable.</p><p>Security Features 02:31-03:49 By default, snaps are run with limited access to system resources such as the filesystem and other commands or processes. This confinement is primarily managed through the AppArmor kernel security module. We&#39;ll discuss AppArmor in more detail in a future demonstration.</p><p>If AppArmor isn&#39;t installed or functioning, snapd will be unable to enforce full security confinement on snaps. For example, this may be the case on a system where the SELinux kernel security module is used instead of AppArmor.</p><p>Some snaps are published under what is called &quot;classic&quot; confinement, meaning that the software isn&#39;t confined and has the same access to system resources as software installed through a conventional package manager. Every classic snap is manually approved by the snap store and requires the <code>--classic</code> option to be passed into the snap install command.</p><p>For instance, if we attempt to run sudo snap install test-snapd-classic-confinement with no options, we&#39;re given a security warning. Passing in the --classic flag causes the snap to be installed normally. Some distros require additional setup to install classic snaps, such as creating a root level <code>/snap</code> directory (which isn&#39;t a standard root-level directory).</p><p>Summary 03:49-04:01 That&#39;s it for this demonstration. In this lesson, we gave you an overview of the usage of snapd and snaps for installing software.</p><h2 id="_13-3-3-using-flatpak" tabindex="-1"><a class="header-anchor" href="#_13-3-3-using-flatpak"><span>13.3.3 Using flatpak</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Using Flatpak 00:00-00:15 Flatpak is a tool for installing distribution-independent software for Linux and running it in a sandbox. In this demo, we will introduce the use of Flatpak by installing the Firefox web browser.</p><p>Adding a Repository 00:15-01:05 Flatpak software is published through collections called repositories. The de-facto standard repository for Flatpak software is Flathub (at flathub.org), which is maintained by the Flatpak project and provides a variety of desktop applications. Before we can install software, we will need to add Flathub to our Flatpak configuration:</p><p>sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo</p><p>It is possible to have multiple independent Flatpak repositories added to our configuration at the same time. For example, some developers publish stable versions of their applications to Flathub and use their own repositories to publish unstable beta or &quot;nightly&quot; versions.</p><p>Installing an Application 01:05-02:06 Now that we have Flatpak set up with Flathub, we can use flatpak search &#39;Firefox&#39; to search the names and descriptions of packages in Flathub for the word &#39;Firefox&#39;. This syntax is quite similar to Aptitude and other popular package managers.</p><p>We can see that Flathub provides a package for Firefox. Elevated privileges are necessary when installing a package for the whole system, so to install this package, the command is sudo flatpak install firefox. It searches for matching packages then prompts us for clarification about which specific package we want to install.</p><p>These first two options, and the fourth, are Firefox-related tools used by developers. This third option is the one we want, we can see it matches the application ID given by the search, org.mozilla.firefox, so I could type 3 and continue the installation. Or, I could avoid the ambiguity and specify the application ID in the first place, such as sudo flatpak install org.mozilla.firefox.</p><p>Running an application 02:06-02:25 After an application is installed, it can be run using the command flatpak run, as in flatpak run org.mozilla.firefox.</p><p>Applications installed through Flatpak are also automatically added to a desktop environment&#39;s application launcher.</p><p>We can see a list of all installed applications and their runtime dependencies with flatpak list</p><p>Current User Only 02:25-03:41 With Flatpak it is also possible to install software for the current user only. This means that elevated privileges are not required, and all the files and data for the software are stored in the user&#39;s /home directory instead of system directories. Flatpak software installed for one user cannot be run by other users.</p><p>We can do this by adding the --user option to our flatpak commands. First, note that when we added the Flathub remote earlier, it was to the system-wide configuration, which is separate from the current user-specific configuration, so we will need to add Flathub again, now to the user configuration:</p><p>flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo</p><p>And just as before, we can install Firefox with flatpak install --user org.mozilla.firefox and run it with flatpak run --user org.mozilla.firefox.</p><p>System administrators can create additional install locations in addition to the default system-wide one and user-specific ones, with custom permissions.</p><p>Customizing Permissions 03:41-05:06 Software provided by Flatpak is run in a sandbox, meaning that it is given restricted access to the system&#39;s resources compared to non-sandboxed software. This can be useful for security and maintenance purposes. However, software typically needs access to some system resources in order to work properly, so Flatpak provides a mechanism for granting (or revoking) specific permissions to applications to access resources outside of the sandbox.</p><p>We can see the permissions requested by the Firefox package from when we installed it. These include connecting to the network, opening windows, playing audio, saving files to the Downloads directory, printing; and various tasks related to interacting with the desktop environment and other software.</p><p>We can manage these permissions using flatpak override, for example flatpak override --unshare=network org.mozilla.firefox will remove Firefox&#39;s access to the network. If we attempt to open &#39;testout.com&#39;, we will get an error that the network isn&#39;t working.</p><p>If the application is currently running, then permission overrides take effect after the application has been restarted.</p><p>In addition to explicit permissions, Flatpak grants implicit permissions in certain situations, such as when the user selects in a file through a file dialog, the software is granted access to that file.</p><p>Extended application ID syntax 05:06-06:07 Some applications or runtime dependencies may have multiple packages providing different versions of the same software, for example different releases with their own version numbers, or a 32-bit build versus a 64-bit one. Flatpak supports having multiple such versions installed simultaneously. We can specify these details when installing and running the software using an extended form of the application ID.</p><p>For example, we can install version &#39;20.08&#39; of the Freedesktop Runtime (which is a dependency of many applications) for the &#39;x86_64&#39; architecture using sudo flatpak install org.freedesktop.Platform/x86_64/20.08. Because there is only one supported architecture for that package, we can omit the architecture specifier as in sudo flatpak install org.freedesktop.Platform//20.08, Flatpak will infer it for us.</p><p>Summary 06:07-06:18 That&#39;s it for this demonstration. This has been an introduction to the use of Flatpak for installing and running software.</p><h2 id="_13-3-4-sandboxed-application-facts" tabindex="-1"><a class="header-anchor" href="#_13-3-4-sandboxed-application-facts"><span>13.3.4 Sandboxed Application Facts</span></a></h2><p>A sandbox refers to a container full of sand and toys that lets a child easily build, demolish, learn, and play. In technology, a sandbox is a computer application that is isolated from other applications or the underlining operating system.</p><p>This lesson covers the following topics:</p><ul><li>Sandboxed applications</li><li>Sandbox packages</li></ul><h3 id="sandboxed-applications" tabindex="-1"><a class="header-anchor" href="#sandboxed-applications"><span>Sandboxed Applications</span></a></h3><p>Sandboxing is the act of isolating programs on your computer to keep them from potentially interacting with other programs and systems. Sandboxing can refer to environments for software development, software testing, or a place to run untrusted programs. Sandboxing has become popular as a way to run programs that are fully developed and designed not to depend on the underlining operations systems.</p><h3 id="sandbox-packages" tabindex="-1"><a class="header-anchor" href="#sandbox-packages"><span>Sandbox Packages</span></a></h3><p>The following table lists some popular applications that are used to run applications in a Sandboxed environment on Linux:</p><table><thead><tr><th>Package Name</th><th>Description</th></tr></thead><tbody><tr><td>snapd</td><td> The snapd daemon is used to manage packages called snaps. Some facts about snapd are: <ul><li> It runs in the background and can be installed or comes already installed on many Linux distributions. </li><li> It is developed by the company Canonical for Linux operating systems, specifically Ubuntu. </li><li> Applications that run in a snap are isolated from the host operating system. </li><li> Developers can use the command line tool Snapcraft to package their programs to run as a snap. </li><li> Canonical maintains the Snap store, where users can explore, upload, or install snaps. </li></ul></td></tr><tr><td>Flatpak</td><td> Flatpak is a utility that runs in a sandbox environment on Linux distributions. Some facts about Flatpak are: <ul><li> It comes preinstalled on many Linux distributions and can be installed with support by many others. </li><li> Repositories called Remotes are used to host applications that can be installed. </li><li> A sandbox is used to run applications and can include entire libraries to run however libraries can also be shared between apps. </li><li>Flatpak apps typically use a graphical interface.</li></ul></td></tr><tr><td>AppImage</td><td> AppImage is used to distribute fully self-contained software packaged on Linux distributions. Some facts about AppImage are: <ul><li> AppImage packages are intended to be simple, portable, and require no installation. </li><li>AppImage does not need root access to the system.</li><li> A single AppImage package contains one file that contains everything, including all libraries that are required. </li><li> Applmage does not depend on any libraries that are not part of the package. </li><li> Developers using AppImage can focus on creating applications and not worry about the underlining version of Linux. </li></ul></td></tr></tbody></table>',70)]))}const p=a(o,[["render",i],["__file","03.html.vue"]]),d=JSON.parse('{"path":"/13/03.html","title":"Section 13.3 Sandboxed Applications","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 13.3 Sandboxed Applications","description":"some description"},"headers":[{"level":2,"title":"13.3.1 Introduction to Sandboxed Applications","slug":"_13-3-1-introduction-to-sandboxed-applications","link":"#_13-3-1-introduction-to-sandboxed-applications","children":[]},{"level":2,"title":"13.3.2 Using snaps and snapd","slug":"_13-3-2-using-snaps-and-snapd","link":"#_13-3-2-using-snaps-and-snapd","children":[]},{"level":2,"title":"13.3.3 Using flatpak","slug":"_13-3-3-using-flatpak","link":"#_13-3-3-using-flatpak","children":[]},{"level":2,"title":"13.3.4 Sandboxed Application Facts","slug":"_13-3-4-sandboxed-application-facts","link":"#_13-3-4-sandboxed-application-facts","children":[{"level":3,"title":"Sandboxed Applications","slug":"sandboxed-applications","link":"#sandboxed-applications","children":[]},{"level":3,"title":"Sandbox Packages","slug":"sandbox-packages","link":"#sandbox-packages","children":[]}]}],"git":{"updatedTime":1736831526000},"filePathRelative":"13/03.md"}');export{p as comp,d as data};
