import{_ as t,c as o,a,o as i}from"./app-CsWvKd9L.js";const s="/linux/images/08/lvm_components.png",l={};function n(d,e){return i(),o("div",null,e[0]||(e[0]=[a('<p>As you study this section, answer the following questions:</p><ul><li>After you create your logical volume, what should you do?</li><li>What should you do before running <b>vgreduce</b> ?</li><li>Which command extends the size of a logical volume?</li><li>What is the difference between <b>pvcreate</b> and <b>lvcreate</b> ?</li></ul><p>In this section, you will learn to:</p><ul><li>Create and use Logical Volume Manager (LVM)</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td> Logical Volume Manager <br> (LVM) </td><td> A system of managing logical volumes or file systems made up of physical volumes mapped through a volume group. </td></tr><tr><td>Physical volume</td><td> Physical block devices or other disk-like devices that LVM uses as the building blocks for volume groups. </td></tr><tr><td>Volume group</td><td> An abstract container that combines physical volumes into the storage pools from which logical volumes are created. </td></tr><tr><td>Logical volume</td><td> A portion of the volume group that can be formatted to accommodate a file system. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 2.1 Manage storage devices <ul><li>Configure Logical Volume management</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.3 Given a scenario, configure and manage storage using the appropriate tools. <br><ul><li> Creating and modifying volumes using Logical Volume Manager (LVM) </li><li style="list-style:none;display:inline;"><ul><li>Commands</li><li style="list-style:none;display:inline;"><ul><li>vgcreate</li><li>pvs</li><li>pvcreate</li><li>lvcreate</li><li>lvchange</li><li>lvresize</li><li>vgextend</li></ul></li></ul></li></ul><p> 4.1 Given a scenario, analyze and troubleshoot storage issues </p><ul><li> Device issues <ul><li>LVM</li></ul></li></ul></td></tr></tbody></table><h2 id="_8-4-1-logical-volume-manager-lvm" tabindex="-1"><a class="header-anchor" href="#_8-4-1-logical-volume-manager-lvm"><span>8.4.1 Logical Volume Manager (LVM)</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Logical Volume Manager (LVM) 00:00-00:38 In this lesson, we&#39;ll discuss Logical Volume Manager, or LVM. LVM provides an alternative when partitioning hard disk drives in Linux systems.</p><p>With LVM, you define volume groups from all the storage devices in your system instead of defining and creating partitions. Then, from the volume group, you allocate space to specific logical volumes, which are managed by the Logical Volume Manager. Then, instead of mounting a partition in the file system, you mount logical volumes at various mount points in the file system.</p><p>LVM Flexibility 00:38-02:29 LVM provides a lot of flexibility. For example, on this Linux system, there are two LVM volumes. The first is mounted in /opt, where applications are installed. The other is mounted at /var, where the email queue, log files, print queues, and such are stored.</p><p>It&#39;s possible that the logical volume mounted in /var will run out of disk space at some point because of the type of data stored on it. However, the /opt directory doesn&#39;t need much space once the apps are installed. With LVM, we can reallocate space from the logical volume mounted at /opt to the logical volume mounted at /var. The reallocation can happen without disruption to the system and users. Reallocation is possible with traditional disk partitions, but it would involve backing up both partitions, resizing them, and restoring data from backup.</p><p>LVM even allows you to dynamically add space to the system. For example, suppose you have a logical volume mounted at the /home directory where all end users&#39; /home directories reside. You also have a logical volume defined with LVM mounted in the /home directory. This means all the end users&#39; /home directories are stored inside this logical volume.</p><p>Now, let&#39;s say you begin to run out of space. To add capacity to this logical volume, you can simply install a new hard disk drive in the system and allocate all its space to the logical volume mounted at the /home. This will instantly increase the volume&#39;s size without the need to backup data or resize partitions.</p><p>LVM Components 02:29-03:50 Now, let&#39;s look at the components required for creating logical volumes. LVM creates a pool of storage space called a volume group. From the volume group&#39;s space, you can allocate logical volumes. You define the volume and assign it a specific amount of space. LVM uses the components you see here.</p><p>First are the physical volumes. Physical volumes are a partition on a hard disk drive or all the space on the hard disk drive. Just remember that the storage space available on these physical volumes is assigned to and pooled in the volume group. Once the storage space is assigned to the volume group, you no longer need to worry about physical partitions or disk boundaries. It&#39;s all just available storage space.</p><p>The volume group consists of the combined available space of the physical volumes. This means you can add hard disks or additional partitions to the volume group whenever needed and then allocate the space to logical volumes.</p><p>You can format a logical volume and add to it a file system or create a file system on it such as ext3, ext4, or riser. Then, you can mount the logical volume in a directory in your file system and store data on it, just as you would a partition.</p><p>Create LVM Volumes 03:50-04:09 Let&#39;s walk through the process of creating a logical volume. But first, be sure not to confuse physical volumes with logical volumes. If you decide to use an existing partition as a physical volume for the volume group, set its partition type to Linux LVM, which is type code 8e.</p><p>Clear the Disk&#39;s Partition Table 04:09-05:00 If you decide to use an entire hard disk as a physical volume, be aware that it can&#39;t contain a partition table. If the disk you want to use has an existing partition table, you need to clear it out. You can use the dd command, as shown here, to do that.</p><p>In this example, we&#39;ll clear the partition table for an MBR disk. We&#39;ll override the first 512 KB on the hard disk drive because this is where the master boot record resides. Here we&#39;ll take junk characters from the /dev/0 file and write them to the hard disk, /dev/sdb. Then we&#39;ll copy 512 KB and do this only once. This essentially overrides the first 512 K block on the hard disk drive with nothing.</p><p>Define LVM Physical Volumes 05:00-05:47 Once you&#39;ve decided which disks or partitions you want to use, you then use the pvcreate command at the shell prompt to define these disks or partitions as physical volumes. The syntax is pvcreate, followed by the device filename of the device you&#39;re adding. Here we&#39;re adding an entire hard disk drive.</p><p>First, you define sdb, sdc, and sdd as physical volumes. Then use the pvscan -v command to view all the physical volumes with their sizes currently defined on the system. Here we see sdd, sdc, and sdb with their sizes. Notice they&#39;re not the same size, but LVM doesn&#39;t care.</p><p>Create a Volume Group 05:47-06:46 Next, you need to assign the physical volumes to the volume group. This takes the space on the physical volumes and allocates it to the volume group to be available to be assigned to a logical volume.</p><p>To create a volume group, use the vgcreate command followed by the name of the volume group you want to create and then the name of the first physical volume we want to assign to that volume group.</p><p>In this case, we created a volume group named RESEARCH and assigned the sdb physical volume to that volume group. You can specify only one physical volume with the vgcreate command. So, if you want to add two more physical volumes, run a second command called vgextend, followed by the volume name, plus a list of the rest of the physical volumes you want to add. Then, run the pbscan command to see that sdb, c, and d are now added to the same volume group called RESEARCH.</p><p>Define Logical Volumes 06:46-07:53 With the volume group defined, we can use the allocated space to define our logical volumes or LVs. To do this, enter lvcreate, then use the dash L (-L) option to specify the volume size. Then use the dash n (-n) option to specify the name of the volume, and then specify which volume group you want to use space from.</p><p>In this example, a 10 GB volume named res_vol was created with the space from the RESEARCH volume group. A second volume named dev_vol was created within that same volume group. So, here we just defined two logical volumes within a single volume group, which was created by pooling storage space from three hard disk drives. Pretty cool. Now, suppose we end up needing more space for any of these volumes. In that case, we just need to install a new storage device in the system, define it as a physical volume, allocate a space to the volume group, and then run the lvextend command to increase the size of the volume.</p><p>Mount Logical Volumes 07:53-08:47 Once a logical volume is created, we need to create a file system on it and mount it in the file system. To create a file system on the logical volume, enter mkfs -t followed by the type of file system you want to create. Then, specify the device file for the logical volume. Then, enter /dev/, followed by the name of the volume group that the logical volume resides in, and then the name of the logical volume.</p><p>Once the file system is created, you can mount it in the file system. Use the mount command and -t followed by the type of file system we just created on the logical volume. Then, once again, specify the device file for the logical volume using the same syntax as before. Then end the command specifying where to mount it in the file system.</p><p>Summary 08:47-09:10 That&#39;s it for this lesson. In this lesson, we talked about how to use LVM on a Linux system. We first talked about how LVM works. Then, we discussed the components required for LVM, and we finished by reviewing the process for creating a logical LVM volume.</p><h2 id="_8-4-2-using-lvm" tabindex="-1"><a class="header-anchor" href="#_8-4-2-using-lvm"><span>8.4.2 Using LVM</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Using LVM 00:00-00:25 In this demonstration, we&#39;re going to practice working with Logical Volume Manager, LVM. In order to create an LVM volume on our system here, we need first to define our physical volumes, then create a volume group from those physical volumes, and finally, within that volume group, define one or more logical volumes.</p><p>Create Physical Volumes 00:25-02:18 First, we need to view the physical drives allocated to the system. One way to do that is to look in your /dev directory. After doing an ls, you can see all of our drives here. Typically, the first drive containing the boot partition will be called sda. We have three here because there are three partitions on this disk. We&#39;re not going to touch sda. They were created when the system was initially installed, and you&#39;ll see those as we go through the demonstration. However, sdb, and sdc are new hard disks, so there&#39;s nothing on them. We want to use them to create LVM logical volumes. The first thing we need to do is create physical volumes out of sdb and sdc.</p><p>Let&#39;s create a physical volume out of sdb. This is done using the pvcreate command. We simply enter sudo pvcreate, then the name of the device file, /dev/sdb. We&#39;re told we have a new physical volume created for LVM out of sdb. Let&#39;s do the same thing for sdc. Since we just created these, let&#39;s run sudo pvs to ensure they show up properly.</p><p>The first one was created during the system installation on sda. We&#39;re not going to be concerned with that one. We&#39;ll be concerned with these two physical volumes: sdb and sdc. Notice that each one is about 10 GB in size.</p><p>By defining these as LVM physical volumes, we can aggregate the space from these two storage devices and create a logical volume on them. Currently, we can&#39;t yet because they&#39;re still running independently of each other. In order to define logical volumes on these two devices, we need first to add them to a single volume group.</p><p>Create Volume Groups 02:18-03:55 We want to create a new one, so we do the sudo vgcreate command, then specify the name of the volume group we want to create. Let&#39;s call it datavg, and then we can specify which physical volume we want to add to that volume group initially. Let&#39;s add /dev/sdb.</p><p>At this point, we&#39;ve created the volume group named datavg and added one of the physical volumes to that group. It&#39;s important to note that the vgcreate command can be used only to create a volume group. It can&#39;t be used to modify a volume group, such as adding another physical volume. We need to use a different command if we want to add another physical volume to an existing volume group.</p><p>This command is vgextend. We run sudo vgextend, and we specify the name of the volume group—the existing volume group—because we&#39;re modifying it. We&#39;re not creating it now. Then we specify the name of the physical volume that we want to add to that existing volume group, /dev/sdc.</p><p>At this point, we should have a single volume group defined, and the two physical volumes should be members of the same volume group. We can check out our volume groups by running the command sudo vgs.</p><p>We have a volume group named datavg now, and sdb and sdc are both members of that volume group. With the volume group defined, we can now finally define logical volumes from within that volume group. We could define just one logical volume, or we could define many logical volumes.</p><p>Create Logical Volumes 03:55-04:42 To define a logical volume, we use the lvcreate command. We enter sudo lvcreate, then -n to give it the name datalv. After that, -L and the volume size we want to create. Let&#39;s specify that it be 10 GB in size. Then we have to specify which volume group we want to create this volume within. In this case, we&#39;re going to use the datavg volume group that we just defined up here using our two physical volumes.</p><p>Hit Enter and the logical volume shared has been created. We can verify this using the lvs command. As you can tell, this command won&#39;t work unless we use sudo. Now there&#39;s a logical volume called datalv.</p><p>Modifying LVM 04:42-06:18 There may be a time when you need to add more space to your logical volume. Let&#39;s say we&#39;ve filled up the 10 GB allocated to datalv, and we need to add 5 GB. We can do that with the lvextend command. Keep in mind that you must have enough space in the attached volume group to extend it; otherwise, this won&#39;t work. By issuing the vgs command, we can check how much free space is in our volume group. Great, it looks like we have some wiggle room to add 5 GB to our logical volume. If we didn&#39;t have enough space, we would have to add another physical volume and then add it to the volume group as we did before.</p><p>Now we can issue the command sudo lvextend -L +5G /dev/datavg/datalv to add the additional space. If we wanted to take away space, we would issue lvreduce. However, this doesn&#39;t happen very often. Another similar command to lvextend is lvresize which can do some of the same functions as extend. When we run the sudo lvs, you can see our space has increased.</p><p>Our logical volumes are now ready to receive a file system attached to them. You&#39;d simply format and add a file system to it. Then, it could be assigned to a folder/mount point. Keep in mind that if you have existing mounts already in use on the logical volume, you&#39;ll most likely have to run resize2fs or xfs_growfs tools so that the system knows there&#39;s more space available to the mount point.</p><p>Summary 06:18-06:38 In this demonstration, we first used LVM to define physical volumes from two hard disk drives installed on the system. We then defined a volume group from those physical volumes, and then within that volume group, we defined a logical volume.</p><h2 id="_8-4-3-lvm-facts" tabindex="-1"><a class="header-anchor" href="#_8-4-3-lvm-facts"><span>8.4.3 LVM Facts</span></a></h2><p>The Logical Volume Manager (LVM) provides an alternative method for managing partitions on a Linux system. The LVM gives a system administrator more flexibility in allocating system storage.</p><p>This lesson covers the following topics:</p><ul><li>LVM components</li><li>LVM commands</li><li>Device mapper</li><li>Persistent block device naming</li></ul><h3 id="lvm-components" tabindex="-1"><a class="header-anchor" href="#lvm-components"><span>LVM Components</span></a></h3><p>The LVM has three components that must be configured to manage storage, as shown in the illustration and table below.</p><p><img src="'+s+'" alt="Diagram of LVM components"></p><table><thead><tr><th>Component</th><th>Description</th></tr></thead><tbody><tr><td>Physical volume</td><td> Physical volumes are physical block devices or other disk-like devices that are used by the LVM as the building blocks for volume groups. Physical volumes can be: <ul><li>Regular storages devices, such as a whole hard disk.</li><li>Partitions on a hard disk.</li><li> Devices created by the device mapper, like a RAID array. </li></ul></td></tr><tr><td>Volume group</td><td> The LVM combines physical volumes into storage pools known as volume groups. A volume group consists of all the space available on the physical volumes grouped together. <ul><li> The storage space within a volume group can come from many different physical volumes on many different storage devices. </li><li> Additional hard disks or additional partitions can be added to the volume group at any time. </li></ul></td></tr><tr><td>Logical volume</td><td> A volume group can be divided up into any number of logical volumes. <ul><li> Logical volumes are the primary component that users and applications interact with. </li><li> Logical volumes are functionally equivalent to a partitions on a physical disk. </li><li> Logical volumes can be formatted to accommodate a file system. </li><li> Logical volumes can be resized and moved while they are still mounted and running. </li><li> Logical volumes may be identified by using descriptive names (e.g., Research or Marketing) instead of physical disk names such as SDA and SDB. </li></ul></td></tr></tbody></table><h3 id="lvm-commands" tabindex="-1"><a class="header-anchor" href="#lvm-commands"><span>LVM Commands</span></a></h3><p>The following table describes common LVM commands:</p><table><thead><tr><th>Command</th><th>Description</th><th>Examples</th></tr></thead><tbody><tr><td><b>pvcreate</b></td><td>Initializes the physical volume for later use by the LVM</td><td><b>pvcreate /dev/sdb</b> creates a physical volume from the second hard disk in the system. <br><b>pvcreate /dev/sdd1</b> creates a physical volume from the first partition on the fourth hard disk in the system. </td></tr><tr><td><b>pvscan</b></td><td> Scans all disks for physical volumes and displays all found physical volumes on the system and their associated volume groups. The <b>pvs</b> command does nearly the identical thing and is frequently used in place of pvscan. </td><td></td></tr><tr><td><b>vgcreate</b></td><td>Creates a new volume group</td><td><b>vgcreate system /dev/sdb</b> creates a volume group named <i>system</i> and adds the <i>/dev/sdb</i> physical volume to the group. <br><b>vgcreate backup /dev/sdd</b> creates a volume group named <i>backup</i> and adds the <i>/dev/sdd</i> physical volume to the group. </td></tr><tr><td><b>vgscan</b></td><td> Search for all volume groups. The <b>vgs</b> command does nearly the identical thing and is frequently used in place of vgscan. </td><td></td></tr><tr><td><b>vgextend</b></td><td> Adds one or more physical volumes to an existing volume group, increasing its available storage space </td><td><b>vgextend system /dev/sdc</b> adds the <i>/dev/sdc</i> physical volume to the existing system volume group. </td></tr><tr><td><b>lvcreate</b></td><td> Creates a new logical volume from the space available in a volume group. Below are some options for this command. <ul><li><b>-L</b> specifies the size. Use the following size suffixes: <ul><li><b>K</b> for kilobytes</li><li><b>M</b> for megabytes</li><li><b>G</b> for gigabytes</li><li><b>T</b> for terabytes</li><li><b>P</b> for petabytes</li><li><b>E</b> for exabytes</li></ul></li><li><b>-n</b> specifies the name.</li></ul></td><td><b>lvcreate -L 20G -n data system</b> creates a 20-GB logical volume named <i>data</i> in the system volume group. <br><b>lvcreate -L 2T -n Storage1 backup</b> creates a 2-TB logical volume named <i>Storage1</i> in the <i>backup</i> volume group. <br><b>lvcreate -L 1T -n Storage2 backup</b> creates a 1-TB logical volume named <i>Storage2</i> in the <i>backup</i> volume group. </td></tr><tr><td><b>lvchange</b></td><td>Change the attributes of logical volumes</td><td><b>lvchange --resync LV00</b> force the resynchronization of a mirror. <br><b>lvchange --refresh LV00</b> reload the metadata for a logical volume. </td></tr><tr><td><b>lvscan</b></td><td> Scans all known volume groups in the system for logical volumes and displays the results. The <b>lvs</b> command does nearly the identical thing and is frequently used in place of lvscan. </td><td></td></tr><tr><td><b>lvresize</b></td><td>Resize a logical volume</td><td><b>lvresize --size 100G /dev/vg_name/lv_name</b> resize the <i>lv_name</i> logical volume to 100G. </td></tr><tr><td><b>lvextend</b></td><td> Extends the size of a logical volume (The <b>-L</b> option specifies the new volume size.) </td><td><b>lvextend -L 30G data</b> extends the data logical volume to a total of 30 gigabytes. <br><b>lvextend -L +10G data</b> extends the data logical volume by another 10 gigabytes. </td></tr></tbody></table><p>You can also use the commands below to manage an LVM-based storage configuration.</p><ul><li>Use <b>pvmove</b> to move the data from one physical volume to another physical volume.</li><li>Use <b>pvremove</b> to remove the LVM label from a device so that it will no longer be recognized as a physical volume.</li><li>Use <b>vgreduce</b> to remove a physical volume from an existing volume group. Before running <b>vgreduce</b> , you must use <b>pvmove</b> to shift the data to another physical volume.</li><li>Use <b>vgremove</b> to delete a volume group. Before you can use <b>vgremove</b> , you must first remove all logical volumes that have been defined in the volume group.</li><li>Use <b>lvreduce</b> to reduce the size of a logical volume.</li><li>Use <b>lvremove</b> to remove a logical volume from the system.</li></ul><p>After your logical volumes have been created, you need to create file systems on them and then mount them:</p><ul><li>You create a file system using <b>mkfs</b> , just as with traditional partitions. Use the following syntax: <b>mkfs -t <i>file_system</i> /dev/ <i>volume_group</i> / <i>logical_volume</i></b></li><li>You mount a logical volume using the <b>mount</b> command, just as you would to mount file systems on traditional partitions. Use the following syntax: <b>mount -t <i>file_system</i> /dev/ <i>volume_group</i> / <i>logical_volume</i> / <i>mount_point</i></b></li></ul><h3 id="device-mapper" tabindex="-1"><a class="header-anchor" href="#device-mapper"><span>Device Mapper</span></a></h3><p>The device mapper is a Linux kernel framework for mapping physical block devices onto higher-level virtual block devices.</p><ul><li>The functions of the device mapper are used by the LVM to create logical volumes and software RAIDs.</li><li>Logical volumes and RAIDs can be found in the /dev/mapper directory.</li><li>The <b>mdadm</b> utility can be used to manage and monitor software RAID devices.</li></ul><h3 id="persistent-block-device-naming" tabindex="-1"><a class="header-anchor" href="#persistent-block-device-naming"><span>Persistent Block Device Naming</span></a></h3><p>If a Linux system has more than one SATA, SCSI, or IDE disk controller, the order in which their corresponding device nodes are added may change between bootups. When this happens, device names like <code>/dev/sda</code> and <code>/dev/sdb</code> may change on each boot. Persistent block device naming solves this issue.</p><ul><li> Block devices are given a persistent name using the devices ID, UUID, or path name. <ul><li> The device&#39;s hardware serial number is used to create a persistent name which is added as a symbolic link in the /dev/disk/by-id directory. </li><li> The UUID of the file system on the device is used to create a persistent name which is added as a symbolic link in the /dev/disk/by-uuid directory. </li><li> The shortest physical path as determined by the sysf pseudo file system is used to create a persistent name which is added as a symbolic link in the /dev/disk/by-path directory. </li></ul></li><li> If device mapper multi-pathing is used, a persistent name will be added to the /dev/disk/by-multipath directory. </li><li> Persistent names that are referenced in scripts will always point to the same disk device. </li></ul>',72)]))}const h=t(l,[["render",n],["__file","04.html.vue"]]),u=JSON.parse('{"path":"/08/04.html","title":"Section 8.4 Logical Volume Manager","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 8.4 Logical Volume Manager","description":"some description"},"headers":[{"level":2,"title":"8.4.1 Logical Volume Manager (LVM)","slug":"_8-4-1-logical-volume-manager-lvm","link":"#_8-4-1-logical-volume-manager-lvm","children":[]},{"level":2,"title":"8.4.2 Using LVM","slug":"_8-4-2-using-lvm","link":"#_8-4-2-using-lvm","children":[]},{"level":2,"title":"8.4.3 LVM Facts","slug":"_8-4-3-lvm-facts","link":"#_8-4-3-lvm-facts","children":[{"level":3,"title":"LVM Components","slug":"lvm-components","link":"#lvm-components","children":[]},{"level":3,"title":"LVM Commands","slug":"lvm-commands","link":"#lvm-commands","children":[]},{"level":3,"title":"Device Mapper","slug":"device-mapper","link":"#device-mapper","children":[]},{"level":3,"title":"Persistent Block Device Naming","slug":"persistent-block-device-naming","link":"#persistent-block-device-naming","children":[]}]}],"git":{"updatedTime":1736669805000},"filePathRelative":"08/04.md"}');export{h as comp,u as data};
