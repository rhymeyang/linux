import{_ as t,c as o,a as s,o as n}from"./app-CsWvKd9L.js";const a={};function r(i,e){return n(),o("div",null,e[0]||(e[0]=[s('<p>As you study this section, answer the following questions:</p><ul><li>What is the purpose of having multiple name servers when configuring the DNS?</li><li>Which file provides the system with domain names mapped to IP addresses?</li><li>What function does the /etc/nsswitch.conf file provide?</li><li>What are the advantages of using a DNS server for name resolution?</li></ul><p>In this section, you will learn to:</p><ul><li>Configure DNS settings</li><li>Test name resolution</li><li>Use nslookup</li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Domain names</td><td> Names that are used to identify one or more IP addresses, such as www.testout.com and www.google.com. Domain names are found in URLs to identify particular web pages. </td></tr><tr><td> Domain Name System <br> (DNS) </td><td> A computer server that contains a database of public IP addresses and their associated hostnames, which is used to convert IP addresses to real domain names. DNS is also called Domain Name Service and Domain Name Server. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 3.1 Configure networking <ul><li>Find the IP address or DNS of a host</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.5 Given a scenario, use the appropriate networking tools or configuration files <ul><li> Name resolution <ul><li>nsswitch</li><li>/etc/resolv.conf</li><li> Bind-utils <ul><li>dig</li><li>nslookup</li><li>host</li></ul></li></ul></li></ul><p> 4.5 Given a scenario, use systemd to diagnose and resolve common problems with a Linux system </p><ul><li> Common problems <ul><li>Name resolution failure</li></ul></li></ul></td></tr></tbody></table><h2 id="_12-6-1-hostname-and-dns-configuration" tabindex="-1"><a class="header-anchor" href="#_12-6-1-hostname-and-dns-configuration"><span>12.6.1 Hostname and DNS Configuration</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Hostname and DNS Configuration 00:00-00:43 When you&#39;re configuring IP settings on a Linux network interface, there are two key parameters that you need to remember to set. First, you need to specify a hostname for the system, and second, you&#39;ll need to specify the IP address of the DNS server you want to use for name resolution. When using a web browser, you can use domain names to navigate to a particular host on the web. But be aware that your Linux system can&#39;t work with these alphanumeric domain names. When you open a web browser and enter a URL in the URL field, your system has no clue where to get the requested information. For this to work, your local system must first resolve that alphanumeric domain name into a binary IP address that it can read.</p><p>/etc/hosts 00:43-02:32 There are two different ways that this name resolution can occur on a Linux system. In the old days, basic hostname to IP address mapping was performed in this file right here: /etc/hosts. The contents of the host file are pretty basic. It says, &quot;This IP address maps to this name, as well as this one right here.&quot; We&#39;ll talk about what that means in just a second. Be aware that the /etc/hosts file is still used on Linux systems, even though this is the oldest mechanism around for name resolution. The /etc/hosts file is the first name resolver used by default on Linux systems. When you try to access a URL on the internet, the first place that Linux will look is in this file. And only if a record for the requested domain name doesn&#39;t exist in this file will the operating system try to resolve that hostname using a DNS server.</p><p>You need to manage this host file very carefully. Many network hacks can exploit this functionality of the operating system. Monitor this file carefully to ensure it doesn&#39;t contain malicious mappings.</p><p>With that warning in mind, let&#39;s look at the syntax you use within the hosts file. As we said a minute ago, you first enter the IP address of the host, followed by the hostname, and then optionally, you can enter an alias. In this case, we&#39;re saying that the hostname fs5.corpnet.com maps to an IP address of 192.168.1.1. Your system can&#39;t use this string of text for sending data across the network. This IP address, however, can use it. It can determine how to get packets from your system to that destination&#39;s IP address. Over here, we have an optional alias that you can use. In this case, we&#39;re just saying that you can either type &#39;fs5.corpnet.com&#39; and have it map to 192.168.1.1, or you can just type �fs5,&#39; and it will also map to 192.168.1.1.</p><p>DNS Resolution 02:32-06:25 In the early days of IP networking, we used the hosts file to resolve hostnames into IP addresses. However, today it isn&#39;t feasible to use the hosts file as the sole means of name. A better option, and the one we use today, is to submit the domain name you need to be resolved into an IP address to a DNS server. When a DNS server receives a name resolution request, it matches the hostname and the domain name submitted with the IP address that maps to it and returns it to the requesting system. Then your system can contact the specified host address using the IP address instead of the domain name.</p><p>Here&#39;s how it works. We have our workstation A down here, and it needs to resolve a hostname for some URLs. Say we&#39;re trying to reach www.corpnet.com. The system needing to resolve the hostname will send that request to the DNS server it has been preconfigured to use. And it does so over IP port 53.</p><p>At this point, the DNS server has to make a decision. If the DNS server is authoritative for the zone where the requested hostname resides, it&#39;ll respond with the appropriate IP address.</p><p>When I say authoritative, a DNS server is considered authoritative if it contains a record for the hostname being requested in its own internal database of name mappings. In this example, we&#39;re trying to resolve www.corpnet.com into the appropriate IP address, but this DNS server only has records for the eastsim.com and westsim.com domains. It doesn&#39;t know where to get information about www.corpnet.com. It looks in its database and says, &quot;I don&#39;t know. I don&#39;t have any records for corpnet.com.&quot; If it did, it would just go ahead and respond to the workstation. But because it doesn&#39;t, it&#39;s got to find out who has that information.</p><p>In this situation, the DNS server is going to send a request to a root-level DNS server out on the internet. There are 13 of these root-level DNS servers out on the internet, and every DNS server in the world is preconfigured automatically with the IP addresses of these root-level DNS servers. These root-level DNS servers are configured with records that resolve to authoritative DNS servers for each top-level DNS domain, such as .com, .gov, .edu, and so on. This root-level DNS server responds to your DNS server with the IP address of a DNS server that&#39;s authoritative for just the top-level domain of the domain name you&#39;re trying to resolve. In this situation, the top-level domain is .com. The root-level DNS server&#39;s going to return an IP address of a DNS server that&#39;s authoritative for the .com domain. Then your DNS servers send a name resolution query to the DNS server over here that&#39;s authoritative for the hostname&#39;s domain—in this case, .com.</p><p>More than likely, this DNS server doesn&#39;t have a mapping for www.corpnet.com. All it knows is where the authoritative server for the corpnet.com domain is. It will respond with yet another IP address to your DNS server that says, &quot;Hey, for information about corpnet.com, here&#39;s an IP address that you can go to.&quot; Then your DNS server contacts that authoritative DNS server. This server is authoritative. That means it has a record for the hostname you&#39;re trying to resolve. In this scenario, it does have a record for www.corpnet.com, so now it responds to your DNS server with the appropriate IP address for this hostname.</p><p>Finally, your DNS server returns that IP address to your workstation, and then your workstation can contact www.corpnet.com directly using its IP address. Something you might want to remember here is the fact that after your DNS server has gone through this entire process—trying to resolve www.corpnet.com into an IP address—it&#39;s actually going to cache that IP address locally, right here. That way, if your system—or any other system, for that matter—wants to resolve that hostname again into an IP address, it doesn&#39;t have to go through this whole process. It just pulls it out of its cache. This can save time and network bandwidth.</p><p>/etc/resolv.conf 06:25-07:53 In order to make this entire system work, you have to provide your Linux system with the IP address of the DNS server to which it can send name resolution requests. This is configured in /etc/resolv.conf. This file defines the search prefixes, as well as the name servers that the Linux system is going to use.</p><p>Here&#39;s some sample content. This parameter right here, Search, specifies the domain name that should be used to automatically complete incomplete hostname requests. For example, let&#39;s suppose I wanted to resolve fs5. All I did was say, &quot;Hey, I need to get data to a host with the name of fs5.&quot; Well, because I didn&#39;t provide a domain name with the hostname, this parameter will automatically populate it with this domain name. The request would go to the DNS server as not fs5 but fs5.corpnet.com. And, of course, if I had specified the full domain name, then this parameter would be ignored, and we&#39;d just submit the full domain name to the DNS server.</p><p>The following two parameters, the name server parameters, are used to specify the IP addresses of the DNS servers you want to use for name resolution. And you can configure up to three different DNS servers. This is a good idea because if this first server fails, doesn&#39;t resolve, or is otherwise unreachable for some reason, it will just go to the next one and try it, and it will keep going down the list until one of them responds. The syntax, as you can see, is pretty simple. We just enter &#39;nameserver&#39; and then the IP address of the name server.</p><p>/etc/nsswitch.conf 07:53-08:41 You can use this file right here, the /etc/nsswitch.conf file to determine the order in which services will be used for name resolution. This nsswitch stands for name service switch. There are two specific lines that you want to look at: hosts and networks. These two entries specify the order in which services will be used to resolve hostnames into IP addresses. Notice that by default, it says files and DNS for both hosts and networks. This means that the /etc/hosts file will be searched first. The request will be sent to the DNS server if a name mapping isn&#39;t found in the hosts file. You can change this, if you want, by switching the order around; in which case, we&#39;d send the request first to the DNS server, and only if the DNS server is unable to respond would we use the hosts file.</p><p>Summary 08:41-08:51 In this lesson, we reviewed name resolution using first the hosts file and then DNS servers.</p><h2 id="_12-6-2-configure-dns-settings" tabindex="-1"><a class="header-anchor" href="#_12-6-2-configure-dns-settings"><span>12.6.2 Configure DNS Settings</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Configure DNS Setttings 00:00-00:09 In this demonstration, we&#39;re going to look at how you configure name resolution settings on a Linux system.</p><p>Hosts File 00:09-01:05 Let&#39;s talk about the hosts file first. If I go into my /etc directory and run the ls command, we should see that there&#39;s a file here named hosts. Let&#39;s go into this file by typing sudo nano hosts and entering the password. This is the local file on the Linux system where you can specify DNS entries that&#39;d essentially bypass a DNS Server. By default, the system will look here first before it tries to reach out to a DNS server to process the name to IP address translation.</p><p>Notice that the syntax used in this file is relatively simple. You can see an example that&#39;s listed here. We have a second system called ubnt2 in which we can create an entry. First, we need to specify its IP address which is 192.168.1.152, and then specify the fully qualified domain name ubnt2.testout.local, and lastly, the short name ubnt2. We&#39;ll go ahead and save this and exit out of the nano editor.</p><p>Test Configuration 01:05-01:24 Let&#39;s test the configuration and ping the ubnt2 system over the network: ping ubunt2. And we have success. We can also try to ping the fully qualified domain name as well. That means our entry works, and no typos or wrong information is added. This also helps test to ensure we can contact another system on the network.</p><p>Preferred Method for DNS 01:24-02:00 In most cases, the preferred method isn&#39;t to use the host file. However, it&#39;s good to know about it since there might be use cases where you&#39;ll use it. Usually, in a small business, the domain will have its own internal DNS server that&#39;ll store all these entries for you instead of having to specify it on each system. Not only can it store local DNS entries like we just used in the host file, but it can also translate web addresses. If you don&#39;t have a DNS server on site, it&#39;s okay to use a publicly available one such as Google, OpenDNS, Cloudflare, etc. You just won&#39;t be able to use these public ones to translate your local DNS entries.</p><p>Configure DNS 02:00-03:18 The old conventional method of setting the DNS server would be editing the file /etc/resolv.conf and defining a name server in there. Now that&#39;s still possible, but that usually requires disabling Ubuntu&#39;s resolved service or Redhat&#39;s network manager. In configuration files, generally, it&#39;ll tell you not to edit if it&#39;s being controlled elsewhere.</p><p>Let&#39;s define the DNS in a utility called nmtui. After entering nmtui, we&#39;ll be editing a connection. There&#39;s only one network connection here, so we&#39;ll select that. Now, all our configuration is being obtained by DHCP. It&#39;s possible to leave DHCP on and define a DNS server of your choice or define everything to be static.</p><p>To ensure this change is active, we&#39;ll back up, deactivate, and then activate this network connection. We can confirm our changes in several ways by clicking the network up here. Under the Wired Connect/Wired Settings, we can drill down into the configuration of the network adapter. Selecting the gear will define all the information we&#39;re looking for. You can see that the first DNS server is set to 8.8.8.8, and the other one&#39;s pulled from DHCP. There are many ways to define and change network settings, so keep in mind that this isn&#39;t the only way. Let&#39;s clear our screen.</p><p>Name Server Resolution Orders 03:18-04:15 Before we end this demo, there&#39;s one more file that we need to look at here: the /etc/nsswitch.conf. You can configure many different things in the nsswitch file, but there&#39;s one in particular that we&#39;re concerned with today, and that&#39;s this one right here: hosts.</p><p>This entry specifies the sequence in which name resolution should occur. Notice that we have files here, and over here, we have DNS. The word &quot;files&quot; means it&#39;s using the /etc/hosts file, and DNS means it&#39;s using the DNS service.</p><p>What it&#39;s basically saying is that if a user requests a resource from a network host using a hostname or a domain name, the first place we&#39;re going to look to try to resolve that hostname into an IP address is the hosts file.</p><p>If it finds an entry in the hosts file, that&#39;s the entry that&#39;ll be used. Only if it can&#39;t find an entry in the hosts file for the requested domain name will it go over here and send the request to our configured name server—our DNS server.</p><p>Security Exploits 04:15-05:15 This trick is quite useful to know. If we have an entry in the hosts file and the same entry on the DNS server, and they resolve to different IP addresses, the one in the hosts file will win because it will be the one that&#39;s checked first.</p><p>It&#39;s not just Linux that does this; most other operating systems do the same thing, including Windows. This is important to remember because security exploits are floating around that take advantage of this fact.</p><p>These exploits add entries without your knowledge to your hosts file that&#39;ll resolve commonly accessed domain names, host names and domain names into rogue web servers. For example, it might add an entry to the hosts file for amazon.com. It will point not to the real amazon.com IP address but to a rogue web server somewhere else that has a webpage set up to look just like Amazon but isn&#39;t. It will then capture your username and password when you try to log in to make a purchase. This would give the attacker all of your authentication information, and they&#39;d go and run up a very nice bill on the real Amazon website using your username and password.</p><p>Summary 05:15-05:27 In this demonstration, we learned how to configure our Hosts file, DNS, and features related to nsswitch.conf.</p><h2 id="_12-6-3-testing-name-resolution" tabindex="-1"><a class="header-anchor" href="#_12-6-3-testing-name-resolution"><span>12.6.3 Testing Name Resolution</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Testing Name Resolution 00:00-00:11 We are going to use the dig command to test name resolution. We will perform both authoritative and non-authoritative DNS record lookups.</p><p>View DNS Configuration 00:11-00:55 Using ifconfig or ip addr show, we can view this system&#39;s current IP information. We see that this system is getting an IP address of 192.168.1.101 from the DHCP server, but there is not information about DNS.</p><p>On Linux systems, the DNS information is stored in a file named resolv.conf. To view the contents of that file, run cat /etc/resolv.conf. We see the DNS information here.</p><p>When you run dig at the command prompt, by default it uses the name server specified in the /etc/resolv.conf file. If you want to use a different DNS server, enter an at sign (@) after the command, followed by the IP address of the DNS server you want to use.</p><p>dig Options 00:55-02:11 For example, to use the DNS servers with an IP address of 192.168.0.2, instead of the server we saw in our resolv.conf file, run dig @192.168.0.2. All name resolution requests would go to that server instead of the default name server specified in the resolv.conf file. For now, we don&#39;t want to do that. We&#39;ll use the default name server issued by DHCP to run our dig commands.</p><p>Enter dig at the command prompt followed by the type of lookup we want to perform. For example, entering A dc2.demo.local would perform an A record lookup on that host name.</p><p>If we want to perform a reverse lookup by looking up the pointer record, or PTR record, in the reverse zone, we would use dig ptr followed by the IP address of the host that we want to do the reverse lookup on. Instead of resolving the host name into the IP address, the IP address resolves into the host name.</p><p>We can also perform a cname lookup, or alias lookup, by entering dig cname, followed by the alias that we want to resolve into a host name. If we want to resolve a mail server record, then we&#39;d use dig mx followed by the domain name of the mail server that we want to resolve.</p><p>Resolve an A Record-Authoritative 02:11-03:21 For today, let&#39;s resolve an A record. Let&#39;s enter dig a dc1.demo.local and press Enter. This sends the query to the name server, which responds with the corresponding record from the zone. Compared to an nslookup, dig displays more information. Here, we have the question section. This is the request for name resolution that we sent. We sent this domain name. We&#39;re looking for an internet record and we&#39;re looking for an A record. In response, we received: dc1.demo.local resolves to 192.168.1.10.</p><p>We see the query time — how long it took to make that resolution (zero milliseconds) — and the IP address for the server that resolved the domain name into the IP address. There&#39;s a number 53 over here. It specifies that the DNS server is listening on port 53, which is the default port used by DNS servers. Then the timestamp, or the response, and the size of the message.</p><p>Let&#39;s do a non-authoritative lookup. If you don&#39;t specify a type of lookup to perform, dig will perform an A record lookup by default.</p><p>Resolve an A Record-Non-Authoritative 03:21-04:23 For this example, enter dig testout.com and press Enter. Just as with nslookup, the DNS server receives the response, recognizes that the response is not authoritative for that zone, and goes out and queries a root level name server on the internet. It responds with the IP address of the DNS server that is authoritative for the testout.com zone.</p><p>The DNS server then sends that name resolution request to the server that is authoritative for testout.com. It receives the response and then forwards the response to the dig command on the Linux workstation. We see here that we have the same information. Here is the question that was sent: testout.com. Just as before, we have the DNS server on port 53 and the timestamp.</p><p>As mentioned earlier, because we didn&#39;t specify a particular type of lookup to perform, by default dig performed an A record lookup. We received the answer that told us testout.com resolves to the IP address of 40.386.96.177.</p><p>Summary 04:23-04:35 In this demonstration, we talked about using dig to perform both authoritative and non-authoritative DNS record lookups.</p><h2 id="_12-6-4-name-resolution-facts" tabindex="-1"><a class="header-anchor" href="#_12-6-4-name-resolution-facts"><span>12.6.4 Name Resolution Facts</span></a></h2><p>Name resolution services resolve easy to remember host and domain names into IP addresses.</p><p>This lesson covers name resolution settings configuration.</p><h3 id="name-resolution-settings-configuration" tabindex="-1"><a class="header-anchor" href="#name-resolution-settings-configuration"><span>Name Resolution Settings Configuration</span></a></h3><p>The following table lists the files that administrators use to configure name resolution settings on Linux.</p><table><thead><tr><th>Command</th><th>Function</th><th>Examples</th></tr></thead><tbody><tr><td><b>/etc/hosts</b></td><td> When a host needs to resolve a hostname into an IP address, it reads this file first by default. If it finds a mapping for the hostname, it uses it and the name resolution process ends. If it does not find a mapping, it sends the name resolution request to a DNS server. </td><td><b>10.0.0.136 fs5.corpnet.com fs5</b> specifies that the IP address 10.0.0.136 is mapped to fs5.corpnet.com and that the alias fs5 also maps to that same IP address. </td></tr><tr><td><b>/etc/resolv.conf</b></td><td> Provides the system with the address of a DNS server that can be used for name resolution. Up to three servers can be listed, and the servers are accessed in the order specified. The file can also specify a fully qualified domain name that will be appended to hostnames that are missing a domain name. <p> In recent versions of many Linux distributions, the resolv.conf file is generated from other files and is modified there, not directly in resolv.conf. </p></td><td><b>nameserver 8.8.8.8</b> specifies 8.8.8.8 as the IP address of the DNS server. <b><br>search corpnet.com</b> appends the domain name to hostnames that do not have a domain name. For example, <b>linux1</b> becomes <b>linux1.corpnet.com</b> . </td></tr><tr><td><b>/etc/nsswitch.conf</b></td><td> Specifies whether the computer&#39;s hosts file or the DNS server takes precedence. </td><td><b>hosts: files dns</b> specifies that the hosts file takes precedence before the DNS server. </td></tr><tr><td><b>/etc/hostname</b></td><td>Defines the host and domain names.</td><td><b>fs5.corpnet.com</b> identifies the system&#39;s hostname as fs5. </td></tr><tr><td><b>host</b></td><td>Finds the IP address for a domain name.</td><td><b>host fs5.corpnet.com</b> displays the IP address for fs5.corpnet.com. </td></tr><tr><td><b>hostname</b></td><td> Displays or sets the name of the local host for the current session. </td><td><b>hostname ls4</b> sets the hostname for the current session to ls4. </td></tr><tr><td><b>dig</b></td><td> Domain Information Groper (dig) is a command line tool that lets you query Domain Name System (DNS) name servers and displays the answers that are returned from the name server(s) that are queried. <b>dig</b> is useful for verifying and troubleshooting DNS problems. It can also be used to perform DNS lookups to display the answers that are returned from the name server that were queried. </td><td><b>dig testout.com</b> displays the DNS information for the TestOut site. This includes all of the IP addresses mapped to this site. </td></tr><tr><td><b>nslookup</b></td><td> This is a program to query internet domain name servers. The <b>nslookup</b> command has two modes, called interactive and non-interactive. Interactive mode allows the user to query name servers for information about various hosts and domains or to print a list of hosts in a domain. Non-interactive mode allows the user to print just the name and requested information for a host or domain. You use non-interactive mode when the name or internet address of the host you want to look up is the first argument. To use <b>nslookup</b> : <ol><li>Enter <b>nslookup</b> at the shell prompt.</li><li> Enter the hostname or IP address, such as <b>192.168.1.1</b></li><li>The DNS server should respond with the requested mapping.</li><li>Type <b>exit</b> when finished.</li></ol></td><td><b>nslookup google.com</b> returns the IP address for google.com. </td></tr></tbody></table>',67)]))}const d=t(a,[["render",r],["__file","06.html.vue"]]),l=JSON.parse('{"path":"/12/06.html","title":"Section 12.6 Hostname and DNS Configuration","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 12.6 Hostname and DNS Configuration","description":"some description"},"headers":[{"level":2,"title":"12.6.1 Hostname and DNS Configuration","slug":"_12-6-1-hostname-and-dns-configuration","link":"#_12-6-1-hostname-and-dns-configuration","children":[]},{"level":2,"title":"12.6.2 Configure DNS Settings","slug":"_12-6-2-configure-dns-settings","link":"#_12-6-2-configure-dns-settings","children":[]},{"level":2,"title":"12.6.3 Testing Name Resolution","slug":"_12-6-3-testing-name-resolution","link":"#_12-6-3-testing-name-resolution","children":[]},{"level":2,"title":"12.6.4 Name Resolution Facts","slug":"_12-6-4-name-resolution-facts","link":"#_12-6-4-name-resolution-facts","children":[{"level":3,"title":"Name Resolution Settings Configuration","slug":"name-resolution-settings-configuration","link":"#name-resolution-settings-configuration","children":[]}]}],"git":{"updatedTime":1736828265000},"filePathRelative":"12/06.md"}');export{d as comp,l as data};
