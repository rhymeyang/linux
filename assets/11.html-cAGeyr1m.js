import{_ as t,c as s,a as i,o}from"./app-CCsZbG-M.js";const a={};function r(n,e){return o(),s("div",null,e[0]||(e[0]=[i('<p>As you study this section, answer the following questions:</p><ul><li> Which security best practices can you follow to better secure data on a disk drive? </li><li> What are the benefits of UEFI/BIOS passwords and bootloader passwords? </li><li> Why is it a good practice to use a Message-Of-The-Day login banner? </li><li>What is multifactor authentication?</li><li>How can a Linux system use public key infrastructure (PKI)?</li><li> What can you do to make the <b class="fw-bold">cron</b> and <b class="fw-bold">at</b> utilities more secure? </li><li> How can the Common Vulnerabilities and Exposures (CVE) system assist you in making a Linux system more secure? </li></ul><p>Key terms for this section include the following:</p><table class="terms"><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Disk encryption</td><td> A technique that requires a user to enter a password to access decrypted data from a disk drive. </td></tr><tr><td>Bootloader password</td><td> A password for preventing attackers from using the bootloader to boot Linux into the unsecure single-user mode. </td></tr><tr><td> Public key infrastructure <br> (PKI) </td><td> The hardware, software, and individuals necessary to support the creation and distribution of digital certificates. </td></tr><tr><td>chroot jail</td><td> A technique used with the <b class="fw-bold">chroot</b> command to remap the root directory to include only certain directories and files. </td></tr><tr><td> Common Vulnerabilities and Exposures <br> (CVE) </td><td> A database of publicly known security vulnerabilities maintained by the US government. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table class="objectives"><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>TestOut Linux Pro</td><td> 4.1 Manage users and groups <br><ul><li>Manage user access</li></ul> 4.3 Monitor and manage system access <br><ul><li>Manage remote connections</li></ul></td></tr><tr><td>CompTIA Linux+ XK0-005</td><td> 1.3 Given a scenario, configure and manage storage using the appropriate tools <br><ul><li>Mounting local and remote devices</li><ul><li>Linux Unified Key Setup (LUKS)</li></ul></ul><p> 2.1 Summarize the purpose and use of security best practices in a Linux environment </p><ul><li>Managing public key infrastructure (PKI) certificates</li><li>Certificate use cases</li><ul><li> Secure Sockets Layer (SSL)/Transport Layer Security (TLS) </li><li>Encryption</li></ul><li>Authentication</li><ul><li>Tokens</li><li>Multifactor authentication (MFA)</li><li>Lightweight Directory Access Protocol (LDAP)</li></ul><li>Linux hardening</li><ul><li>Secure boot</li><ul><li>UEFI</li></ul><li>Disabling/removing unsecure services</li></ul></ul></td></tr></tbody></table><h2 id="_15-11-1-security-best-practices" tabindex="-1"><a class="header-anchor" href="#_15-11-1-security-best-practices"><span>15.11.1 Security Best Practices</span></a></h2><p>Click one of the buttons to take you to that part of the video.</p><p>Security Best Practices 00:00-00:12 There are several common-sense things you can do to make your Linux system more secure. In this lesson, we&#39;ll talk about a few best practices concerning security in a Linux environment.</p><p>Basic Pointers 00:12-01:05 Let&#39;s start with some basic pointers. USB storage devices can be an entry point for unwanted files, malicious scripts, and other software to enter a system. You should discourage users from using USB storage devices. Additionally, you can disable USB storage support by removing the storage driver.</p><p>Disk encryption is also an effective security practice. Linux Unified Key Setup (LUKS) is an open-source disk encryption software. It requires a user to enter a password to access data on a disk.</p><p>Often, when Linux is installed, an independent partition is added for user data. This keeps the operating system files separated from user data. If the user data partition inadvertently fills up, the Linux system can continue to operate while you consider how to increase user data storage or free up storage by moving or deleting user files. I strongly recommend storing user data on a separate partition if you aren&#39;t doing that already.</p><p>Boot Security and Banners 01:05-02:03 A computer&#39;s BIOS or UEFI can be configured to require a user to enter a password before it will boot an operating system. This is only a minor deterrent, since you can reset the BIOS or UEFI by removing the motherboard battery, but it can be part of a good security plan.</p><p>There&#39;s another level of passwords that can be set in a bootloader, such as GRUB. These passwords help prevent others from booting to Linux and entering single user mode.</p><p>Anyone that has physical access to the keyboard can type Ctrl+Alt+Delete to reboot the server without having to log on. It&#39;s a good practice to disable this key combination. Doing so also prevents accidental reboots.</p><p>A login banner or message-of-the-day (MOTD) is a message that&#39;s presented when a user first connects to a Linux machine. A banner that states that only authorized users are allowed might not deter malicious users, but the banner is also there for legal and privacy reasons. The banner should also inform the user that their actions on the system may be monitored.</p><p>Multifactor Authentication 02:03-02:47 Authentication is a major concern in the security world. A weak authentication strategy can leave your Linux system vulnerable. An overly complicated strategy may drive your users to find unsecure workarounds, like hiding their password in a desk drawer.</p><p>Multifactor authentication adds an extra layer of security to user logins. In the past, only one factor was used to authenticate a user. The user presented something they knew, like a password. Today, good authentication methods use more than one factor. Other factors might include something the user possesses, like a fob or card, or something that the user is, like a fingerprint or iris pattern. Increasingly popular is a one-time-password (OTP) that&#39;s delivered to the user via text message or email.</p><p>Authentication Technologies 02:47-03:45 Once a user has authenticated and logged into a Linux system, there are several technologies and protocols that allow the user to access other resources beyond the local computer. These include RADIUS, TACACS+, LDAP, and Kerberos.</p><p>RADIUS, the remote authentication dial-in user service, provides centralized authentication. A RADIUS server can act as a proxy client to other kinds of authentication servers. TACACS+, (the terminal access controller access-control system plus protocol), is similar to RADIUS.</p><p>With Lightweight Directory Access Protocol, or LDAP, the user authenticates to an LDAP server to access directory information about users, computers, and services in a network.</p><p>The Kerberos protocol is based on tickets that allow nodes communicating over a non-secure network to prove their identity. The kinit shell command authenticates with a Kerberos server, and the klist command lists the Kerberos tickets held in a credentials cache.</p><p>PKI and SSH 03:45-04:40 Another authentication best practice is the use of public key infrastructure (PKI). PKI has all the hardware, software, and people necessary to support the creation and distribution of digital certificates. You will need these certificates to enable SSL and TLS cryptographic security protocols to secure communication.</p><p>One of the benefits of using PKI is that you can set up password-less SSH logins by distributing a server SSH certificate.</p><p>And, speaking of SSH, it&#39;s important that you disable root login via SSH. This is usually the configuration when SSH is first installed.</p><p>Another technique to secure SSH is to chroot jail the SSH service. You can also do this with other services. The chroot jail notion uses the chroot command to remap the root directory to include only certain directories and files. This makes it harder for malicious users to gain access to other sensitive information.</p><p>Services and Ports 04:40-05:29 Services can become unsecure when there&#39;s weak or nonexistent authentication or encryption. This also happens when services run as root. Be sure to use safe authentication methods and encryption, especially when dealing with sensitive information.</p><p>Protocols define basic rules for exchanging information, and they can become unsecure too. Older protocols may lack encryption, making it easy to sniff credentials on the network. Some of these protocols are FTP, HTTP, IMAP, Telnet, Finger, Sendmail, and Postfix. Avoid using these protocols for services that share sensitive data. Also, if you find a service is not being used or is vulnerable, consider disabling or uninstalling it.</p><p>To increase security, you can change the default TCP and UDP ports for commonly used services and applications.</p><p>Linux Monitoring 05:29-06:21 Another vulnerability is the use of the cron and at commands. Malware often uses these utilities to make sure malicious code persists even after it&#39;s been removed. Normally, these commands are only available to Linux administrators. You should monitor your cron and at jobs and consider restricting access to these commands.</p><p>You can also enable auditd to monitor log files and audit access to system files, directories, and resources. The auditd utility can also monitor application misconducts or code malfunctions. You can configure a set of rules to ensure any security policy violation is addressed.</p><p>Finally, you should also monitor the CVE (common vulnerabilities and exposures) system, which is maintained by the US government. It&#39;s a reference for publicly known security vulnerabilities. There are applications and scripts that can automate this task and make recommendations to mitigate vulnerabilities.</p><p>Summary 06:21-06:47 And that&#39;s it for this video. In this lesson, we talked about security best practices in a Linux environment. We covered some basic pointers and security practices during boot and login. We discussed multifactor authentication and authentication technologies. We talked about PKI, SSH, and security practices involving services and ports. And we ended with Linux monitoring best practices.</p><h2 id="_15-11-2-security-best-practices-facts" tabindex="-1"><a class="header-anchor" href="#_15-11-2-security-best-practices-facts"><span>15.11.2 Security Best Practices Facts</span></a></h2><p>There are several common-sense things you can do to make your Linux system more secure.</p><p>This lesson covers Linux security best practices.</p><h3 id="linux-security-best-practices" tabindex="-1"><a class="header-anchor" href="#linux-security-best-practices"><span>Linux security Best Practices</span></a></h3><p>The following table lists a few Linux security best practices.</p><table><thead><tr><th>Best Practice</th><th>Description</th></tr></thead><tbody><tr><td>USB storage devices</td><td> USB storage devices can be an entry point for unwanted files, malicious scripts, and other software to enter a system. You should discourage users from using USB storage devices. Additionally, you can disable USB storage support by removing the storage driver. </td></tr><tr><td>Disk encryption</td><td> Disk encryption is an effective security practice. Linux Unified Key Setup (LUKS) is an open-source disk encryption software. It requires a user to enter a password to access data on a disk. </td></tr><tr><td>Data partition</td><td> When Linux is installed, an independent partition is often added for user data. This keeps the operating system files separated from user data. If the user data partition inadvertently fills up, the Linux system can continue to operate while you consider how to increase user data storage or free up storage by moving or deleting user files. If not already configured, store user data on a separate partition from system data. </td></tr><tr><td>UEFI/BIOS passwords</td><td> A computer’s UEFI or BIOS can be configured to require a user to enter a password before it will boot an operating system. This is only a minor deterrent since you can reset the UEFI or BIOS by removing the motherboard battery, but it can be part of a good security plan. </td></tr><tr><td>Bootloader passwords</td><td> Another level of password can be set in a bootloader, such as GRUB. These passwords help prevent others from booting to Linux and entering single-user mode. </td></tr><tr><td>Disable Ctrl+Alt+Delete</td><td> Anyone with physical access to the keyboard can type Ctrl+Alt+Delete to reboot the server without having to log on. Consider disabling this key combination. Doing so also prevents accidental reboots. </td></tr><tr><td>Message-of-the-day (MOTD)</td><td> A login banner or message-of-the-day (MOTD) is a message presented when a user first connects to a Linux machine. A banner that states that only authorized users are allowed might not deter malicious users, but the banner is also there for legal and privacy reasons. The banner should also inform the user that their actions on the system may be monitored. </td></tr><tr><td>Multifactor authentication</td><td> Authentication is a major concern in the security world. A weak authentication strategy can leave your Linux system vulnerable. An overly complicated strategy may drive your users to find unsecured workarounds, like hiding their password in a desk drawer. <p> Multifactor authentication adds an extra layer of security to user logins. In the past, only one factor was used to authenticate a user. The user presented something they knew, like a password. Today, good authentication methods use more than one factor. Other factors might include something the user possesses, like a fob or card, or something that the user is, like a fingerprint or iris pattern. Increasingly popular is a one-time password (OTP) that’s delivered to the user via text message or email. </p></td></tr><tr><td>Authentication technologies</td><td> Once a user has authenticated and logged into a Linux system, there are several technologies and protocols that allow the user to access other resources beyond the local computer. These include RADIUS, TACACS+, LDAP, and Kerberos. <ul><li> RADIUS, the remote authentication dial-in user service, provides centralized authentication. A RADIUS server can act as a proxy client to other kinds of authentication servers. </li><li> TACACS+ (the terminal access controller access-control system plus protocol) is similar to RADIUS. </li><li> With Lightweight Directory Access Protocol, or LDAP, the user authenticates to an LDAP server to access directory information about users, computers, and services in a network. </li><li> The Kerberos protocol is based on tickets that allow nodes communicating over a non-secure network to prove their identity. <ul><li> The kinit shell command authenticates with a Kerberos server. </li><li> The klist command lists the Kerberos tickets held in a credentials cache. </li></ul></li></ul></td></tr><tr><td>PKI and SSH</td><td> Public key infrastructure (PKI) has all the hardware, software, and people necessary to support the creation and distribution of digital certificates. Certificates are required to enable SSL and TLS cryptographic security protocols to secure communication. <br> One of the benefits of using PKI is that you can set up password-less SSH logins by distributing a server SSH certificate. </td></tr><tr><td>SSH root login</td><td> It’s important that you disable root login via SSH. This is usually the configuration when SSH is first installed. </td></tr><tr><td>chroot jail SSH</td><td> Another technique to secure SSH is to chroot jail the SSH service. You can also do this with other services. <p> The chroot jail notion uses the chroot command to remap the root directory to include only certain directories and files. This technology makes it harder for malicious users to gain access to other sensitive information. </p></td></tr><tr><td>Services</td><td> Services can become unsecured when there’s weak or nonexistent authentication or encryption. This also happens when services run as root. Be sure to use safe authentication methods and encryption, especially when dealing with sensitive information. Also, if you find a service is not being used or is vulnerable, consider disabling or uninstalling it. </td></tr><tr><td>Protocols</td><td> Protocols define basic rules for exchanging information, and can become unsecure. Older protocols may lack encryption, making it easy to sniff credentials on the network. These protocols include FTP, HTTP, IMAP, Telnet, Finger, Sendmail, and Postfix. Avoid using these protocols for services that share sensitive data. </td></tr><tr><td>Ports</td><td> To increase security, you can change the default TCP and UDP ports for commonly used services and applications. </td></tr><tr><td>cron and at</td><td> Another vulnerability is the use of the cron and at commands. Malware often uses these utilities to make sure malicious code persists even after it’s been removed. Normally, these commands are only available to Linux administrators. You should monitor your cron and at jobs and consider restricting access to these commands. </td></tr><tr><td>auditd</td><td> You can enable auditd to monitor log files and audit access to system files, directories, and resources. The auditd utility can also monitor application misconduct or code malfunctions. You can configure a set of rules to ensure any security policy violation is addressed. </td></tr><tr><td>CVE</td><td> Finally, you should also monitor the CVE (common vulnerabilities and exposures) system, which is maintained by the US government. It’s a reference for publicly known security vulnerabilities. Some applications and scripts can automate this task and make recommendations to mitigate vulnerabilities. </td></tr></tbody></table>',39)]))}const l=t(a,[["render",r],["__file","11.html.vue"]]),d=JSON.parse('{"path":"/15/11.html","title":"Section 15.11 Security Best Practices","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 15.11 Security Best Practices","description":"some description"},"headers":[{"level":2,"title":"15.11.1 Security Best Practices","slug":"_15-11-1-security-best-practices","link":"#_15-11-1-security-best-practices","children":[]},{"level":2,"title":"15.11.2 Security Best Practices Facts","slug":"_15-11-2-security-best-practices-facts","link":"#_15-11-2-security-best-practices-facts","children":[{"level":3,"title":"Linux security Best Practices","slug":"linux-security-best-practices","link":"#linux-security-best-practices","children":[]}]}],"git":{"updatedTime":1736840298000},"filePathRelative":"15/11.md"}');export{l as comp,d as data};
